Through the "Insert ASM" option, one can insert ASM directly into the file,
at certain locations. 

But before that...you must know the ASM you are inserting.
Ultimately, you should be able to tell what the code you are putting in does.
You can use one of the many GB/C ASM resources available to learn more.

Allowed words:
Any of these language words:
adc, add, and, bit, ccf, cp, cpl, daa, dec, di, ei, halt, inc, jp, jr, ld, ldd
ldhl, ldi, nop, or, pop, push, res, ret, reti, rl, rla, rlc, rlca, rr, rra, 
rrc, rrca, rst, sbc, scf, set, sla, sra, srl, stop, sub, sub, swap, swap, xor

As well as these directives (for data):
db, dw

Numbers:
If writing a number, just type the number, no prefix (except
negative sign for negative numbers).
Ex: 23, 504
If it's in hex, write the number with a 0x or $ preceding it.
Ex: $5F, 0x032F

Numbers will be truncated to fit into instructions, so be careful to know how
the instruction uses an integer argument.

Labels/Variables:
Label and variable names have to start with a letter, and can contain letters,
numbers, or underscores. Don't redefine a label or variable (or register) that
already exists.

Registers:
Depending on the instruction, you'll be able to use the register singles
(b, c, d, e, h, l, [hl], a), register doubles (bc, de, hl, af, sp), and so
on.

Features:
Variable definition:
Define certain values, using ([name] equ [value]), or ([name] = [value])
Ex: 
var2 equ $3456
var3 equ $234
Variables have no limit in themselves, but will be extended (or truncated) to
fit the instruction that you use them in (either to the size of a byte, or a
short). That is, with bytes, the var will be ANDed with 0xFF, and for shorts,
ANDed with 0xFFFF.

Label definition:
You can define temporary labels while you're typing (for the purpose of call
/jp/jr, for example), or use labels that you've already defined.
Ex:
label1:
ldi [hl],a
dec bc
ld a,b
or c
jr label1

Data definition:
You can specify data to insert, at any place. Start with the size of data (db,
dw), then the list of data being inserted, separated by commas. Variables can
also be used in these definitions.
Ex:
db $23,$34,VAR_NAME
dw $3149,$4794,$15F

db is used to insert bytes (8-bit), and dw is used to insert words
(16-bit, little endian). As with instructions, if numbers are too wide or too
short, they will be extended or truncated to fit. For example,
db $6534

will be interpreted as

db $34

.

Comments:
Append comments to lines with #, or ;.
Ex:

#This is a comment.
ld a,b ;This is also a comment.

Instructions:
Just type the appropriate instruction in the proper place.
Instruction Format:
[inst] [arg1],[arg2]
There are certain instructions that will be written differently, depending on
what you are used to working with in other assemblers.

Load Increase/Decrease A,[HL]/[HL],A
ldd a,[hl] ldd [hl],a
ldi a,[hl] ldi [hl],a

Load [Location],A/A,[Location]
This instruction will use the shorter form of the instruction (E0/F0)
depending on whether the called location resides in [$FF00-$FFFF] or not.

Load HL, SP + Offset
ldhl sp,x

Load [$FFCC],A/A,[$FFCC]
ld [c],a ld a,[c]

Stop
When converting to bytecode, a NOP will be inserted after it, to allow for the
behavior of the processor after executing this instruction.

Jump Relative
Sometimes a jump will be possible, and sometimes it won't, like when the
offset being jumped to lies outside of the range of jr. For this
instruction, you can use a label, or an offset, to specify where to jump to.

Extra Instructions:
srl (r1)(r2),n

Acts as a shorthand for when you want to do a shift of a register pair. r can
be a, b, c, d, e, h, or l. n is a number from 1 to 7.

Ex:
srl bc,2

expands to 

srl b
rr c
srl b
rr c

This can be used for registers a, b, c, d, e, h, and l.

srl al,3

==

srl a
rr l
srl a
rr l
srl a
rr l