namespace LibGBasm
{
	internal class GBInstructions
	{
		private static GBArgument BCMap = new GBArgument() { ArgType = GBArgumentType.MemMapRegisterDouble, RegDoubleArg = GBRegisterDouble.bc };
		private static GBArgument DEMap = new GBArgument() { ArgType = GBArgumentType.MemMapRegisterDouble, RegDoubleArg = GBRegisterDouble.de };
		private static GBArgument HLMap = new GBArgument() { ArgType = GBArgumentType.MemMapRegisterDouble, RegDoubleArg = GBRegisterDouble.hl };
		private static GBArgument CMap = new GBArgument() { ArgType = GBArgumentType.MemMapRegisterSingle, RegSingleArg = GBRegisterSingle.c };

		private static GBArgument NCCond = new GBArgument() { ArgType = GBArgumentType.Conditional, CondArg = GBConditional.nc };
		private static GBArgument CCond = new GBArgument() { ArgType = GBArgumentType.Conditional, CondArg = GBConditional.c };
		private static GBArgument NZCond = new GBArgument() { ArgType = GBArgumentType.Conditional, CondArg = GBConditional.nz };
		private static GBArgument ZCond = new GBArgument() { ArgType = GBArgumentType.Conditional, CondArg = GBConditional.z };

		private static GBArgument RegA = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.a };
		private static GBArgument RegB = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.b };
		private static GBArgument RegC = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.c };
		private static GBArgument RegD = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.d };
		private static GBArgument RegE = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.e };
		private static GBArgument RegH = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.h };
		private static GBArgument RegL = new GBArgument() { ArgType = GBArgumentType.RegisterSingle, RegSingleArg = GBRegisterSingle.l };

		private static GBArgument RegAF = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.af };
		private static GBArgument RegBC = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.bc };
		private static GBArgument RegDE = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.de };
		private static GBArgument RegHL = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.hl };
		private static GBArgument RegSP = new GBArgument() { ArgType = GBArgumentType.RegisterDouble, RegDoubleArg = GBRegisterDouble.sp };

		private static GBArgument ByteArg = new GBArgument() { ArgType = GBArgumentType.Byte };
		private static GBArgument WordArg = new GBArgument() { ArgType = GBArgumentType.Word };
		private static GBArgument MemMapArg = new GBArgument() { ArgType = GBArgumentType.MemMapWord };

		private static GBArgument BitArg0 = new GBArgument() { ArgType = GBArgumentType.Bit, NumArg = 0 };
		private static GBArgument BitArg1 = new GBArgument() { ArgType = GBArgumentType.Bit, NumArg = 1 };
		private static GBArgument BitArg2 = new GBArgument() { ArgType = GBArgumentType.Bit, NumArg = 2 };
		private static GBArgument BitArg3 = new GBArgument() { ArgType = GBArgumentType.Bit, NumArg = 3 };
		private static GBArgument BitArg4 = new GBArgument() { ArgType = GBArgumentType.Bit, NumArg = 4 };
		private static GBArgument BitArg5 = new GBArgument() { ArgType = GBArgumentType.Bit, NumArg = 5 };
		private static GBArgument BitArg6 = new GBArgument() { ArgType = GBArgumentType.Bit, NumArg = 6 };
		private static GBArgument BitArg7 = new GBArgument() { ArgType = GBArgumentType.Bit, NumArg = 7 };

		#region Regular Instructions

		internal static GBInstruction[] InstructionUnitTable = new GBInstruction[256]
		{
			#region 0x00-0x0F
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.nop },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegBC, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = BCMap, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegBC },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.rlca },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = MemMapArg, Arg2 = RegSP },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegHL, Arg2 = RegBC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = BCMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegBC },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.rrca },
			#endregion
			#region 0x10-0x1F
			new GBInstruction() { InstSize = 2, ArgCount = 0, InstType = InstructionType.stop },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegDE, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = DEMap, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegDE },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.rla },
			new GBInstruction() { InstSize = 2, ArgCount = 1, InstType = InstructionType.jr, Arg1 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegHL, Arg2 = RegDE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = DEMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegDE },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.rra },
			#endregion
			#region 0x20-0x2F
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.jr, Arg1 = NZCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegHL, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ldi, Arg1 = HLMap, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegHL },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.daa },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.jr, Arg1 = ZCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegHL, Arg2 = RegHL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ldi, Arg1 = RegA, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegHL },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.cpl },
			#endregion
			#region 0x30-0x3F
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.jr, Arg1 = NCCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegSP, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ldd, Arg1 = HLMap, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegSP },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.scf },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.jr, Arg1 = CCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegHL, Arg2 = RegSP },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ldd, Arg1 = RegA, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegSP },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.inc, Arg1 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.dec, Arg1 = RegA },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.ccf },
			#endregion
			#region 0x40-0x4F
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegB, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegC, Arg2 = RegA },
			#endregion
			#region 0x50-0x5F
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegD, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegE, Arg2 = RegA },
			#endregion
			#region 0x60-0x6F
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegH, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegL, Arg2 = RegA },
			#endregion
			#region 0x70-0x7F
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.halt },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = HLMap, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = RegA },
			#endregion
			#region 0x80-0x8F
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = RegA },
			#endregion
			#region 0x90-0x9F
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.sub, Arg1 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.sub, Arg1 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.sub, Arg1 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.sub, Arg1 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.sub, Arg1 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.sub, Arg1 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.sub, Arg1 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.sub, Arg1 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = RegA },
			#endregion
			#region 0xA0-0xAF
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.and, Arg1 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.xor, Arg1 = RegA },
			#endregion
			#region 0xB0-0xBF
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg1 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg1 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg1 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg1 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg1 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg1 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg1 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.or, Arg1 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg1 = RegB },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg1 = RegC },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg1 = RegD },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg1 = RegE },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg1 = RegH },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg1 = RegL },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg1 = HLMap },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.cp, Arg1 = RegA },
			#endregion
			#region 0xC0-0xCF
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.ret, Arg1 = NZCond },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.pop, Arg1 = RegBC },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.jp, Arg1 = NZCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 3, ArgCount = 1, InstType = InstructionType.jp, Arg1 = WordArg },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.call, Arg1 = NZCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.push, Arg1 = RegBC },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegA, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumArg = 0x00 } },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.ret, Arg1 = ZCond },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.ret },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.jp, Arg1 = ZCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 2, ArgCount = 0, InstType = InstructionType.cb },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.call, Arg1 = ZCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 3, ArgCount = 1, InstType = InstructionType.call, Arg1 = WordArg },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.adc, Arg1 = RegA, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumArg = 0x08 } },
			#endregion
			#region 0xD0-0xDF
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.ret, Arg1 = NCCond },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.pop, Arg1 = RegDE },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.jp, Arg1 = NCCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.call, Arg1 = NCCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.push, Arg1 = RegDE },
			new GBInstruction() { InstSize = 2, ArgCount = 1, InstType = InstructionType.sub, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumArg = 0x10 } },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.ret, Arg1 = CCond },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.reti },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.jp, Arg1 = CCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.call, Arg1 = CCond, Arg2 = WordArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.sbc, Arg1 = RegA, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumArg = 0x18 } },
			#endregion
			#region 0xE0-0xEF
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = MemMapArg, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.pop, Arg1 = RegHL },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = CMap, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.push, Arg1 = RegHL },
			new GBInstruction() { InstSize = 2, ArgCount = 1, InstType = InstructionType.and, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumArg = 0x20 } },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.add, Arg1 = RegSP, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.jp, Arg1 = RegHL },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = MemMapArg, Arg2 = RegA },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 2, ArgCount = 1, InstType = InstructionType.xor, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumArg = 0x28 } },
			#endregion
			#region 0xF0-0xFF
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = MemMapArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.pop, Arg1 = RegAF },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = CMap },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.di },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.push, Arg1 = RegAF },
			new GBInstruction() { InstSize = 2, ArgCount = 1, InstType = InstructionType.or, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumArg = 0x30 } },
			new GBInstruction() { InstSize = 2, ArgCount = 2, InstType = InstructionType.ldhl, Arg1 = RegSP, Arg2 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegSP, Arg2 = RegHL },
			new GBInstruction() { InstSize = 3, ArgCount = 2, InstType = InstructionType.ld, Arg1 = RegA, Arg2 = MemMapArg },
			new GBInstruction() { InstSize = 1, ArgCount = 0, InstType = InstructionType.ei },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.db, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 2, ArgCount = 1, InstType = InstructionType.cp, Arg1 = ByteArg },
			new GBInstruction() { InstSize = 1, ArgCount = 1, InstType = InstructionType.rst, Arg1 = new GBArgument(){ ArgType = GBArgumentType.Byte, NumArg = 0x38 } }
			#endregion
		};

		#endregion Regular Instructions

		#region CB Instructions

		internal static GBInstruction[] CBInstructionUnitTable = new GBInstruction[256]
		{
			//00-0F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rlc, ArgCount = 1, Arg1 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rrc, ArgCount = 1, Arg1 = RegA },
			//10-1F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rl, ArgCount = 1, Arg1 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.rr, ArgCount = 1, Arg1 = RegA },
			//20-2F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sla, ArgCount = 1, Arg1 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.sra, ArgCount = 1, Arg1 = RegA },
			//30-3F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.swap, ArgCount = 1, Arg1 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.srl, ArgCount = 1, Arg1 = RegA },
			//40-4F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegA },
			//50-5F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegA },
			//60-6F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegA },
			//70-7F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.bit, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegA },
			//80-8F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegA },
			//90-9F
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegA },
			//A0-AF
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegA },
			//B0-BF
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.res, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegA },
			//C0-CF
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg0, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg1, Arg2 = RegA },
			//D0-DF
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg2, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg3, Arg2 = RegA },
			//E0-EF
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg4, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg5, Arg2 = RegA },
			//F0-FF
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg6, Arg2 = RegA },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegB },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegC },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegD },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegE },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegH },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegL },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = HLMap },
			new GBInstruction() { InstSize = 2, InstType = InstructionType.set, ArgCount = 2, Arg1 = BitArg7, Arg2 = RegA },
		};

		#endregion CB Instructions
	}
}