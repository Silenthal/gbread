//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 DataTemplate.g 2012-11-06 21:04:37

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

#pragma warning disable 3021

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace GBRead.Base
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class DataTemplateLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int ARG=4;
	public const int ARRLEN=5;
	public const int BIN_DIGIT=6;
	public const int BIN_NUMBER=7;
	public const int COMMENT=8;
	public const int EXPRESSION=9;
	public const int FIXSTRING=10;
	public const int HEX_DIGIT=11;
	public const int HEX_NUMBER=12;
	public const int INT=13;
	public const int LITERAL=14;
	public const int NUMBER=15;
	public const int OCT_DIGIT=16;
	public const int OCT_NUMBER=17;
	public const int ROOT=18;
	public const int VARSTRING=19;
	public const int WS=20;

	private List<ErrInfo> Errors = new List<ErrInfo>();

	public override void DisplayRecognitionError(string[] tokenNames, RecognitionException e)
	{
		string errHeader = GetErrorHeader(e);
		string errMSG = GetErrorMessage(e, tokenNames);
		Errors.Add(new ErrInfo() {errText = errMSG, error = e});
	}

		public List<ErrInfo> GetErrors()
	{
		return Errors;
	}


    // delegates
    // delegators

	public DataTemplateLexer()
	{
		OnCreated();
	}

	public DataTemplateLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public DataTemplateLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "DataTemplate.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 1);
		TraceIn("T__21", 1);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:25:7: ( '!' )
			DebugEnterAlt(1);
			// DataTemplate.g:25:9: '!'
			{
			DebugLocation(25, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 1);
			LeaveRule("T__21", 1);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 2);
		TraceIn("T__22", 2);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:26:7: ( '!=' )
			DebugEnterAlt(1);
			// DataTemplate.g:26:9: '!='
			{
			DebugLocation(26, 9);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 2);
			LeaveRule("T__22", 2);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 3);
		TraceIn("T__23", 3);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:27:7: ( '%' )
			DebugEnterAlt(1);
			// DataTemplate.g:27:9: '%'
			{
			DebugLocation(27, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 3);
			LeaveRule("T__23", 3);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 4);
		TraceIn("T__24", 4);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:28:7: ( '&&' )
			DebugEnterAlt(1);
			// DataTemplate.g:28:9: '&&'
			{
			DebugLocation(28, 9);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 4);
			LeaveRule("T__24", 4);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 5);
		TraceIn("T__25", 5);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:29:7: ( '&' )
			DebugEnterAlt(1);
			// DataTemplate.g:29:9: '&'
			{
			DebugLocation(29, 9);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 5);
			LeaveRule("T__25", 5);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 6);
		TraceIn("T__26", 6);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:30:7: ( '(' )
			DebugEnterAlt(1);
			// DataTemplate.g:30:9: '('
			{
			DebugLocation(30, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 6);
			LeaveRule("T__26", 6);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 7);
		TraceIn("T__27", 7);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:31:7: ( ')' )
			DebugEnterAlt(1);
			// DataTemplate.g:31:9: ')'
			{
			DebugLocation(31, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 7);
			LeaveRule("T__27", 7);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 8);
		TraceIn("T__28", 8);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:32:7: ( '*' )
			DebugEnterAlt(1);
			// DataTemplate.g:32:9: '*'
			{
			DebugLocation(32, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 8);
			LeaveRule("T__28", 8);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 9);
		TraceIn("T__29", 9);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:33:7: ( '+' )
			DebugEnterAlt(1);
			// DataTemplate.g:33:9: '+'
			{
			DebugLocation(33, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 9);
			LeaveRule("T__29", 9);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 10);
		TraceIn("T__30", 10);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:34:7: ( '-' )
			DebugEnterAlt(1);
			// DataTemplate.g:34:9: '-'
			{
			DebugLocation(34, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 10);
			LeaveRule("T__30", 10);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 11);
		TraceIn("T__31", 11);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:35:7: ( '/' )
			DebugEnterAlt(1);
			// DataTemplate.g:35:9: '/'
			{
			DebugLocation(35, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 11);
			LeaveRule("T__31", 11);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 12);
		TraceIn("T__32", 12);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:36:7: ( ':' )
			DebugEnterAlt(1);
			// DataTemplate.g:36:9: ':'
			{
			DebugLocation(36, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 12);
			LeaveRule("T__32", 12);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 13);
		TraceIn("T__33", 13);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:37:7: ( ';' )
			DebugEnterAlt(1);
			// DataTemplate.g:37:9: ';'
			{
			DebugLocation(37, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 13);
			LeaveRule("T__33", 13);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 14);
		TraceIn("T__34", 14);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:38:7: ( '<' )
			DebugEnterAlt(1);
			// DataTemplate.g:38:9: '<'
			{
			DebugLocation(38, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 14);
			LeaveRule("T__34", 14);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 15);
		TraceIn("T__35", 15);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:39:7: ( '<<' )
			DebugEnterAlt(1);
			// DataTemplate.g:39:9: '<<'
			{
			DebugLocation(39, 9);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 15);
			LeaveRule("T__35", 15);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 16);
		TraceIn("T__36", 16);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:40:7: ( '<=' )
			DebugEnterAlt(1);
			// DataTemplate.g:40:9: '<='
			{
			DebugLocation(40, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 16);
			LeaveRule("T__36", 16);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 17);
		TraceIn("T__37", 17);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:41:7: ( '==' )
			DebugEnterAlt(1);
			// DataTemplate.g:41:9: '=='
			{
			DebugLocation(41, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 17);
			LeaveRule("T__37", 17);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 18);
		TraceIn("T__38", 18);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:42:7: ( '>' )
			DebugEnterAlt(1);
			// DataTemplate.g:42:9: '>'
			{
			DebugLocation(42, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 18);
			LeaveRule("T__38", 18);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 19);
		TraceIn("T__39", 19);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:43:7: ( '>=' )
			DebugEnterAlt(1);
			// DataTemplate.g:43:9: '>='
			{
			DebugLocation(43, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 19);
			LeaveRule("T__39", 19);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 20);
		TraceIn("T__40", 20);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:44:7: ( '>>' )
			DebugEnterAlt(1);
			// DataTemplate.g:44:9: '>>'
			{
			DebugLocation(44, 9);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 20);
			LeaveRule("T__40", 20);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 21);
		TraceIn("T__41", 21);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:45:7: ( '?' )
			DebugEnterAlt(1);
			// DataTemplate.g:45:9: '?'
			{
			DebugLocation(45, 9);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 21);
			LeaveRule("T__41", 21);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 22);
		TraceIn("T__42", 22);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:46:7: ( '[' )
			DebugEnterAlt(1);
			// DataTemplate.g:46:9: '['
			{
			DebugLocation(46, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 22);
			LeaveRule("T__42", 22);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 23);
		TraceIn("T__43", 23);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:47:7: ( ']' )
			DebugEnterAlt(1);
			// DataTemplate.g:47:9: ']'
			{
			DebugLocation(47, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 23);
			LeaveRule("T__43", 23);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 24);
		TraceIn("T__44", 24);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:48:7: ( '^' )
			DebugEnterAlt(1);
			// DataTemplate.g:48:9: '^'
			{
			DebugLocation(48, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 24);
			LeaveRule("T__44", 24);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 25);
		TraceIn("T__45", 25);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:49:7: ( 'byte' )
			DebugEnterAlt(1);
			// DataTemplate.g:49:9: 'byte'
			{
			DebugLocation(49, 9);
			Match("byte"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 25);
			LeaveRule("T__45", 25);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 26);
		TraceIn("T__46", 26);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:50:7: ( 'dword' )
			DebugEnterAlt(1);
			// DataTemplate.g:50:9: 'dword'
			{
			DebugLocation(50, 9);
			Match("dword"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 26);
			LeaveRule("T__46", 26);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 27);
		TraceIn("T__47", 27);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:51:7: ( 'qword' )
			DebugEnterAlt(1);
			// DataTemplate.g:51:9: 'qword'
			{
			DebugLocation(51, 9);
			Match("qword"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 27);
			LeaveRule("T__47", 27);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 28);
		TraceIn("T__48", 28);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:52:7: ( 'string' )
			DebugEnterAlt(1);
			// DataTemplate.g:52:9: 'string'
			{
			DebugLocation(52, 9);
			Match("string"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 28);
			LeaveRule("T__48", 28);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 29);
		TraceIn("T__49", 29);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:53:7: ( 'word' )
			DebugEnterAlt(1);
			// DataTemplate.g:53:9: 'word'
			{
			DebugLocation(53, 9);
			Match("word"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 29);
			LeaveRule("T__49", 29);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 30);
		TraceIn("T__50", 30);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:54:7: ( '|' )
			DebugEnterAlt(1);
			// DataTemplate.g:54:9: '|'
			{
			DebugLocation(54, 9);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 30);
			LeaveRule("T__50", 30);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 31);
		TraceIn("T__51", 31);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:55:7: ( '||' )
			DebugEnterAlt(1);
			// DataTemplate.g:55:9: '||'
			{
			DebugLocation(55, 9);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 31);
			LeaveRule("T__51", 31);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 32);
		TraceIn("T__52", 32);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:56:7: ( '~' )
			DebugEnterAlt(1);
			// DataTemplate.g:56:9: '~'
			{
			DebugLocation(56, 9);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 32);
			LeaveRule("T__52", 32);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 33);
		TraceIn("NUMBER", 33);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:98:10: ( INT | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER )
			int alt1=4;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case '0':
				{
				switch (input.LA(2))
				{
				case 'x':
					{
					alt1 = 2;
					}
					break;
				case 'b':
					{
					alt1 = 3;
					}
					break;
				case 'o':
					{
					alt1 = 4;
					}
					break;
				default:
					alt1=1;
					break;

				}

				}
				break;
			case '$':
				{
				alt1 = 2;
				}
				break;
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				alt1 = 1;
				}
				break;
			case '%':
				{
				alt1 = 3;
				}
				break;
			case '&':
				{
				alt1 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// DataTemplate.g:98:12: INT
				{
				DebugLocation(98, 12);
				mINT(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// DataTemplate.g:99:7: HEX_NUMBER
				{
				DebugLocation(99, 7);
				mHEX_NUMBER(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// DataTemplate.g:100:7: BIN_NUMBER
				{
				DebugLocation(100, 7);
				mBIN_NUMBER(); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// DataTemplate.g:101:7: OCT_NUMBER
				{
				DebugLocation(101, 7);
				mOCT_NUMBER(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 33);
			LeaveRule("NUMBER", 33);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 34);
		TraceIn("COMMENT", 34);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:103:11: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0=='/'))
			{
				int LA5_1 = input.LA(2);

				if ((LA5_1=='/'))
				{
					alt5 = 1;
				}
				else if ((LA5_1=='*'))
				{
					alt5 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// DataTemplate.g:103:15: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(103, 15);
				Match("//"); 

				DebugLocation(103, 20);
				// DataTemplate.g:103:20: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_0 = input.LA(1);

					if (((LA2_0>='\u0000' && LA2_0<='\t')||(LA2_0>='\u000B' && LA2_0<='\f')||(LA2_0>='\u000E' && LA2_0<='\uFFFF')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// DataTemplate.g:
						{
						DebugLocation(103, 20);
						input.Consume();


						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(103, 34);
				// DataTemplate.g:103:34: ( '\\r' )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0=='\r'))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// DataTemplate.g:103:34: '\\r'
					{
					DebugLocation(103, 34);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(103, 40);
				Match('\n'); 
				DebugLocation(103, 45);
				_channel=Hidden;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// DataTemplate.g:104:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(104, 9);
				Match("/*"); 

				DebugLocation(104, 14);
				// DataTemplate.g:104:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0=='*'))
					{
						int LA4_1 = input.LA(2);

						if ((LA4_1=='/'))
						{
							alt4 = 2;
						}
						else if (((LA4_1>='\u0000' && LA4_1<='.')||(LA4_1>='0' && LA4_1<='\uFFFF')))
						{
							alt4 = 1;
						}


					}
					else if (((LA4_0>='\u0000' && LA4_0<=')')||(LA4_0>='+' && LA4_0<='\uFFFF')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// DataTemplate.g:104:42: .
						{
						DebugLocation(104, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(104, 47);
				Match("*/"); 

				DebugLocation(104, 52);
				_channel=Hidden;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 34);
			LeaveRule("COMMENT", 34);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 35);
		TraceIn("INT", 35);
		try
		{
			// DataTemplate.g:108:8: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// DataTemplate.g:108:10: ( '0' .. '9' )+
			{
			DebugLocation(108, 10);
			// DataTemplate.g:108:10: ( '0' .. '9' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// DataTemplate.g:
					{
					DebugLocation(108, 10);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

		}
		finally
		{
			TraceOut("INT", 35);
			LeaveRule("INT", 35);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_HEX_NUMBER();
	partial void LeaveRule_HEX_NUMBER();

	// $ANTLR start "HEX_NUMBER"
	[GrammarRule("HEX_NUMBER")]
	private void mHEX_NUMBER()
	{
		EnterRule_HEX_NUMBER();
		EnterRule("HEX_NUMBER", 36);
		TraceIn("HEX_NUMBER", 36);
		try
		{
			// DataTemplate.g:110:13: ( '$' ( HEX_DIGIT )+ | '0' 'x' ( HEX_DIGIT )+ )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='$'))
			{
				alt9 = 1;
			}
			else if ((LA9_0=='0'))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// DataTemplate.g:110:15: '$' ( HEX_DIGIT )+
				{
				DebugLocation(110, 15);
				Match('$'); 
				DebugLocation(110, 18);
				// DataTemplate.g:110:18: ( HEX_DIGIT )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>='0' && LA7_0<='9')||(LA7_0>='a' && LA7_0<='f')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// DataTemplate.g:
						{
						DebugLocation(110, 18);
						input.Consume();


						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// DataTemplate.g:111:7: '0' 'x' ( HEX_DIGIT )+
				{
				DebugLocation(111, 7);
				Match('0'); 
				DebugLocation(111, 10);
				Match('x'); 
				DebugLocation(111, 13);
				// DataTemplate.g:111:13: ( HEX_DIGIT )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>='0' && LA8_0<='9')||(LA8_0>='a' && LA8_0<='f')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// DataTemplate.g:
						{
						DebugLocation(111, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }


				}
				break;

			}
		}
		finally
		{
			TraceOut("HEX_NUMBER", 36);
			LeaveRule("HEX_NUMBER", 36);
			LeaveRule_HEX_NUMBER();
		}
	}
	// $ANTLR end "HEX_NUMBER"

	partial void EnterRule_BIN_NUMBER();
	partial void LeaveRule_BIN_NUMBER();

	// $ANTLR start "BIN_NUMBER"
	[GrammarRule("BIN_NUMBER")]
	private void mBIN_NUMBER()
	{
		EnterRule_BIN_NUMBER();
		EnterRule("BIN_NUMBER", 37);
		TraceIn("BIN_NUMBER", 37);
		try
		{
			// DataTemplate.g:113:13: ( '%' ( BIN_DIGIT )+ | '0' 'b' ( BIN_DIGIT )+ )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0=='%'))
			{
				alt12 = 1;
			}
			else if ((LA12_0=='0'))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// DataTemplate.g:113:15: '%' ( BIN_DIGIT )+
				{
				DebugLocation(113, 15);
				Match('%'); 
				DebugLocation(113, 18);
				// DataTemplate.g:113:18: ( BIN_DIGIT )+
				int cnt10=0;
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if (((LA10_0>='0' && LA10_0<='1')))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// DataTemplate.g:
						{
						DebugLocation(113, 18);
						input.Consume();


						}
						break;

					default:
						if (cnt10 >= 1)
							goto loop10;

						EarlyExitException eee10 = new EarlyExitException( 10, input );
						DebugRecognitionException(eee10);
						throw eee10;
					}
					cnt10++;
				}
				loop10:
					;

				} finally { DebugExitSubRule(10); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// DataTemplate.g:114:7: '0' 'b' ( BIN_DIGIT )+
				{
				DebugLocation(114, 7);
				Match('0'); 
				DebugLocation(114, 10);
				Match('b'); 
				DebugLocation(114, 13);
				// DataTemplate.g:114:13: ( BIN_DIGIT )+
				int cnt11=0;
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if (((LA11_0>='0' && LA11_0<='1')))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// DataTemplate.g:
						{
						DebugLocation(114, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt11 >= 1)
							goto loop11;

						EarlyExitException eee11 = new EarlyExitException( 11, input );
						DebugRecognitionException(eee11);
						throw eee11;
					}
					cnt11++;
				}
				loop11:
					;

				} finally { DebugExitSubRule(11); }


				}
				break;

			}
		}
		finally
		{
			TraceOut("BIN_NUMBER", 37);
			LeaveRule("BIN_NUMBER", 37);
			LeaveRule_BIN_NUMBER();
		}
	}
	// $ANTLR end "BIN_NUMBER"

	partial void EnterRule_OCT_NUMBER();
	partial void LeaveRule_OCT_NUMBER();

	// $ANTLR start "OCT_NUMBER"
	[GrammarRule("OCT_NUMBER")]
	private void mOCT_NUMBER()
	{
		EnterRule_OCT_NUMBER();
		EnterRule("OCT_NUMBER", 38);
		TraceIn("OCT_NUMBER", 38);
		try
		{
			// DataTemplate.g:116:13: ( '&' ( OCT_DIGIT )+ | '0' 'o' ( OCT_DIGIT )+ )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0=='&'))
			{
				alt15 = 1;
			}
			else if ((LA15_0=='0'))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// DataTemplate.g:116:15: '&' ( OCT_DIGIT )+
				{
				DebugLocation(116, 15);
				Match('&'); 
				DebugLocation(116, 18);
				// DataTemplate.g:116:18: ( OCT_DIGIT )+
				int cnt13=0;
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if (((LA13_0>='0' && LA13_0<='7')))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch (alt13)
					{
					case 1:
						DebugEnterAlt(1);
						// DataTemplate.g:
						{
						DebugLocation(116, 18);
						input.Consume();


						}
						break;

					default:
						if (cnt13 >= 1)
							goto loop13;

						EarlyExitException eee13 = new EarlyExitException( 13, input );
						DebugRecognitionException(eee13);
						throw eee13;
					}
					cnt13++;
				}
				loop13:
					;

				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// DataTemplate.g:117:7: '0' 'o' ( OCT_DIGIT )+
				{
				DebugLocation(117, 7);
				Match('0'); 
				DebugLocation(117, 10);
				Match('o'); 
				DebugLocation(117, 13);
				// DataTemplate.g:117:13: ( OCT_DIGIT )+
				int cnt14=0;
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if (((LA14_0>='0' && LA14_0<='7')))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// DataTemplate.g:
						{
						DebugLocation(117, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt14 >= 1)
							goto loop14;

						EarlyExitException eee14 = new EarlyExitException( 14, input );
						DebugRecognitionException(eee14);
						throw eee14;
					}
					cnt14++;
				}
				loop14:
					;

				} finally { DebugExitSubRule(14); }


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCT_NUMBER", 38);
			LeaveRule("OCT_NUMBER", 38);
			LeaveRule_OCT_NUMBER();
		}
	}
	// $ANTLR end "OCT_NUMBER"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 39);
		TraceIn("HEX_DIGIT", 39);
		try
		{
			// DataTemplate.g:119:13: ( ( '0' .. '9' | 'a' .. 'f' ) )
			DebugEnterAlt(1);
			// DataTemplate.g:
			{
			DebugLocation(119, 13);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 39);
			LeaveRule("HEX_DIGIT", 39);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_OCT_DIGIT();
	partial void LeaveRule_OCT_DIGIT();

	// $ANTLR start "OCT_DIGIT"
	[GrammarRule("OCT_DIGIT")]
	private void mOCT_DIGIT()
	{
		EnterRule_OCT_DIGIT();
		EnterRule("OCT_DIGIT", 40);
		TraceIn("OCT_DIGIT", 40);
		try
		{
			// DataTemplate.g:121:12: ( ( '0' .. '7' ) )
			DebugEnterAlt(1);
			// DataTemplate.g:
			{
			DebugLocation(121, 12);
			if ((input.LA(1)>='0' && input.LA(1)<='7'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("OCT_DIGIT", 40);
			LeaveRule("OCT_DIGIT", 40);
			LeaveRule_OCT_DIGIT();
		}
	}
	// $ANTLR end "OCT_DIGIT"

	partial void EnterRule_BIN_DIGIT();
	partial void LeaveRule_BIN_DIGIT();

	// $ANTLR start "BIN_DIGIT"
	[GrammarRule("BIN_DIGIT")]
	private void mBIN_DIGIT()
	{
		EnterRule_BIN_DIGIT();
		EnterRule("BIN_DIGIT", 41);
		TraceIn("BIN_DIGIT", 41);
		try
		{
			// DataTemplate.g:123:12: ( ( '0' .. '1' ) )
			DebugEnterAlt(1);
			// DataTemplate.g:
			{
			DebugLocation(123, 12);
			if ((input.LA(1)>='0' && input.LA(1)<='1'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("BIN_DIGIT", 41);
			LeaveRule("BIN_DIGIT", 41);
			LeaveRule_BIN_DIGIT();
		}
	}
	// $ANTLR end "BIN_DIGIT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 42);
		TraceIn("WS", 42);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// DataTemplate.g:124:7: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// DataTemplate.g:124:11: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(124, 11);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(124, 36);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 42);
			LeaveRule("WS", 42);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// DataTemplate.g:1:8: ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | NUMBER | COMMENT | WS )
		int alt16=35;
		try { DebugEnterDecision(16, false);
		switch (input.LA(1))
		{
		case '!':
			{
			int LA16_1 = input.LA(2);

			if ((LA16_1=='='))
			{
				alt16 = 2;
			}
			else
			{
				alt16 = 1;
			}
			}
			break;
		case '%':
			{
			int LA16_2 = input.LA(2);

			if (((LA16_2>='0' && LA16_2<='1')))
			{
				alt16 = 33;
			}
			else
			{
				alt16 = 3;
			}
			}
			break;
		case '&':
			{
			switch (input.LA(2))
			{
			case '&':
				{
				alt16 = 4;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
				{
				alt16 = 33;
				}
				break;
			default:
				alt16=5;
				break;

			}

			}
			break;
		case '(':
			{
			alt16 = 6;
			}
			break;
		case ')':
			{
			alt16 = 7;
			}
			break;
		case '*':
			{
			alt16 = 8;
			}
			break;
		case '+':
			{
			alt16 = 9;
			}
			break;
		case '-':
			{
			alt16 = 10;
			}
			break;
		case '/':
			{
			int LA16_9 = input.LA(2);

			if ((LA16_9=='*'||LA16_9=='/'))
			{
				alt16 = 34;
			}
			else
			{
				alt16 = 11;
			}
			}
			break;
		case ':':
			{
			alt16 = 12;
			}
			break;
		case ';':
			{
			alt16 = 13;
			}
			break;
		case '<':
			{
			switch (input.LA(2))
			{
			case '<':
				{
				alt16 = 15;
				}
				break;
			case '=':
				{
				alt16 = 16;
				}
				break;
			default:
				alt16=14;
				break;

			}

			}
			break;
		case '=':
			{
			alt16 = 17;
			}
			break;
		case '>':
			{
			switch (input.LA(2))
			{
			case '=':
				{
				alt16 = 19;
				}
				break;
			case '>':
				{
				alt16 = 20;
				}
				break;
			default:
				alt16=18;
				break;

			}

			}
			break;
		case '?':
			{
			alt16 = 21;
			}
			break;
		case '[':
			{
			alt16 = 22;
			}
			break;
		case ']':
			{
			alt16 = 23;
			}
			break;
		case '^':
			{
			alt16 = 24;
			}
			break;
		case 'b':
			{
			alt16 = 25;
			}
			break;
		case 'd':
			{
			alt16 = 26;
			}
			break;
		case 'q':
			{
			alt16 = 27;
			}
			break;
		case 's':
			{
			alt16 = 28;
			}
			break;
		case 'w':
			{
			alt16 = 29;
			}
			break;
		case '|':
			{
			int LA16_24 = input.LA(2);

			if ((LA16_24=='|'))
			{
				alt16 = 31;
			}
			else
			{
				alt16 = 30;
			}
			}
			break;
		case '~':
			{
			alt16 = 32;
			}
			break;
		case '$':
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt16 = 33;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt16 = 35;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(16); }
		switch (alt16)
		{
		case 1:
			DebugEnterAlt(1);
			// DataTemplate.g:1:10: T__21
			{
			DebugLocation(1, 10);
			mT__21(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// DataTemplate.g:1:16: T__22
			{
			DebugLocation(1, 16);
			mT__22(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// DataTemplate.g:1:22: T__23
			{
			DebugLocation(1, 22);
			mT__23(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// DataTemplate.g:1:28: T__24
			{
			DebugLocation(1, 28);
			mT__24(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// DataTemplate.g:1:34: T__25
			{
			DebugLocation(1, 34);
			mT__25(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// DataTemplate.g:1:40: T__26
			{
			DebugLocation(1, 40);
			mT__26(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// DataTemplate.g:1:46: T__27
			{
			DebugLocation(1, 46);
			mT__27(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// DataTemplate.g:1:52: T__28
			{
			DebugLocation(1, 52);
			mT__28(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// DataTemplate.g:1:58: T__29
			{
			DebugLocation(1, 58);
			mT__29(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// DataTemplate.g:1:64: T__30
			{
			DebugLocation(1, 64);
			mT__30(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// DataTemplate.g:1:70: T__31
			{
			DebugLocation(1, 70);
			mT__31(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// DataTemplate.g:1:76: T__32
			{
			DebugLocation(1, 76);
			mT__32(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// DataTemplate.g:1:82: T__33
			{
			DebugLocation(1, 82);
			mT__33(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// DataTemplate.g:1:88: T__34
			{
			DebugLocation(1, 88);
			mT__34(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// DataTemplate.g:1:94: T__35
			{
			DebugLocation(1, 94);
			mT__35(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// DataTemplate.g:1:100: T__36
			{
			DebugLocation(1, 100);
			mT__36(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// DataTemplate.g:1:106: T__37
			{
			DebugLocation(1, 106);
			mT__37(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// DataTemplate.g:1:112: T__38
			{
			DebugLocation(1, 112);
			mT__38(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// DataTemplate.g:1:118: T__39
			{
			DebugLocation(1, 118);
			mT__39(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// DataTemplate.g:1:124: T__40
			{
			DebugLocation(1, 124);
			mT__40(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// DataTemplate.g:1:130: T__41
			{
			DebugLocation(1, 130);
			mT__41(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// DataTemplate.g:1:136: T__42
			{
			DebugLocation(1, 136);
			mT__42(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// DataTemplate.g:1:142: T__43
			{
			DebugLocation(1, 142);
			mT__43(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// DataTemplate.g:1:148: T__44
			{
			DebugLocation(1, 148);
			mT__44(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// DataTemplate.g:1:154: T__45
			{
			DebugLocation(1, 154);
			mT__45(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// DataTemplate.g:1:160: T__46
			{
			DebugLocation(1, 160);
			mT__46(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// DataTemplate.g:1:166: T__47
			{
			DebugLocation(1, 166);
			mT__47(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// DataTemplate.g:1:172: T__48
			{
			DebugLocation(1, 172);
			mT__48(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// DataTemplate.g:1:178: T__49
			{
			DebugLocation(1, 178);
			mT__49(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// DataTemplate.g:1:184: T__50
			{
			DebugLocation(1, 184);
			mT__50(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// DataTemplate.g:1:190: T__51
			{
			DebugLocation(1, 190);
			mT__51(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// DataTemplate.g:1:196: T__52
			{
			DebugLocation(1, 196);
			mT__52(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// DataTemplate.g:1:202: NUMBER
			{
			DebugLocation(1, 202);
			mNUMBER(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// DataTemplate.g:1:209: COMMENT
			{
			DebugLocation(1, 209);
			mCOMMENT(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// DataTemplate.g:1:217: WS
			{
			DebugLocation(1, 217);
			mWS(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}

} // namespace GBRead.Base
