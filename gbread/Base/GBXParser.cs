//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 GBX.g 2012-10-26 13:14:33

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219

// Unreachable code detected.
#pragma warning disable 162

// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591

// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

#pragma warning disable 3021

namespace GBRead.Base
{
    using System.Collections.Generic;
    using Antlr.Runtime;
    using Antlr.Runtime.Tree;
    using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
    [System.CLSCompliant(false)]
    public partial class GBXParser : Antlr.Runtime.Parser
    {
        internal static readonly string[] tokenNames = new string[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMP_MARK", "ASSIGNMENT", "BANG_MARK", "BANK", "BAR_MARK", "BIN_DIGIT", "BIN_NUMBER", "BOOL_AND_MARK", "BOOL_OR_MARK", "BSLASH_MARK", "CARET_MARK", "CC_NC", "CC_NZ", "CC_Z", "CHAR", "CODE", "COLON_MARK", "COMMA", "COMMENT", "DATA", "DB", "DD", "DQ", "DW", "EQU", "EQUAL_MARK", "EQUIV_MARK", "ESC_SEQ", "EXPORT", "EXPRESSION", "FSLASH_MARK", "GLOBAL", "GLOBAL_LABEL", "GTE_MARK", "GT_MARK", "HEX_DIGIT", "HEX_NUMBER", "HOME", "ID", "IMPORT", "INCBIN", "INCLUDE", "INST_ADC", "INST_ADD", "INST_AND", "INST_BIT", "INST_CALL", "INST_CCF", "INST_CP", "INST_CPL", "INST_DAA", "INST_DEC", "INST_DI", "INST_EI", "INST_HALT", "INST_INC", "INST_JP", "INST_JR", "INST_LD", "INST_LDD", "INST_LDHL", "INST_LDI", "INST_LDIO", "INST_NOP", "INST_OR", "INST_POP", "INST_PUSH", "INST_RES", "INST_RET", "INST_RETI", "INST_RL", "INST_RLA", "INST_RLC", "INST_RLCA", "INST_RR", "INST_RRA", "INST_RRC", "INST_RRCA", "INST_RST", "INST_SBC", "INST_SCF", "INST_SET", "INST_SLA", "INST_SRA", "INST_SRL", "INST_STOP", "INST_SUB", "INST_SWAP", "INST_XOR", "INT", "LABEL", "LEFT_BRACKET", "LEFT_PARENS", "LOCAL_LABEL", "LSHIFT_MARK", "LTE_MARK", "LT_MARK", "MEM_REF", "MINUS_MARK", "NOT_EQUIV_MARK", "NUMBER", "OCTAL_ESC", "OCT_DIGIT", "OCT_NUMBER", "ORG", "PERCENT_MARK", "PLUS_MARK", "POUND_MARK", "QUEST_MARK", "REG_A", "REG_B", "REG_C", "REG_D", "REG_E", "REG_H", "REG_L", "RIGHT_BRACKET", "RIGHT_PARENS", "ROOT", "RR_AF", "RR_BC", "RR_DE", "RR_HL", "RR_REF_BC", "RR_REF_C", "RR_REF_DE", "RR_REF_HL", "RR_SP", "RSHIFT_MARK", "SECTION", "SEMI_MARK", "STAR_MARK", "STATEMENT", "STRING", "TILDE_MARK", "TIMES", "UNARY_OP", "UNDERSCORE_MARK", "UNICODE_ESC", "VAR", "WS", "XDEF", "XREF", "'.'"
        };
        public const int EOF = -1;
        public const int T__147 = 147;
        public const int AMP_MARK = 4;
        public const int ASSIGNMENT = 5;
        public const int BANG_MARK = 6;
        public const int BANK = 7;
        public const int BAR_MARK = 8;
        public const int BIN_DIGIT = 9;
        public const int BIN_NUMBER = 10;
        public const int BOOL_AND_MARK = 11;
        public const int BOOL_OR_MARK = 12;
        public const int BSLASH_MARK = 13;
        public const int CARET_MARK = 14;
        public const int CC_NC = 15;
        public const int CC_NZ = 16;
        public const int CC_Z = 17;
        public const int CHAR = 18;
        public const int CODE = 19;
        public const int COLON_MARK = 20;
        public const int COMMA = 21;
        public const int COMMENT = 22;
        public const int DATA = 23;
        public const int DB = 24;
        public const int DD = 25;
        public const int DQ = 26;
        public const int DW = 27;
        public const int EQU = 28;
        public const int EQUAL_MARK = 29;
        public const int EQUIV_MARK = 30;
        public const int ESC_SEQ = 31;
        public const int EXPORT = 32;
        public const int EXPRESSION = 33;
        public const int FSLASH_MARK = 34;
        public const int GLOBAL = 35;
        public const int GLOBAL_LABEL = 36;
        public const int GTE_MARK = 37;
        public const int GT_MARK = 38;
        public const int HEX_DIGIT = 39;
        public const int HEX_NUMBER = 40;
        public const int HOME = 41;
        public const int ID = 42;
        public const int IMPORT = 43;
        public const int INCBIN = 44;
        public const int INCLUDE = 45;
        public const int INST_ADC = 46;
        public const int INST_ADD = 47;
        public const int INST_AND = 48;
        public const int INST_BIT = 49;
        public const int INST_CALL = 50;
        public const int INST_CCF = 51;
        public const int INST_CP = 52;
        public const int INST_CPL = 53;
        public const int INST_DAA = 54;
        public const int INST_DEC = 55;
        public const int INST_DI = 56;
        public const int INST_EI = 57;
        public const int INST_HALT = 58;
        public const int INST_INC = 59;
        public const int INST_JP = 60;
        public const int INST_JR = 61;
        public const int INST_LD = 62;
        public const int INST_LDD = 63;
        public const int INST_LDHL = 64;
        public const int INST_LDI = 65;
        public const int INST_LDIO = 66;
        public const int INST_NOP = 67;
        public const int INST_OR = 68;
        public const int INST_POP = 69;
        public const int INST_PUSH = 70;
        public const int INST_RES = 71;
        public const int INST_RET = 72;
        public const int INST_RETI = 73;
        public const int INST_RL = 74;
        public const int INST_RLA = 75;
        public const int INST_RLC = 76;
        public const int INST_RLCA = 77;
        public const int INST_RR = 78;
        public const int INST_RRA = 79;
        public const int INST_RRC = 80;
        public const int INST_RRCA = 81;
        public const int INST_RST = 82;
        public const int INST_SBC = 83;
        public const int INST_SCF = 84;
        public const int INST_SET = 85;
        public const int INST_SLA = 86;
        public const int INST_SRA = 87;
        public const int INST_SRL = 88;
        public const int INST_STOP = 89;
        public const int INST_SUB = 90;
        public const int INST_SWAP = 91;
        public const int INST_XOR = 92;
        public const int INT = 93;
        public const int LABEL = 94;
        public const int LEFT_BRACKET = 95;
        public const int LEFT_PARENS = 96;
        public const int LOCAL_LABEL = 97;
        public const int LSHIFT_MARK = 98;
        public const int LTE_MARK = 99;
        public const int LT_MARK = 100;
        public const int MEM_REF = 101;
        public const int MINUS_MARK = 102;
        public const int NOT_EQUIV_MARK = 103;
        public const int NUMBER = 104;
        public const int OCTAL_ESC = 105;
        public const int OCT_DIGIT = 106;
        public const int OCT_NUMBER = 107;
        public const int ORG = 108;
        public const int PERCENT_MARK = 109;
        public const int PLUS_MARK = 110;
        public const int POUND_MARK = 111;
        public const int QUEST_MARK = 112;
        public const int REG_A = 113;
        public const int REG_B = 114;
        public const int REG_C = 115;
        public const int REG_D = 116;
        public const int REG_E = 117;
        public const int REG_H = 118;
        public const int REG_L = 119;
        public const int RIGHT_BRACKET = 120;
        public const int RIGHT_PARENS = 121;
        public const int ROOT = 122;
        public const int RR_AF = 123;
        public const int RR_BC = 124;
        public const int RR_DE = 125;
        public const int RR_HL = 126;
        public const int RR_REF_BC = 127;
        public const int RR_REF_C = 128;
        public const int RR_REF_DE = 129;
        public const int RR_REF_HL = 130;
        public const int RR_SP = 131;
        public const int RSHIFT_MARK = 132;
        public const int SECTION = 133;
        public const int SEMI_MARK = 134;
        public const int STAR_MARK = 135;
        public const int STATEMENT = 136;
        public const int STRING = 137;
        public const int TILDE_MARK = 138;
        public const int TIMES = 139;
        public const int UNARY_OP = 140;
        public const int UNDERSCORE_MARK = 141;
        public const int UNICODE_ESC = 142;
        public const int VAR = 143;
        public const int WS = 144;
        public const int XDEF = 145;
        public const int XREF = 146;

        public GBXParser(ITokenStream input)
            : this(input, new RecognizerSharedState())
        {
        }
        public GBXParser(ITokenStream input, RecognizerSharedState state)
            : base(input, state)
        {
            ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
            CreateTreeAdaptor(ref treeAdaptor);
            TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
            OnCreated();
        }
        // Implement this function in your helper file to use a custom tree adaptor
        partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

        private ITreeAdaptor adaptor;

        public ITreeAdaptor TreeAdaptor
        {
            get
            {
                return adaptor;
            }

            set
            {
                this.adaptor = value;
            }
        }

        public override string[] TokenNames { get { return GBXParser.tokenNames; } }
        public override string GrammarFileName { get { return "GBX.g"; } }


        private List<ErrInfo> Errors = new List<ErrInfo>();

        public override void DisplayRecognitionError(string[] tokenNames, RecognitionException e)
        {
            string errHeader = GetErrorHeader(e);
            string errMSG = GetErrorMessage(e, tokenNames);
            Errors.Add(new ErrInfo() { errText = errMSG, error = e });
        }

        public List<ErrInfo> GetErrors()
        {
            return Errors;
        }


        partial void OnCreated();
        partial void EnterRule(string ruleName, int ruleIndex);
        partial void LeaveRule(string ruleName, int ruleIndex);

        #region Rules
        partial void EnterRule_program();
        partial void LeaveRule_program();

        // $ANTLR start "program"
        // GBX.g:68:8: public program : ( assignment )* ( statement )* -> ^( ROOT ( assignment )* ( statement )* ) ;
        [GrammarRule("program")]
        public AstParserRuleReturnScope<CommonTree, IToken> program()
        {
            EnterRule_program();
            EnterRule("program", 1);
            TraceIn("program", 1);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, IToken> assignment1 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> statement2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor, "rule statement");
            RewriteRuleSubtreeStream stream_assignment = new RewriteRuleSubtreeStream(adaptor, "rule assignment");
            try
            {
                DebugEnterRule(GrammarFileName, "program");
                DebugLocation(68, 73);
                try
                {
                    // GBX.g:68:16: ( ( assignment )* ( statement )* -> ^( ROOT ( assignment )* ( statement )* ) )
                    DebugEnterAlt(1);
                    // GBX.g:68:18: ( assignment )* ( statement )*
                    {
                        DebugLocation(68, 18);
                        // GBX.g:68:18: ( assignment )*
                        try
                        {
                            DebugEnterSubRule(1);
                            while (true)
                            {
                                int alt1 = 2;
                                try
                                {
                                    DebugEnterDecision(1, false);
                                    int LA1_0 = input.LA(1);

                                    if ((LA1_0 == ID))
                                    {
                                        int LA1_1 = input.LA(2);

                                        if (((LA1_1 >= EQU && LA1_1 <= EQUAL_MARK)))
                                        {
                                            alt1 = 1;
                                        }


                                    }


                                }
                                finally { DebugExitDecision(1); }
                                switch (alt1)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // GBX.g:68:18: assignment
                                        {
                                            DebugLocation(68, 18);
                                            PushFollow(Follow._assignment_in_program143);
                                            assignment1 = assignment();
                                            PopFollow();

                                            stream_assignment.Add(assignment1.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop1;
                                }
                            }

                        loop1:
                            ;

                        }
                        finally { DebugExitSubRule(1); }

                        DebugLocation(68, 30);
                        // GBX.g:68:30: ( statement )*
                        try
                        {
                            DebugEnterSubRule(2);
                            while (true)
                            {
                                int alt2 = 2;
                                try
                                {
                                    DebugEnterDecision(2, false);
                                    int LA2_0 = input.LA(1);

                                    if (((LA2_0 >= DB && LA2_0 <= DW) || LA2_0 == ID || (LA2_0 >= INST_ADC && LA2_0 <= INST_XOR) || LA2_0 == 147))
                                    {
                                        alt2 = 1;
                                    }


                                }
                                finally { DebugExitDecision(2); }
                                switch (alt2)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // GBX.g:68:30: statement
                                        {
                                            DebugLocation(68, 30);
                                            PushFollow(Follow._statement_in_program146);
                                            statement2 = statement();
                                            PopFollow();

                                            stream_statement.Add(statement2.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop2;
                                }
                            }

                        loop2:
                            ;

                        }
                        finally { DebugExitSubRule(2); }



                        {
                            // AST REWRITE
                            // elements: statement, assignment
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 68:41: -> ^( ROOT ( assignment )* ( statement )* )
                            {
                                DebugLocation(68, 44);
                                // GBX.g:68:44: ^( ROOT ( assignment )* ( statement )* )
                                {
                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                    DebugLocation(68, 46);
                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ROOT, "ROOT"), root_1);

                                    DebugLocation(68, 51);
                                    // GBX.g:68:51: ( assignment )*
                                    while (stream_assignment.HasNext)
                                    {
                                        DebugLocation(68, 51);
                                        adaptor.AddChild(root_1, stream_assignment.NextTree());

                                    }
                                    stream_assignment.Reset();
                                    DebugLocation(68, 63);
                                    // GBX.g:68:63: ( statement )*
                                    while (stream_statement.HasNext)
                                    {
                                        DebugLocation(68, 63);
                                        adaptor.AddChild(root_1, stream_statement.NextTree());

                                    }
                                    stream_statement.Reset();

                                    adaptor.AddChild(root_0, root_1);
                                }

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("program", 1);
                    LeaveRule("program", 1);
                    LeaveRule_program();
                }
                DebugLocation(68, 73);
            }
            finally { DebugExitRule(GrammarFileName, "program"); }
            return retval;

        }
        // $ANTLR end "program"

        partial void EnterRule_assignment();
        partial void LeaveRule_assignment();

        // $ANTLR start "assignment"
        // GBX.g:70:1: assignment : ID ( EQUAL_MARK | EQU ) expression -> ^( ASSIGNMENT ID expression ) ;
        [GrammarRule("assignment")]
        private AstParserRuleReturnScope<CommonTree, IToken> assignment()
        {
            EnterRule_assignment();
            EnterRule("assignment", 2);
            TraceIn("assignment", 2);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken ID3 = default(IToken);
            IToken EQUAL_MARK4 = default(IToken);
            IToken EQU5 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression6 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree ID3_tree = default(CommonTree);
            CommonTree EQUAL_MARK4_tree = default(CommonTree);
            CommonTree EQU5_tree = default(CommonTree);
            RewriteRuleITokenStream stream_EQU = new RewriteRuleITokenStream(adaptor, "token EQU");
            RewriteRuleITokenStream stream_ID = new RewriteRuleITokenStream(adaptor, "token ID");
            RewriteRuleITokenStream stream_EQUAL_MARK = new RewriteRuleITokenStream(adaptor, "token EQUAL_MARK");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
            try
            {
                DebugEnterRule(GrammarFileName, "assignment");
                DebugLocation(70, 75);
                try
                {
                    // GBX.g:70:13: ( ID ( EQUAL_MARK | EQU ) expression -> ^( ASSIGNMENT ID expression ) )
                    DebugEnterAlt(1);
                    // GBX.g:70:15: ID ( EQUAL_MARK | EQU ) expression
                    {
                        DebugLocation(70, 15);
                        ID3 = (IToken)Match(input, ID, Follow._ID_in_assignment168);
                        stream_ID.Add(ID3);

                        DebugLocation(70, 18);
                        // GBX.g:70:18: ( EQUAL_MARK | EQU )
                        int alt3 = 2;
                        try
                        {
                            DebugEnterSubRule(3);
                            try
                            {
                                DebugEnterDecision(3, false);
                                int LA3_0 = input.LA(1);

                                if ((LA3_0 == EQUAL_MARK))
                                {
                                    alt3 = 1;
                                }
                                else if ((LA3_0 == EQU))
                                {
                                    alt3 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(3); }
                            switch (alt3)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:70:19: EQUAL_MARK
                                    {
                                        DebugLocation(70, 19);
                                        EQUAL_MARK4 = (IToken)Match(input, EQUAL_MARK, Follow._EQUAL_MARK_in_assignment171);
                                        stream_EQUAL_MARK.Add(EQUAL_MARK4);


                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:70:30: EQU
                                    {
                                        DebugLocation(70, 30);
                                        EQU5 = (IToken)Match(input, EQU, Follow._EQU_in_assignment173);
                                        stream_EQU.Add(EQU5);


                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(3); }

                        DebugLocation(70, 35);
                        PushFollow(Follow._expression_in_assignment176);
                        expression6 = expression();
                        PopFollow();

                        stream_expression.Add(expression6.Tree);


                        {
                            // AST REWRITE
                            // elements: expression, ID
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 70:46: -> ^( ASSIGNMENT ID expression )
                            {
                                DebugLocation(70, 49);
                                // GBX.g:70:49: ^( ASSIGNMENT ID expression )
                                {
                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                    DebugLocation(70, 51);
                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ASSIGNMENT, "ASSIGNMENT"), root_1);

                                    DebugLocation(70, 62);
                                    adaptor.AddChild(root_1, stream_ID.NextNode());
                                    DebugLocation(70, 65);
                                    adaptor.AddChild(root_1, stream_expression.NextTree());

                                    adaptor.AddChild(root_0, root_1);
                                }

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("assignment", 2);
                    LeaveRule("assignment", 2);
                    LeaveRule_assignment();
                }
                DebugLocation(70, 75);
            }
            finally { DebugExitRule(GrammarFileName, "assignment"); }
            return retval;

        }
        // $ANTLR end "assignment"

        partial void EnterRule_statement();
        partial void LeaveRule_statement();

        // $ANTLR start "statement"
        // GBX.g:72:1: statement : ( label )* ( instruction | data_def ) -> ^( STATEMENT ( label )* ( instruction )? ( data_def )? ) ;
        [GrammarRule("statement")]
        private AstParserRuleReturnScope<CommonTree, IToken> statement()
        {
            EnterRule_statement();
            EnterRule("statement", 3);
            TraceIn("statement", 3);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, IToken> label7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> instruction8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> data_def9 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            RewriteRuleSubtreeStream stream_data_def = new RewriteRuleSubtreeStream(adaptor, "rule data_def");
            RewriteRuleSubtreeStream stream_label = new RewriteRuleSubtreeStream(adaptor, "rule label");
            RewriteRuleSubtreeStream stream_instruction = new RewriteRuleSubtreeStream(adaptor, "rule instruction");
            try
            {
                DebugEnterRule(GrammarFileName, "statement");
                DebugLocation(72, 88);
                try
                {
                    // GBX.g:72:12: ( ( label )* ( instruction | data_def ) -> ^( STATEMENT ( label )* ( instruction )? ( data_def )? ) )
                    DebugEnterAlt(1);
                    // GBX.g:72:14: ( label )* ( instruction | data_def )
                    {
                        DebugLocation(72, 14);
                        // GBX.g:72:14: ( label )*
                        try
                        {
                            DebugEnterSubRule(4);
                            while (true)
                            {
                                int alt4 = 2;
                                try
                                {
                                    DebugEnterDecision(4, false);
                                    int LA4_0 = input.LA(1);

                                    if ((LA4_0 == ID || LA4_0 == 147))
                                    {
                                        alt4 = 1;
                                    }


                                }
                                finally { DebugExitDecision(4); }
                                switch (alt4)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // GBX.g:72:14: label
                                        {
                                            DebugLocation(72, 14);
                                            PushFollow(Follow._label_in_statement195);
                                            label7 = label();
                                            PopFollow();

                                            stream_label.Add(label7.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop4;
                                }
                            }

                        loop4:
                            ;

                        }
                        finally { DebugExitSubRule(4); }

                        DebugLocation(72, 21);
                        // GBX.g:72:21: ( instruction | data_def )
                        int alt5 = 2;
                        try
                        {
                            DebugEnterSubRule(5);
                            try
                            {
                                DebugEnterDecision(5, false);
                                int LA5_0 = input.LA(1);

                                if (((LA5_0 >= INST_ADC && LA5_0 <= INST_XOR)))
                                {
                                    alt5 = 1;
                                }
                                else if (((LA5_0 >= DB && LA5_0 <= DW)))
                                {
                                    alt5 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(5); }
                            switch (alt5)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:72:22: instruction
                                    {
                                        DebugLocation(72, 22);
                                        PushFollow(Follow._instruction_in_statement199);
                                        instruction8 = instruction();
                                        PopFollow();

                                        stream_instruction.Add(instruction8.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:72:34: data_def
                                    {
                                        DebugLocation(72, 34);
                                        PushFollow(Follow._data_def_in_statement201);
                                        data_def9 = data_def();
                                        PopFollow();

                                        stream_data_def.Add(data_def9.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(5); }



                        {
                            // AST REWRITE
                            // elements: instruction, label, data_def
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 72:44: -> ^( STATEMENT ( label )* ( instruction )? ( data_def )? )
                            {
                                DebugLocation(72, 47);
                                // GBX.g:72:47: ^( STATEMENT ( label )* ( instruction )? ( data_def )? )
                                {
                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                    DebugLocation(72, 49);
                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(STATEMENT, "STATEMENT"), root_1);

                                    DebugLocation(72, 59);
                                    // GBX.g:72:59: ( label )*
                                    while (stream_label.HasNext)
                                    {
                                        DebugLocation(72, 59);
                                        adaptor.AddChild(root_1, stream_label.NextTree());

                                    }
                                    stream_label.Reset();
                                    DebugLocation(72, 66);
                                    // GBX.g:72:66: ( instruction )?
                                    if (stream_instruction.HasNext)
                                    {
                                        DebugLocation(72, 66);
                                        adaptor.AddChild(root_1, stream_instruction.NextTree());

                                    }
                                    stream_instruction.Reset();
                                    DebugLocation(72, 79);
                                    // GBX.g:72:79: ( data_def )?
                                    if (stream_data_def.HasNext)
                                    {
                                        DebugLocation(72, 79);
                                        adaptor.AddChild(root_1, stream_data_def.NextTree());

                                    }
                                    stream_data_def.Reset();

                                    adaptor.AddChild(root_0, root_1);
                                }

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("statement", 3);
                    LeaveRule("statement", 3);
                    LeaveRule_statement();
                }
                DebugLocation(72, 88);
            }
            finally { DebugExitRule(GrammarFileName, "statement"); }
            return retval;

        }
        // $ANTLR end "statement"

        partial void EnterRule_label();
        partial void LeaveRule_label();

        // $ANTLR start "label"
        // GBX.g:74:1: label : ( global_label | local_label );
        [GrammarRule("label")]
        private AstParserRuleReturnScope<CommonTree, IToken> label()
        {
            EnterRule_label();
            EnterRule("label", 4);
            TraceIn("label", 4);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, IToken> global_label10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> local_label11 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            try
            {
                DebugEnterRule(GrammarFileName, "label");
                DebugLocation(74, 17);
                try
                {
                    // GBX.g:74:9: ( global_label | local_label )
                    int alt6 = 2;
                    try
                    {
                        DebugEnterDecision(6, false);
                        int LA6_0 = input.LA(1);

                        if ((LA6_0 == ID))
                        {
                            alt6 = 1;
                        }
                        else if ((LA6_0 == 147))
                        {
                            alt6 = 2;
                        }
                        else
                        {
                            NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
                            DebugRecognitionException(nvae);
                            throw nvae;
                        }
                    }
                    finally { DebugExitDecision(6); }
                    switch (alt6)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // GBX.g:74:11: global_label
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(74, 11);
                                PushFollow(Follow._global_label_in_label227);
                                global_label10 = global_label();
                                PopFollow();

                                adaptor.AddChild(root_0, global_label10.Tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // GBX.g:75:7: local_label
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(75, 7);
                                PushFollow(Follow._local_label_in_label235);
                                local_label11 = local_label();
                                PopFollow();

                                adaptor.AddChild(root_0, local_label11.Tree);

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("label", 4);
                    LeaveRule("label", 4);
                    LeaveRule_label();
                }
                DebugLocation(75, 17);
            }
            finally { DebugExitRule(GrammarFileName, "label"); }
            return retval;

        }
        // $ANTLR end "label"

        partial void EnterRule_global_label();
        partial void LeaveRule_global_label();

        // $ANTLR start "global_label"
        // GBX.g:77:1: global_label : ID ':' -> ^( GLOBAL_LABEL ID ) ;
        [GrammarRule("global_label")]
        private AstParserRuleReturnScope<CommonTree, IToken> global_label()
        {
            EnterRule_global_label();
            EnterRule("global_label", 5);
            TraceIn("global_label", 5);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken ID12 = default(IToken);
            IToken char_literal13 = default(IToken);

            CommonTree ID12_tree = default(CommonTree);
            CommonTree char_literal13_tree = default(CommonTree);
            RewriteRuleITokenStream stream_ID = new RewriteRuleITokenStream(adaptor, "token ID");
            RewriteRuleITokenStream stream_COLON_MARK = new RewriteRuleITokenStream(adaptor, "token COLON_MARK");
            try
            {
                DebugEnterRule(GrammarFileName, "global_label");
                DebugLocation(77, 43);
                try
                {
                    // GBX.g:77:14: ( ID ':' -> ^( GLOBAL_LABEL ID ) )
                    DebugEnterAlt(1);
                    // GBX.g:77:16: ID ':'
                    {
                        DebugLocation(77, 16);
                        ID12 = (IToken)Match(input, ID, Follow._ID_in_global_label243);
                        stream_ID.Add(ID12);

                        DebugLocation(77, 19);
                        char_literal13 = (IToken)Match(input, COLON_MARK, Follow._COLON_MARK_in_global_label245);
                        stream_COLON_MARK.Add(char_literal13);



                        {
                            // AST REWRITE
                            // elements: ID
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 77:23: -> ^( GLOBAL_LABEL ID )
                            {
                                DebugLocation(77, 26);
                                // GBX.g:77:26: ^( GLOBAL_LABEL ID )
                                {
                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                    DebugLocation(77, 28);
                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(GLOBAL_LABEL, "GLOBAL_LABEL"), root_1);

                                    DebugLocation(77, 41);
                                    adaptor.AddChild(root_1, stream_ID.NextNode());

                                    adaptor.AddChild(root_0, root_1);
                                }

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("global_label", 5);
                    LeaveRule("global_label", 5);
                    LeaveRule_global_label();
                }
                DebugLocation(77, 43);
            }
            finally { DebugExitRule(GrammarFileName, "global_label"); }
            return retval;

        }
        // $ANTLR end "global_label"

        partial void EnterRule_local_label();
        partial void LeaveRule_local_label();

        // $ANTLR start "local_label"
        // GBX.g:78:1: local_label : '.' ID -> ^( LOCAL_LABEL ID ) ;
        [GrammarRule("local_label")]
        private AstParserRuleReturnScope<CommonTree, IToken> local_label()
        {
            EnterRule_local_label();
            EnterRule("local_label", 6);
            TraceIn("local_label", 6);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken char_literal14 = default(IToken);
            IToken ID15 = default(IToken);

            CommonTree char_literal14_tree = default(CommonTree);
            CommonTree ID15_tree = default(CommonTree);
            RewriteRuleITokenStream stream_147 = new RewriteRuleITokenStream(adaptor, "token 147");
            RewriteRuleITokenStream stream_ID = new RewriteRuleITokenStream(adaptor, "token ID");
            try
            {
                DebugEnterRule(GrammarFileName, "local_label");
                DebugLocation(78, 42);
                try
                {
                    // GBX.g:78:14: ( '.' ID -> ^( LOCAL_LABEL ID ) )
                    DebugEnterAlt(1);
                    // GBX.g:78:16: '.' ID
                    {
                        DebugLocation(78, 16);
                        char_literal14 = (IToken)Match(input, 147, Follow._147_in_local_label261);
                        stream_147.Add(char_literal14);

                        DebugLocation(78, 20);
                        ID15 = (IToken)Match(input, ID, Follow._ID_in_local_label263);
                        stream_ID.Add(ID15);



                        {
                            // AST REWRITE
                            // elements: ID
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 78:23: -> ^( LOCAL_LABEL ID )
                            {
                                DebugLocation(78, 26);
                                // GBX.g:78:26: ^( LOCAL_LABEL ID )
                                {
                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                    DebugLocation(78, 28);
                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(LOCAL_LABEL, "LOCAL_LABEL"), root_1);

                                    DebugLocation(78, 40);
                                    adaptor.AddChild(root_1, stream_ID.NextNode());

                                    adaptor.AddChild(root_0, root_1);
                                }

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("local_label", 6);
                    LeaveRule("local_label", 6);
                    LeaveRule_local_label();
                }
                DebugLocation(78, 42);
            }
            finally { DebugExitRule(GrammarFileName, "local_label"); }
            return retval;

        }
        // $ANTLR end "local_label"

        partial void EnterRule_data_def();
        partial void LeaveRule_data_def();

        // $ANTLR start "data_def"
        // GBX.g:80:1: data_def : ( DB | DW | DD | DQ ) ^ expression ( COMMA ! expression )* ;
        [GrammarRule("data_def")]
        private AstParserRuleReturnScope<CommonTree, IToken> data_def()
        {
            EnterRule_data_def();
            EnterRule("data_def", 7);
            TraceIn("data_def", 7);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set16 = default(IToken);
            IToken COMMA18 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> expression19 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree set16_tree = default(CommonTree);
            CommonTree COMMA18_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "data_def");
                DebugLocation(80, 57);
                try
                {
                    // GBX.g:80:11: ( ( DB | DW | DD | DQ ) ^ expression ( COMMA ! expression )* )
                    DebugEnterAlt(1);
                    // GBX.g:80:13: ( DB | DW | DD | DQ ) ^ expression ( COMMA ! expression )*
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(80, 26);

                        set16 = (IToken)input.LT(1);
                        set16 = (IToken)input.LT(1);
                        if ((input.LA(1) >= DB && input.LA(1) <= DW))
                        {
                            input.Consume();
                            root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set16), root_0);
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }

                        DebugLocation(80, 28);
                        PushFollow(Follow._expression_in_data_def291);
                        expression17 = expression();
                        PopFollow();

                        adaptor.AddChild(root_0, expression17.Tree);
                        DebugLocation(80, 38);
                        // GBX.g:80:38: ( COMMA ! expression )*
                        try
                        {
                            DebugEnterSubRule(7);
                            while (true)
                            {
                                int alt7 = 2;
                                try
                                {
                                    DebugEnterDecision(7, false);
                                    int LA7_0 = input.LA(1);

                                    if ((LA7_0 == COMMA))
                                    {
                                        alt7 = 1;
                                    }


                                }
                                finally { DebugExitDecision(7); }
                                switch (alt7)
                                {
                                    case 1:
                                        DebugEnterAlt(1);
                                        // GBX.g:80:39: COMMA ! expression
                                        {
                                            DebugLocation(80, 44);
                                            COMMA18 = (IToken)Match(input, COMMA, Follow._COMMA_in_data_def293);
                                            DebugLocation(80, 46);
                                            PushFollow(Follow._expression_in_data_def296);
                                            expression19 = expression();
                                            PopFollow();

                                            adaptor.AddChild(root_0, expression19.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop7;
                                }
                            }

                        loop7:
                            ;

                        }
                        finally { DebugExitSubRule(7); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("data_def", 7);
                    LeaveRule("data_def", 7);
                    LeaveRule_data_def();
                }
                DebugLocation(80, 57);
            }
            finally { DebugExitRule(GrammarFileName, "data_def"); }
            return retval;

        }
        // $ANTLR end "data_def"

        partial void EnterRule_instruction();
        partial void LeaveRule_instruction();

        // $ANTLR start "instruction"
        // GBX.g:82:1: instruction : ( op_adc | op_add | op_and | op_bit | op_call | op_ccf | op_cp | op_cpl | op_daa | op_dec | op_di | op_ei | op_halt | op_inc | op_jp | op_jr | op_ldhl | op_ldio | op_ldd | op_ldi | op_ld | op_nop | op_or | op_pop | op_push | op_res | op_ret | op_reti | op_rl | op_rla | op_rlc | op_rlca | op_rr | op_rra | op_rrc | op_rrca | op_rst | op_sbc | op_scf | op_set | op_sla | op_sra | op_srl | op_stop | op_sub | op_swap | op_xor );
        [GrammarRule("instruction")]
        private AstParserRuleReturnScope<CommonTree, IToken> instruction()
        {
            EnterRule_instruction();
            EnterRule("instruction", 8);
            TraceIn("instruction", 8);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, IToken> op_adc20 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_add21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_and22 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_bit23 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_call24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_ccf25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_cp26 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_cpl27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_daa28 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_dec29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_di30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_ei31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_halt32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_inc33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_jp34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_jr35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_ldhl36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_ldio37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_ldd38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_ldi39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_ld40 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_nop41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_or42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_pop43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_push44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_res45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_ret46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_reti47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rl48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rla49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rlc50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rlca51 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rr52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rra53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rrc54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rrca55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_rst56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_sbc57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_scf58 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_set59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_sla60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_sra61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_srl62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_stop63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_sub64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_swap65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> op_xor66 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            try
            {
                DebugEnterRule(GrammarFileName, "instruction");
                DebugLocation(82, 13);
                try
                {
                    // GBX.g:82:14: ( op_adc | op_add | op_and | op_bit | op_call | op_ccf | op_cp | op_cpl | op_daa | op_dec | op_di | op_ei | op_halt | op_inc | op_jp | op_jr | op_ldhl | op_ldio | op_ldd | op_ldi | op_ld | op_nop | op_or | op_pop | op_push | op_res | op_ret | op_reti | op_rl | op_rla | op_rlc | op_rlca | op_rr | op_rra | op_rrc | op_rrca | op_rst | op_sbc | op_scf | op_set | op_sla | op_sra | op_srl | op_stop | op_sub | op_swap | op_xor )
                    int alt8 = 47;
                    try
                    {
                        DebugEnterDecision(8, false);
                        switch (input.LA(1))
                        {
                            case INST_ADC:
                                {
                                    alt8 = 1;
                                }
                                break;
                            case INST_ADD:
                                {
                                    alt8 = 2;
                                }
                                break;
                            case INST_AND:
                                {
                                    alt8 = 3;
                                }
                                break;
                            case INST_BIT:
                                {
                                    alt8 = 4;
                                }
                                break;
                            case INST_CALL:
                                {
                                    alt8 = 5;
                                }
                                break;
                            case INST_CCF:
                                {
                                    alt8 = 6;
                                }
                                break;
                            case INST_CP:
                                {
                                    alt8 = 7;
                                }
                                break;
                            case INST_CPL:
                                {
                                    alt8 = 8;
                                }
                                break;
                            case INST_DAA:
                                {
                                    alt8 = 9;
                                }
                                break;
                            case INST_DEC:
                                {
                                    alt8 = 10;
                                }
                                break;
                            case INST_DI:
                                {
                                    alt8 = 11;
                                }
                                break;
                            case INST_EI:
                                {
                                    alt8 = 12;
                                }
                                break;
                            case INST_HALT:
                                {
                                    alt8 = 13;
                                }
                                break;
                            case INST_INC:
                                {
                                    alt8 = 14;
                                }
                                break;
                            case INST_JP:
                                {
                                    alt8 = 15;
                                }
                                break;
                            case INST_JR:
                                {
                                    alt8 = 16;
                                }
                                break;
                            case INST_LDHL:
                                {
                                    alt8 = 17;
                                }
                                break;
                            case INST_LDIO:
                                {
                                    alt8 = 18;
                                }
                                break;
                            case INST_LDD:
                                {
                                    alt8 = 19;
                                }
                                break;
                            case INST_LDI:
                                {
                                    alt8 = 20;
                                }
                                break;
                            case INST_LD:
                                {
                                    alt8 = 21;
                                }
                                break;
                            case INST_NOP:
                                {
                                    alt8 = 22;
                                }
                                break;
                            case INST_OR:
                                {
                                    alt8 = 23;
                                }
                                break;
                            case INST_POP:
                                {
                                    alt8 = 24;
                                }
                                break;
                            case INST_PUSH:
                                {
                                    alt8 = 25;
                                }
                                break;
                            case INST_RES:
                                {
                                    alt8 = 26;
                                }
                                break;
                            case INST_RET:
                                {
                                    alt8 = 27;
                                }
                                break;
                            case INST_RETI:
                                {
                                    alt8 = 28;
                                }
                                break;
                            case INST_RL:
                                {
                                    alt8 = 29;
                                }
                                break;
                            case INST_RLA:
                                {
                                    alt8 = 30;
                                }
                                break;
                            case INST_RLC:
                                {
                                    alt8 = 31;
                                }
                                break;
                            case INST_RLCA:
                                {
                                    alt8 = 32;
                                }
                                break;
                            case INST_RR:
                                {
                                    alt8 = 33;
                                }
                                break;
                            case INST_RRA:
                                {
                                    alt8 = 34;
                                }
                                break;
                            case INST_RRC:
                                {
                                    alt8 = 35;
                                }
                                break;
                            case INST_RRCA:
                                {
                                    alt8 = 36;
                                }
                                break;
                            case INST_RST:
                                {
                                    alt8 = 37;
                                }
                                break;
                            case INST_SBC:
                                {
                                    alt8 = 38;
                                }
                                break;
                            case INST_SCF:
                                {
                                    alt8 = 39;
                                }
                                break;
                            case INST_SET:
                                {
                                    alt8 = 40;
                                }
                                break;
                            case INST_SLA:
                                {
                                    alt8 = 41;
                                }
                                break;
                            case INST_SRA:
                                {
                                    alt8 = 42;
                                }
                                break;
                            case INST_SRL:
                                {
                                    alt8 = 43;
                                }
                                break;
                            case INST_STOP:
                                {
                                    alt8 = 44;
                                }
                                break;
                            case INST_SUB:
                                {
                                    alt8 = 45;
                                }
                                break;
                            case INST_SWAP:
                                {
                                    alt8 = 46;
                                }
                                break;
                            case INST_XOR:
                                {
                                    alt8 = 47;
                                }
                                break;
                            default:
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                        }

                    }
                    finally { DebugExitDecision(8); }
                    switch (alt8)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // GBX.g:82:16: op_adc
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(82, 16);
                                PushFollow(Follow._op_adc_in_instruction307);
                                op_adc20 = op_adc();
                                PopFollow();

                                adaptor.AddChild(root_0, op_adc20.Tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // GBX.g:83:7: op_add
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(83, 7);
                                PushFollow(Follow._op_add_in_instruction315);
                                op_add21 = op_add();
                                PopFollow();

                                adaptor.AddChild(root_0, op_add21.Tree);

                            }
                            break;
                        case 3:
                            DebugEnterAlt(3);
                            // GBX.g:84:7: op_and
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(84, 7);
                                PushFollow(Follow._op_and_in_instruction323);
                                op_and22 = op_and();
                                PopFollow();

                                adaptor.AddChild(root_0, op_and22.Tree);

                            }
                            break;
                        case 4:
                            DebugEnterAlt(4);
                            // GBX.g:85:7: op_bit
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(85, 7);
                                PushFollow(Follow._op_bit_in_instruction331);
                                op_bit23 = op_bit();
                                PopFollow();

                                adaptor.AddChild(root_0, op_bit23.Tree);

                            }
                            break;
                        case 5:
                            DebugEnterAlt(5);
                            // GBX.g:86:7: op_call
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(86, 7);
                                PushFollow(Follow._op_call_in_instruction339);
                                op_call24 = op_call();
                                PopFollow();

                                adaptor.AddChild(root_0, op_call24.Tree);

                            }
                            break;
                        case 6:
                            DebugEnterAlt(6);
                            // GBX.g:87:7: op_ccf
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(87, 7);
                                PushFollow(Follow._op_ccf_in_instruction347);
                                op_ccf25 = op_ccf();
                                PopFollow();

                                adaptor.AddChild(root_0, op_ccf25.Tree);

                            }
                            break;
                        case 7:
                            DebugEnterAlt(7);
                            // GBX.g:88:7: op_cp
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(88, 7);
                                PushFollow(Follow._op_cp_in_instruction355);
                                op_cp26 = op_cp();
                                PopFollow();

                                adaptor.AddChild(root_0, op_cp26.Tree);

                            }
                            break;
                        case 8:
                            DebugEnterAlt(8);
                            // GBX.g:89:7: op_cpl
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(89, 7);
                                PushFollow(Follow._op_cpl_in_instruction363);
                                op_cpl27 = op_cpl();
                                PopFollow();

                                adaptor.AddChild(root_0, op_cpl27.Tree);

                            }
                            break;
                        case 9:
                            DebugEnterAlt(9);
                            // GBX.g:90:7: op_daa
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(90, 7);
                                PushFollow(Follow._op_daa_in_instruction371);
                                op_daa28 = op_daa();
                                PopFollow();

                                adaptor.AddChild(root_0, op_daa28.Tree);

                            }
                            break;
                        case 10:
                            DebugEnterAlt(10);
                            // GBX.g:91:7: op_dec
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(91, 7);
                                PushFollow(Follow._op_dec_in_instruction379);
                                op_dec29 = op_dec();
                                PopFollow();

                                adaptor.AddChild(root_0, op_dec29.Tree);

                            }
                            break;
                        case 11:
                            DebugEnterAlt(11);
                            // GBX.g:92:7: op_di
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(92, 7);
                                PushFollow(Follow._op_di_in_instruction387);
                                op_di30 = op_di();
                                PopFollow();

                                adaptor.AddChild(root_0, op_di30.Tree);

                            }
                            break;
                        case 12:
                            DebugEnterAlt(12);
                            // GBX.g:93:7: op_ei
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(93, 7);
                                PushFollow(Follow._op_ei_in_instruction395);
                                op_ei31 = op_ei();
                                PopFollow();

                                adaptor.AddChild(root_0, op_ei31.Tree);

                            }
                            break;
                        case 13:
                            DebugEnterAlt(13);
                            // GBX.g:94:7: op_halt
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(94, 7);
                                PushFollow(Follow._op_halt_in_instruction403);
                                op_halt32 = op_halt();
                                PopFollow();

                                adaptor.AddChild(root_0, op_halt32.Tree);

                            }
                            break;
                        case 14:
                            DebugEnterAlt(14);
                            // GBX.g:95:7: op_inc
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(95, 7);
                                PushFollow(Follow._op_inc_in_instruction411);
                                op_inc33 = op_inc();
                                PopFollow();

                                adaptor.AddChild(root_0, op_inc33.Tree);

                            }
                            break;
                        case 15:
                            DebugEnterAlt(15);
                            // GBX.g:96:7: op_jp
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(96, 7);
                                PushFollow(Follow._op_jp_in_instruction419);
                                op_jp34 = op_jp();
                                PopFollow();

                                adaptor.AddChild(root_0, op_jp34.Tree);

                            }
                            break;
                        case 16:
                            DebugEnterAlt(16);
                            // GBX.g:97:7: op_jr
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(97, 7);
                                PushFollow(Follow._op_jr_in_instruction427);
                                op_jr35 = op_jr();
                                PopFollow();

                                adaptor.AddChild(root_0, op_jr35.Tree);

                            }
                            break;
                        case 17:
                            DebugEnterAlt(17);
                            // GBX.g:98:7: op_ldhl
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(98, 7);
                                PushFollow(Follow._op_ldhl_in_instruction435);
                                op_ldhl36 = op_ldhl();
                                PopFollow();

                                adaptor.AddChild(root_0, op_ldhl36.Tree);

                            }
                            break;
                        case 18:
                            DebugEnterAlt(18);
                            // GBX.g:99:7: op_ldio
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(99, 7);
                                PushFollow(Follow._op_ldio_in_instruction443);
                                op_ldio37 = op_ldio();
                                PopFollow();

                                adaptor.AddChild(root_0, op_ldio37.Tree);

                            }
                            break;
                        case 19:
                            DebugEnterAlt(19);
                            // GBX.g:100:7: op_ldd
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(100, 7);
                                PushFollow(Follow._op_ldd_in_instruction451);
                                op_ldd38 = op_ldd();
                                PopFollow();

                                adaptor.AddChild(root_0, op_ldd38.Tree);

                            }
                            break;
                        case 20:
                            DebugEnterAlt(20);
                            // GBX.g:101:7: op_ldi
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(101, 7);
                                PushFollow(Follow._op_ldi_in_instruction459);
                                op_ldi39 = op_ldi();
                                PopFollow();

                                adaptor.AddChild(root_0, op_ldi39.Tree);

                            }
                            break;
                        case 21:
                            DebugEnterAlt(21);
                            // GBX.g:102:7: op_ld
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(102, 7);
                                PushFollow(Follow._op_ld_in_instruction467);
                                op_ld40 = op_ld();
                                PopFollow();

                                adaptor.AddChild(root_0, op_ld40.Tree);

                            }
                            break;
                        case 22:
                            DebugEnterAlt(22);
                            // GBX.g:103:7: op_nop
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(103, 7);
                                PushFollow(Follow._op_nop_in_instruction475);
                                op_nop41 = op_nop();
                                PopFollow();

                                adaptor.AddChild(root_0, op_nop41.Tree);

                            }
                            break;
                        case 23:
                            DebugEnterAlt(23);
                            // GBX.g:104:7: op_or
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(104, 7);
                                PushFollow(Follow._op_or_in_instruction483);
                                op_or42 = op_or();
                                PopFollow();

                                adaptor.AddChild(root_0, op_or42.Tree);

                            }
                            break;
                        case 24:
                            DebugEnterAlt(24);
                            // GBX.g:105:7: op_pop
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(105, 7);
                                PushFollow(Follow._op_pop_in_instruction491);
                                op_pop43 = op_pop();
                                PopFollow();

                                adaptor.AddChild(root_0, op_pop43.Tree);

                            }
                            break;
                        case 25:
                            DebugEnterAlt(25);
                            // GBX.g:106:7: op_push
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(106, 7);
                                PushFollow(Follow._op_push_in_instruction499);
                                op_push44 = op_push();
                                PopFollow();

                                adaptor.AddChild(root_0, op_push44.Tree);

                            }
                            break;
                        case 26:
                            DebugEnterAlt(26);
                            // GBX.g:107:7: op_res
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(107, 7);
                                PushFollow(Follow._op_res_in_instruction507);
                                op_res45 = op_res();
                                PopFollow();

                                adaptor.AddChild(root_0, op_res45.Tree);

                            }
                            break;
                        case 27:
                            DebugEnterAlt(27);
                            // GBX.g:108:7: op_ret
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(108, 7);
                                PushFollow(Follow._op_ret_in_instruction515);
                                op_ret46 = op_ret();
                                PopFollow();

                                adaptor.AddChild(root_0, op_ret46.Tree);

                            }
                            break;
                        case 28:
                            DebugEnterAlt(28);
                            // GBX.g:109:7: op_reti
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(109, 7);
                                PushFollow(Follow._op_reti_in_instruction523);
                                op_reti47 = op_reti();
                                PopFollow();

                                adaptor.AddChild(root_0, op_reti47.Tree);

                            }
                            break;
                        case 29:
                            DebugEnterAlt(29);
                            // GBX.g:110:7: op_rl
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(110, 7);
                                PushFollow(Follow._op_rl_in_instruction531);
                                op_rl48 = op_rl();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rl48.Tree);

                            }
                            break;
                        case 30:
                            DebugEnterAlt(30);
                            // GBX.g:111:7: op_rla
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(111, 7);
                                PushFollow(Follow._op_rla_in_instruction539);
                                op_rla49 = op_rla();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rla49.Tree);

                            }
                            break;
                        case 31:
                            DebugEnterAlt(31);
                            // GBX.g:112:7: op_rlc
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(112, 7);
                                PushFollow(Follow._op_rlc_in_instruction547);
                                op_rlc50 = op_rlc();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rlc50.Tree);

                            }
                            break;
                        case 32:
                            DebugEnterAlt(32);
                            // GBX.g:113:7: op_rlca
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(113, 7);
                                PushFollow(Follow._op_rlca_in_instruction555);
                                op_rlca51 = op_rlca();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rlca51.Tree);

                            }
                            break;
                        case 33:
                            DebugEnterAlt(33);
                            // GBX.g:114:7: op_rr
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(114, 7);
                                PushFollow(Follow._op_rr_in_instruction563);
                                op_rr52 = op_rr();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rr52.Tree);

                            }
                            break;
                        case 34:
                            DebugEnterAlt(34);
                            // GBX.g:115:7: op_rra
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(115, 7);
                                PushFollow(Follow._op_rra_in_instruction571);
                                op_rra53 = op_rra();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rra53.Tree);

                            }
                            break;
                        case 35:
                            DebugEnterAlt(35);
                            // GBX.g:116:7: op_rrc
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(116, 7);
                                PushFollow(Follow._op_rrc_in_instruction579);
                                op_rrc54 = op_rrc();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rrc54.Tree);

                            }
                            break;
                        case 36:
                            DebugEnterAlt(36);
                            // GBX.g:117:7: op_rrca
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(117, 7);
                                PushFollow(Follow._op_rrca_in_instruction587);
                                op_rrca55 = op_rrca();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rrca55.Tree);

                            }
                            break;
                        case 37:
                            DebugEnterAlt(37);
                            // GBX.g:118:7: op_rst
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(118, 7);
                                PushFollow(Follow._op_rst_in_instruction595);
                                op_rst56 = op_rst();
                                PopFollow();

                                adaptor.AddChild(root_0, op_rst56.Tree);

                            }
                            break;
                        case 38:
                            DebugEnterAlt(38);
                            // GBX.g:119:7: op_sbc
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(119, 7);
                                PushFollow(Follow._op_sbc_in_instruction603);
                                op_sbc57 = op_sbc();
                                PopFollow();

                                adaptor.AddChild(root_0, op_sbc57.Tree);

                            }
                            break;
                        case 39:
                            DebugEnterAlt(39);
                            // GBX.g:120:7: op_scf
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(120, 7);
                                PushFollow(Follow._op_scf_in_instruction611);
                                op_scf58 = op_scf();
                                PopFollow();

                                adaptor.AddChild(root_0, op_scf58.Tree);

                            }
                            break;
                        case 40:
                            DebugEnterAlt(40);
                            // GBX.g:121:7: op_set
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(121, 7);
                                PushFollow(Follow._op_set_in_instruction619);
                                op_set59 = op_set();
                                PopFollow();

                                adaptor.AddChild(root_0, op_set59.Tree);

                            }
                            break;
                        case 41:
                            DebugEnterAlt(41);
                            // GBX.g:122:7: op_sla
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(122, 7);
                                PushFollow(Follow._op_sla_in_instruction627);
                                op_sla60 = op_sla();
                                PopFollow();

                                adaptor.AddChild(root_0, op_sla60.Tree);

                            }
                            break;
                        case 42:
                            DebugEnterAlt(42);
                            // GBX.g:123:7: op_sra
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(123, 7);
                                PushFollow(Follow._op_sra_in_instruction635);
                                op_sra61 = op_sra();
                                PopFollow();

                                adaptor.AddChild(root_0, op_sra61.Tree);

                            }
                            break;
                        case 43:
                            DebugEnterAlt(43);
                            // GBX.g:124:7: op_srl
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(124, 7);
                                PushFollow(Follow._op_srl_in_instruction643);
                                op_srl62 = op_srl();
                                PopFollow();

                                adaptor.AddChild(root_0, op_srl62.Tree);

                            }
                            break;
                        case 44:
                            DebugEnterAlt(44);
                            // GBX.g:125:7: op_stop
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(125, 7);
                                PushFollow(Follow._op_stop_in_instruction651);
                                op_stop63 = op_stop();
                                PopFollow();

                                adaptor.AddChild(root_0, op_stop63.Tree);

                            }
                            break;
                        case 45:
                            DebugEnterAlt(45);
                            // GBX.g:126:7: op_sub
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(126, 7);
                                PushFollow(Follow._op_sub_in_instruction659);
                                op_sub64 = op_sub();
                                PopFollow();

                                adaptor.AddChild(root_0, op_sub64.Tree);

                            }
                            break;
                        case 46:
                            DebugEnterAlt(46);
                            // GBX.g:127:7: op_swap
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(127, 7);
                                PushFollow(Follow._op_swap_in_instruction667);
                                op_swap65 = op_swap();
                                PopFollow();

                                adaptor.AddChild(root_0, op_swap65.Tree);

                            }
                            break;
                        case 47:
                            DebugEnterAlt(47);
                            // GBX.g:128:7: op_xor
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(128, 7);
                                PushFollow(Follow._op_xor_in_instruction675);
                                op_xor66 = op_xor();
                                PopFollow();

                                adaptor.AddChild(root_0, op_xor66.Tree);

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("instruction", 8);
                    LeaveRule("instruction", 8);
                    LeaveRule_instruction();
                }
                DebugLocation(128, 13);
            }
            finally { DebugExitRule(GrammarFileName, "instruction"); }
            return retval;

        }
        // $ANTLR end "instruction"

        partial void EnterRule_op_adc();
        partial void LeaveRule_op_adc();

        // $ANTLR start "op_adc"
        // GBX.g:130:1: op_adc : INST_ADC ^ ( REG_A COMMA !)? arith_opt ;
        [GrammarRule("op_adc")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_adc()
        {
            EnterRule_op_adc();
            EnterRule("op_adc", 9);
            TraceIn("op_adc", 9);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_ADC67 = default(IToken);
            IToken REG_A68 = default(IToken);
            IToken COMMA69 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_ADC67_tree = default(CommonTree);
            CommonTree REG_A68_tree = default(CommonTree);
            CommonTree COMMA69_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_adc");
                DebugLocation(130, 46);
                try
                {
                    // GBX.g:130:10: ( INST_ADC ^ ( REG_A COMMA !)? arith_opt )
                    DebugEnterAlt(1);
                    // GBX.g:130:12: INST_ADC ^ ( REG_A COMMA !)? arith_opt
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(130, 20);
                        INST_ADC67 = (IToken)Match(input, INST_ADC, Follow._INST_ADC_in_op_adc686);
                        INST_ADC67_tree = (CommonTree)adaptor.Create(INST_ADC67);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_ADC67_tree, root_0);
                        DebugLocation(130, 22);
                        // GBX.g:130:22: ( REG_A COMMA !)?
                        int alt9 = 2;
                        try
                        {
                            DebugEnterSubRule(9);
                            try
                            {
                                DebugEnterDecision(9, false);
                                int LA9_0 = input.LA(1);

                                if ((LA9_0 == REG_A))
                                {
                                    int LA9_1 = input.LA(2);

                                    if ((LA9_1 == COMMA))
                                    {
                                        alt9 = 1;
                                    }
                                }
                            }
                            finally { DebugExitDecision(9); }
                            switch (alt9)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:130:23: REG_A COMMA !
                                    {
                                        DebugLocation(130, 23);
                                        REG_A68 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_adc690);
                                        REG_A68_tree = (CommonTree)adaptor.Create(REG_A68);
                                        adaptor.AddChild(root_0, REG_A68_tree);
                                        DebugLocation(130, 34);
                                        COMMA69 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_adc692);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(9); }

                        DebugLocation(130, 38);
                        PushFollow(Follow._arith_opt_in_op_adc697);
                        arith_opt70 = arith_opt();
                        PopFollow();

                        adaptor.AddChild(root_0, arith_opt70.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_adc", 9);
                    LeaveRule("op_adc", 9);
                    LeaveRule_op_adc();
                }
                DebugLocation(130, 46);
            }
            finally { DebugExitRule(GrammarFileName, "op_adc"); }
            return retval;

        }
        // $ANTLR end "op_adc"

        partial void EnterRule_op_add();
        partial void LeaveRule_op_add();

        // $ANTLR start "op_add"
        // GBX.g:131:1: op_add : INST_ADD ^ ( ( ( REG_A COMMA !)? arith_opt ) | ( RR_HL COMMA ! ( RR_BC | RR_DE | RR_HL | RR_SP ) ) | ( RR_SP COMMA ! expression ) ) ;
        [GrammarRule("op_add")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_add()
        {
            EnterRule_op_add();
            EnterRule("op_add", 10);
            TraceIn("op_add", 10);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_ADD71 = default(IToken);
            IToken REG_A72 = default(IToken);
            IToken COMMA73 = default(IToken);
            IToken RR_HL75 = default(IToken);
            IToken COMMA76 = default(IToken);
            IToken set77 = default(IToken);
            IToken RR_SP78 = default(IToken);
            IToken COMMA79 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> expression80 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_ADD71_tree = default(CommonTree);
            CommonTree REG_A72_tree = default(CommonTree);
            CommonTree COMMA73_tree = default(CommonTree);
            CommonTree RR_HL75_tree = default(CommonTree);
            CommonTree COMMA76_tree = default(CommonTree);
            CommonTree set77_tree = default(CommonTree);
            CommonTree RR_SP78_tree = default(CommonTree);
            CommonTree COMMA79_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_add");
                DebugLocation(131, 117);
                try
                {
                    // GBX.g:131:10: ( INST_ADD ^ ( ( ( REG_A COMMA !)? arith_opt ) | ( RR_HL COMMA ! ( RR_BC | RR_DE | RR_HL | RR_SP ) ) | ( RR_SP COMMA ! expression ) ) )
                    DebugEnterAlt(1);
                    // GBX.g:131:12: INST_ADD ^ ( ( ( REG_A COMMA !)? arith_opt ) | ( RR_HL COMMA ! ( RR_BC | RR_DE | RR_HL | RR_SP ) ) | ( RR_SP COMMA ! expression ) )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(131, 20);
                        INST_ADD71 = (IToken)Match(input, INST_ADD, Follow._INST_ADD_in_op_add706);
                        INST_ADD71_tree = (CommonTree)adaptor.Create(INST_ADD71);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_ADD71_tree, root_0);
                        DebugLocation(131, 22);
                        // GBX.g:131:22: ( ( ( REG_A COMMA !)? arith_opt ) | ( RR_HL COMMA ! ( RR_BC | RR_DE | RR_HL | RR_SP ) ) | ( RR_SP COMMA ! expression ) )
                        int alt11 = 3;
                        try
                        {
                            DebugEnterSubRule(11);
                            try
                            {
                                DebugEnterDecision(11, false);
                                switch (input.LA(1))
                                {
                                    case BANG_MARK:
                                    case ID:
                                    case LEFT_BRACKET:
                                    case LEFT_PARENS:
                                    case MINUS_MARK:
                                    case NUMBER:
                                    case REG_A:
                                    case REG_B:
                                    case REG_C:
                                    case REG_D:
                                    case REG_E:
                                    case REG_H:
                                    case REG_L:
                                    case TILDE_MARK:
                                        {
                                            alt11 = 1;
                                        }
                                        break;
                                    case RR_HL:
                                        {
                                            alt11 = 2;
                                        }
                                        break;
                                    case RR_SP:
                                        {
                                            alt11 = 3;
                                        }
                                        break;
                                    default:
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                }

                            }
                            finally { DebugExitDecision(11); }
                            switch (alt11)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:131:23: ( ( REG_A COMMA !)? arith_opt )
                                    {
                                        DebugLocation(131, 23);
                                        // GBX.g:131:23: ( ( REG_A COMMA !)? arith_opt )
                                        DebugEnterAlt(1);
                                        // GBX.g:131:24: ( REG_A COMMA !)? arith_opt
                                        {
                                            DebugLocation(131, 24);
                                            // GBX.g:131:24: ( REG_A COMMA !)?
                                            int alt10 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(10);
                                                try
                                                {
                                                    DebugEnterDecision(10, false);
                                                    int LA10_0 = input.LA(1);

                                                    if ((LA10_0 == REG_A))
                                                    {
                                                        int LA10_1 = input.LA(2);

                                                        if ((LA10_1 == COMMA))
                                                        {
                                                            alt10 = 1;
                                                        }
                                                    }
                                                }
                                                finally { DebugExitDecision(10); }
                                                switch (alt10)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // GBX.g:131:25: REG_A COMMA !
                                                        {
                                                            DebugLocation(131, 25);
                                                            REG_A72 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_add712);
                                                            REG_A72_tree = (CommonTree)adaptor.Create(REG_A72);
                                                            adaptor.AddChild(root_0, REG_A72_tree);
                                                            DebugLocation(131, 36);
                                                            COMMA73 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_add714);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(10); }

                                            DebugLocation(131, 40);
                                            PushFollow(Follow._arith_opt_in_op_add719);
                                            arith_opt74 = arith_opt();
                                            PopFollow();

                                            adaptor.AddChild(root_0, arith_opt74.Tree);

                                        }


                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:131:51: ( RR_HL COMMA ! ( RR_BC | RR_DE | RR_HL | RR_SP ) )
                                    {
                                        DebugLocation(131, 51);
                                        // GBX.g:131:51: ( RR_HL COMMA ! ( RR_BC | RR_DE | RR_HL | RR_SP ) )
                                        DebugEnterAlt(1);
                                        // GBX.g:131:52: RR_HL COMMA ! ( RR_BC | RR_DE | RR_HL | RR_SP )
                                        {
                                            DebugLocation(131, 52);
                                            RR_HL75 = (IToken)Match(input, RR_HL, Follow._RR_HL_in_op_add723);
                                            RR_HL75_tree = (CommonTree)adaptor.Create(RR_HL75);
                                            adaptor.AddChild(root_0, RR_HL75_tree);
                                            DebugLocation(131, 63);
                                            COMMA76 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_add725);
                                            DebugLocation(131, 65);

                                            set77 = (IToken)input.LT(1);
                                            if ((input.LA(1) >= RR_BC && input.LA(1) <= RR_HL) || input.LA(1) == RR_SP)
                                            {
                                                input.Consume();
                                                adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set77));
                                                state.errorRecovery = false;
                                            }
                                            else
                                            {
                                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                                DebugRecognitionException(mse);
                                                throw mse;
                                            }


                                        }


                                    }
                                    break;
                                case 3:
                                    DebugEnterAlt(3);
                                    // GBX.g:131:92: ( RR_SP COMMA ! expression )
                                    {
                                        DebugLocation(131, 92);
                                        // GBX.g:131:92: ( RR_SP COMMA ! expression )
                                        DebugEnterAlt(1);
                                        // GBX.g:131:93: RR_SP COMMA ! expression
                                        {
                                            DebugLocation(131, 93);
                                            RR_SP78 = (IToken)Match(input, RR_SP, Follow._RR_SP_in_op_add740);
                                            RR_SP78_tree = (CommonTree)adaptor.Create(RR_SP78);
                                            adaptor.AddChild(root_0, RR_SP78_tree);
                                            DebugLocation(131, 104);
                                            COMMA79 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_add742);
                                            DebugLocation(131, 106);
                                            PushFollow(Follow._expression_in_op_add745);
                                            expression80 = expression();
                                            PopFollow();

                                            adaptor.AddChild(root_0, expression80.Tree);

                                        }


                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(11); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_add", 10);
                    LeaveRule("op_add", 10);
                    LeaveRule_op_add();
                }
                DebugLocation(131, 117);
            }
            finally { DebugExitRule(GrammarFileName, "op_add"); }
            return retval;

        }
        // $ANTLR end "op_add"

        partial void EnterRule_op_and();
        partial void LeaveRule_op_and();

        // $ANTLR start "op_and"
        // GBX.g:132:1: op_and : INST_AND ^ ( REG_A COMMA !)? arith_opt ;
        [GrammarRule("op_and")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_and()
        {
            EnterRule_op_and();
            EnterRule("op_and", 11);
            TraceIn("op_and", 11);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_AND81 = default(IToken);
            IToken REG_A82 = default(IToken);
            IToken COMMA83 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt84 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_AND81_tree = default(CommonTree);
            CommonTree REG_A82_tree = default(CommonTree);
            CommonTree COMMA83_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_and");
                DebugLocation(132, 46);
                try
                {
                    // GBX.g:132:10: ( INST_AND ^ ( REG_A COMMA !)? arith_opt )
                    DebugEnterAlt(1);
                    // GBX.g:132:12: INST_AND ^ ( REG_A COMMA !)? arith_opt
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(132, 20);
                        INST_AND81 = (IToken)Match(input, INST_AND, Follow._INST_AND_in_op_and756);
                        INST_AND81_tree = (CommonTree)adaptor.Create(INST_AND81);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_AND81_tree, root_0);
                        DebugLocation(132, 22);
                        // GBX.g:132:22: ( REG_A COMMA !)?
                        int alt12 = 2;
                        try
                        {
                            DebugEnterSubRule(12);
                            try
                            {
                                DebugEnterDecision(12, false);
                                int LA12_0 = input.LA(1);

                                if ((LA12_0 == REG_A))
                                {
                                    int LA12_1 = input.LA(2);

                                    if ((LA12_1 == COMMA))
                                    {
                                        alt12 = 1;
                                    }
                                }
                            }
                            finally { DebugExitDecision(12); }
                            switch (alt12)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:132:23: REG_A COMMA !
                                    {
                                        DebugLocation(132, 23);
                                        REG_A82 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_and760);
                                        REG_A82_tree = (CommonTree)adaptor.Create(REG_A82);
                                        adaptor.AddChild(root_0, REG_A82_tree);
                                        DebugLocation(132, 34);
                                        COMMA83 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_and762);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(12); }

                        DebugLocation(132, 38);
                        PushFollow(Follow._arith_opt_in_op_and767);
                        arith_opt84 = arith_opt();
                        PopFollow();

                        adaptor.AddChild(root_0, arith_opt84.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_and", 11);
                    LeaveRule("op_and", 11);
                    LeaveRule_op_and();
                }
                DebugLocation(132, 46);
            }
            finally { DebugExitRule(GrammarFileName, "op_and"); }
            return retval;

        }
        // $ANTLR end "op_and"

        partial void EnterRule_op_bit();
        partial void LeaveRule_op_bit();

        // $ANTLR start "op_bit"
        // GBX.g:133:1: op_bit : INST_BIT ^ expression COMMA ! ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_bit")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_bit()
        {
            EnterRule_op_bit();
            EnterRule("op_bit", 12);
            TraceIn("op_bit", 12);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_BIT85 = default(IToken);
            IToken COMMA87 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> r888 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl89 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_BIT85_tree = default(CommonTree);
            CommonTree COMMA87_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_bit");
                DebugLocation(133, 53);
                try
                {
                    // GBX.g:133:10: ( INST_BIT ^ expression COMMA ! ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:133:12: INST_BIT ^ expression COMMA ! ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(133, 20);
                        INST_BIT85 = (IToken)Match(input, INST_BIT, Follow._INST_BIT_in_op_bit776);
                        INST_BIT85_tree = (CommonTree)adaptor.Create(INST_BIT85);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_BIT85_tree, root_0);
                        DebugLocation(133, 22);
                        PushFollow(Follow._expression_in_op_bit779);
                        expression86 = expression();
                        PopFollow();

                        adaptor.AddChild(root_0, expression86.Tree);
                        DebugLocation(133, 38);
                        COMMA87 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_bit781);
                        DebugLocation(133, 40);
                        // GBX.g:133:40: ( r8 | rr_ref_hl )
                        int alt13 = 2;
                        try
                        {
                            DebugEnterSubRule(13);
                            try
                            {
                                DebugEnterDecision(13, false);
                                int LA13_0 = input.LA(1);

                                if (((LA13_0 >= REG_A && LA13_0 <= REG_L)))
                                {
                                    alt13 = 1;
                                }
                                else if ((LA13_0 == LEFT_BRACKET))
                                {
                                    alt13 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(13); }
                            switch (alt13)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:133:41: r8
                                    {
                                        DebugLocation(133, 41);
                                        PushFollow(Follow._r8_in_op_bit785);
                                        r888 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r888.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:133:44: rr_ref_hl
                                    {
                                        DebugLocation(133, 44);
                                        PushFollow(Follow._rr_ref_hl_in_op_bit787);
                                        rr_ref_hl89 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl89.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(13); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_bit", 12);
                    LeaveRule("op_bit", 12);
                    LeaveRule_op_bit();
                }
                DebugLocation(133, 53);
            }
            finally { DebugExitRule(GrammarFileName, "op_bit"); }
            return retval;

        }
        // $ANTLR end "op_bit"

        partial void EnterRule_op_call();
        partial void LeaveRule_op_call();

        // $ANTLR start "op_call"
        // GBX.g:134:1: op_call : INST_CALL ^ ( cond_opt COMMA !)? ID ;
        [GrammarRule("op_call")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_call()
        {
            EnterRule_op_call();
            EnterRule("op_call", 13);
            TraceIn("op_call", 13);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_CALL90 = default(IToken);
            IToken COMMA92 = default(IToken);
            IToken ID93 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> cond_opt91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_CALL90_tree = default(CommonTree);
            CommonTree COMMA92_tree = default(CommonTree);
            CommonTree ID93_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_call");
                DebugLocation(134, 44);
                try
                {
                    // GBX.g:134:11: ( INST_CALL ^ ( cond_opt COMMA !)? ID )
                    DebugEnterAlt(1);
                    // GBX.g:134:13: INST_CALL ^ ( cond_opt COMMA !)? ID
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(134, 22);
                        INST_CALL90 = (IToken)Match(input, INST_CALL, Follow._INST_CALL_in_op_call797);
                        INST_CALL90_tree = (CommonTree)adaptor.Create(INST_CALL90);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_CALL90_tree, root_0);
                        DebugLocation(134, 24);
                        // GBX.g:134:24: ( cond_opt COMMA !)?
                        int alt14 = 2;
                        try
                        {
                            DebugEnterSubRule(14);
                            try
                            {
                                DebugEnterDecision(14, false);
                                int LA14_0 = input.LA(1);

                                if (((LA14_0 >= CC_NC && LA14_0 <= CC_Z) || LA14_0 == REG_C))
                                {
                                    alt14 = 1;
                                }
                            }
                            finally { DebugExitDecision(14); }
                            switch (alt14)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:134:25: cond_opt COMMA !
                                    {
                                        DebugLocation(134, 25);
                                        PushFollow(Follow._cond_opt_in_op_call801);
                                        cond_opt91 = cond_opt();
                                        PopFollow();

                                        adaptor.AddChild(root_0, cond_opt91.Tree);
                                        DebugLocation(134, 39);
                                        COMMA92 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_call803);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(14); }

                        DebugLocation(134, 43);
                        ID93 = (IToken)Match(input, ID, Follow._ID_in_op_call808);
                        ID93_tree = (CommonTree)adaptor.Create(ID93);
                        adaptor.AddChild(root_0, ID93_tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_call", 13);
                    LeaveRule("op_call", 13);
                    LeaveRule_op_call();
                }
                DebugLocation(134, 44);
            }
            finally { DebugExitRule(GrammarFileName, "op_call"); }
            return retval;

        }
        // $ANTLR end "op_call"

        partial void EnterRule_op_ccf();
        partial void LeaveRule_op_ccf();

        // $ANTLR start "op_ccf"
        // GBX.g:135:1: op_ccf : INST_CCF ^;
        [GrammarRule("op_ccf")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_ccf()
        {
            EnterRule_op_ccf();
            EnterRule("op_ccf", 14);
            TraceIn("op_ccf", 14);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_CCF94 = default(IToken);

            CommonTree INST_CCF94_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_ccf");
                DebugLocation(135, 20);
                try
                {
                    // GBX.g:135:10: ( INST_CCF ^)
                    DebugEnterAlt(1);
                    // GBX.g:135:12: INST_CCF ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(135, 20);
                        INST_CCF94 = (IToken)Match(input, INST_CCF, Follow._INST_CCF_in_op_ccf817);
                        INST_CCF94_tree = (CommonTree)adaptor.Create(INST_CCF94);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_CCF94_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_ccf", 14);
                    LeaveRule("op_ccf", 14);
                    LeaveRule_op_ccf();
                }
                DebugLocation(135, 20);
            }
            finally { DebugExitRule(GrammarFileName, "op_ccf"); }
            return retval;

        }
        // $ANTLR end "op_ccf"

        partial void EnterRule_op_cp();
        partial void LeaveRule_op_cp();

        // $ANTLR start "op_cp"
        // GBX.g:136:1: op_cp : INST_CP ^ ( REG_A COMMA !)? arith_opt ;
        [GrammarRule("op_cp")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_cp()
        {
            EnterRule_op_cp();
            EnterRule("op_cp", 15);
            TraceIn("op_cp", 15);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_CP95 = default(IToken);
            IToken REG_A96 = default(IToken);
            IToken COMMA97 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt98 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_CP95_tree = default(CommonTree);
            CommonTree REG_A96_tree = default(CommonTree);
            CommonTree COMMA97_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_cp");
                DebugLocation(136, 44);
                try
                {
                    // GBX.g:136:9: ( INST_CP ^ ( REG_A COMMA !)? arith_opt )
                    DebugEnterAlt(1);
                    // GBX.g:136:11: INST_CP ^ ( REG_A COMMA !)? arith_opt
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(136, 18);
                        INST_CP95 = (IToken)Match(input, INST_CP, Follow._INST_CP_in_op_cp827);
                        INST_CP95_tree = (CommonTree)adaptor.Create(INST_CP95);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_CP95_tree, root_0);
                        DebugLocation(136, 20);
                        // GBX.g:136:20: ( REG_A COMMA !)?
                        int alt15 = 2;
                        try
                        {
                            DebugEnterSubRule(15);
                            try
                            {
                                DebugEnterDecision(15, false);
                                int LA15_0 = input.LA(1);

                                if ((LA15_0 == REG_A))
                                {
                                    int LA15_1 = input.LA(2);

                                    if ((LA15_1 == COMMA))
                                    {
                                        alt15 = 1;
                                    }
                                }
                            }
                            finally { DebugExitDecision(15); }
                            switch (alt15)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:136:21: REG_A COMMA !
                                    {
                                        DebugLocation(136, 21);
                                        REG_A96 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_cp831);
                                        REG_A96_tree = (CommonTree)adaptor.Create(REG_A96);
                                        adaptor.AddChild(root_0, REG_A96_tree);
                                        DebugLocation(136, 32);
                                        COMMA97 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_cp833);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(15); }

                        DebugLocation(136, 36);
                        PushFollow(Follow._arith_opt_in_op_cp838);
                        arith_opt98 = arith_opt();
                        PopFollow();

                        adaptor.AddChild(root_0, arith_opt98.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_cp", 15);
                    LeaveRule("op_cp", 15);
                    LeaveRule_op_cp();
                }
                DebugLocation(136, 44);
            }
            finally { DebugExitRule(GrammarFileName, "op_cp"); }
            return retval;

        }
        // $ANTLR end "op_cp"

        partial void EnterRule_op_cpl();
        partial void LeaveRule_op_cpl();

        // $ANTLR start "op_cpl"
        // GBX.g:137:1: op_cpl : INST_CPL ^;
        [GrammarRule("op_cpl")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_cpl()
        {
            EnterRule_op_cpl();
            EnterRule("op_cpl", 16);
            TraceIn("op_cpl", 16);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_CPL99 = default(IToken);

            CommonTree INST_CPL99_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_cpl");
                DebugLocation(137, 20);
                try
                {
                    // GBX.g:137:10: ( INST_CPL ^)
                    DebugEnterAlt(1);
                    // GBX.g:137:12: INST_CPL ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(137, 20);
                        INST_CPL99 = (IToken)Match(input, INST_CPL, Follow._INST_CPL_in_op_cpl847);
                        INST_CPL99_tree = (CommonTree)adaptor.Create(INST_CPL99);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_CPL99_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_cpl", 16);
                    LeaveRule("op_cpl", 16);
                    LeaveRule_op_cpl();
                }
                DebugLocation(137, 20);
            }
            finally { DebugExitRule(GrammarFileName, "op_cpl"); }
            return retval;

        }
        // $ANTLR end "op_cpl"

        partial void EnterRule_op_daa();
        partial void LeaveRule_op_daa();

        // $ANTLR start "op_daa"
        // GBX.g:138:1: op_daa : INST_DAA ^;
        [GrammarRule("op_daa")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_daa()
        {
            EnterRule_op_daa();
            EnterRule("op_daa", 17);
            TraceIn("op_daa", 17);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_DAA100 = default(IToken);

            CommonTree INST_DAA100_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_daa");
                DebugLocation(138, 20);
                try
                {
                    // GBX.g:138:10: ( INST_DAA ^)
                    DebugEnterAlt(1);
                    // GBX.g:138:12: INST_DAA ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(138, 20);
                        INST_DAA100 = (IToken)Match(input, INST_DAA, Follow._INST_DAA_in_op_daa857);
                        INST_DAA100_tree = (CommonTree)adaptor.Create(INST_DAA100);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_DAA100_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_daa", 17);
                    LeaveRule("op_daa", 17);
                    LeaveRule_op_daa();
                }
                DebugLocation(138, 20);
            }
            finally { DebugExitRule(GrammarFileName, "op_daa"); }
            return retval;

        }
        // $ANTLR end "op_daa"

        partial void EnterRule_op_dec();
        partial void LeaveRule_op_dec();

        // $ANTLR start "op_dec"
        // GBX.g:139:1: op_dec : INST_DEC ^ ( RR_BC | RR_DE | RR_HL | RR_SP | r8 | rr_ref_hl ) ;
        [GrammarRule("op_dec")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_dec()
        {
            EnterRule_op_dec();
            EnterRule("op_dec", 18);
            TraceIn("op_dec", 18);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_DEC101 = default(IToken);
            IToken RR_BC102 = default(IToken);
            IToken RR_DE103 = default(IToken);
            IToken RR_HL104 = default(IToken);
            IToken RR_SP105 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl107 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_DEC101_tree = default(CommonTree);
            CommonTree RR_BC102_tree = default(CommonTree);
            CommonTree RR_DE103_tree = default(CommonTree);
            CommonTree RR_HL104_tree = default(CommonTree);
            CommonTree RR_SP105_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_dec");
                DebugLocation(139, 59);
                try
                {
                    // GBX.g:139:10: ( INST_DEC ^ ( RR_BC | RR_DE | RR_HL | RR_SP | r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:139:12: INST_DEC ^ ( RR_BC | RR_DE | RR_HL | RR_SP | r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(139, 20);
                        INST_DEC101 = (IToken)Match(input, INST_DEC, Follow._INST_DEC_in_op_dec867);
                        INST_DEC101_tree = (CommonTree)adaptor.Create(INST_DEC101);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_DEC101_tree, root_0);
                        DebugLocation(139, 22);
                        // GBX.g:139:22: ( RR_BC | RR_DE | RR_HL | RR_SP | r8 | rr_ref_hl )
                        int alt16 = 6;
                        try
                        {
                            DebugEnterSubRule(16);
                            try
                            {
                                DebugEnterDecision(16, false);
                                switch (input.LA(1))
                                {
                                    case RR_BC:
                                        {
                                            alt16 = 1;
                                        }
                                        break;
                                    case RR_DE:
                                        {
                                            alt16 = 2;
                                        }
                                        break;
                                    case RR_HL:
                                        {
                                            alt16 = 3;
                                        }
                                        break;
                                    case RR_SP:
                                        {
                                            alt16 = 4;
                                        }
                                        break;
                                    case REG_A:
                                    case REG_B:
                                    case REG_C:
                                    case REG_D:
                                    case REG_E:
                                    case REG_H:
                                    case REG_L:
                                        {
                                            alt16 = 5;
                                        }
                                        break;
                                    case LEFT_BRACKET:
                                        {
                                            alt16 = 6;
                                        }
                                        break;
                                    default:
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                }

                            }
                            finally { DebugExitDecision(16); }
                            switch (alt16)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:139:23: RR_BC
                                    {
                                        DebugLocation(139, 23);
                                        RR_BC102 = (IToken)Match(input, RR_BC, Follow._RR_BC_in_op_dec871);
                                        RR_BC102_tree = (CommonTree)adaptor.Create(RR_BC102);
                                        adaptor.AddChild(root_0, RR_BC102_tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:139:29: RR_DE
                                    {
                                        DebugLocation(139, 29);
                                        RR_DE103 = (IToken)Match(input, RR_DE, Follow._RR_DE_in_op_dec873);
                                        RR_DE103_tree = (CommonTree)adaptor.Create(RR_DE103);
                                        adaptor.AddChild(root_0, RR_DE103_tree);

                                    }
                                    break;
                                case 3:
                                    DebugEnterAlt(3);
                                    // GBX.g:139:35: RR_HL
                                    {
                                        DebugLocation(139, 35);
                                        RR_HL104 = (IToken)Match(input, RR_HL, Follow._RR_HL_in_op_dec875);
                                        RR_HL104_tree = (CommonTree)adaptor.Create(RR_HL104);
                                        adaptor.AddChild(root_0, RR_HL104_tree);

                                    }
                                    break;
                                case 4:
                                    DebugEnterAlt(4);
                                    // GBX.g:139:41: RR_SP
                                    {
                                        DebugLocation(139, 41);
                                        RR_SP105 = (IToken)Match(input, RR_SP, Follow._RR_SP_in_op_dec877);
                                        RR_SP105_tree = (CommonTree)adaptor.Create(RR_SP105);
                                        adaptor.AddChild(root_0, RR_SP105_tree);

                                    }
                                    break;
                                case 5:
                                    DebugEnterAlt(5);
                                    // GBX.g:139:47: r8
                                    {
                                        DebugLocation(139, 47);
                                        PushFollow(Follow._r8_in_op_dec879);
                                        r8106 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8106.Tree);

                                    }
                                    break;
                                case 6:
                                    DebugEnterAlt(6);
                                    // GBX.g:139:50: rr_ref_hl
                                    {
                                        DebugLocation(139, 50);
                                        PushFollow(Follow._rr_ref_hl_in_op_dec881);
                                        rr_ref_hl107 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl107.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(16); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_dec", 18);
                    LeaveRule("op_dec", 18);
                    LeaveRule_op_dec();
                }
                DebugLocation(139, 59);
            }
            finally { DebugExitRule(GrammarFileName, "op_dec"); }
            return retval;

        }
        // $ANTLR end "op_dec"

        partial void EnterRule_op_di();
        partial void LeaveRule_op_di();

        // $ANTLR start "op_di"
        // GBX.g:140:1: op_di : INST_DI ^;
        [GrammarRule("op_di")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_di()
        {
            EnterRule_op_di();
            EnterRule("op_di", 19);
            TraceIn("op_di", 19);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_DI108 = default(IToken);

            CommonTree INST_DI108_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_di");
                DebugLocation(140, 18);
                try
                {
                    // GBX.g:140:9: ( INST_DI ^)
                    DebugEnterAlt(1);
                    // GBX.g:140:11: INST_DI ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(140, 18);
                        INST_DI108 = (IToken)Match(input, INST_DI, Follow._INST_DI_in_op_di891);
                        INST_DI108_tree = (CommonTree)adaptor.Create(INST_DI108);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_DI108_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_di", 19);
                    LeaveRule("op_di", 19);
                    LeaveRule_op_di();
                }
                DebugLocation(140, 18);
            }
            finally { DebugExitRule(GrammarFileName, "op_di"); }
            return retval;

        }
        // $ANTLR end "op_di"

        partial void EnterRule_op_ei();
        partial void LeaveRule_op_ei();

        // $ANTLR start "op_ei"
        // GBX.g:141:1: op_ei : INST_EI ^;
        [GrammarRule("op_ei")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_ei()
        {
            EnterRule_op_ei();
            EnterRule("op_ei", 20);
            TraceIn("op_ei", 20);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_EI109 = default(IToken);

            CommonTree INST_EI109_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_ei");
                DebugLocation(141, 18);
                try
                {
                    // GBX.g:141:9: ( INST_EI ^)
                    DebugEnterAlt(1);
                    // GBX.g:141:11: INST_EI ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(141, 18);
                        INST_EI109 = (IToken)Match(input, INST_EI, Follow._INST_EI_in_op_ei901);
                        INST_EI109_tree = (CommonTree)adaptor.Create(INST_EI109);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_EI109_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_ei", 20);
                    LeaveRule("op_ei", 20);
                    LeaveRule_op_ei();
                }
                DebugLocation(141, 18);
            }
            finally { DebugExitRule(GrammarFileName, "op_ei"); }
            return retval;

        }
        // $ANTLR end "op_ei"

        partial void EnterRule_op_halt();
        partial void LeaveRule_op_halt();

        // $ANTLR start "op_halt"
        // GBX.g:142:1: op_halt : INST_HALT ^;
        [GrammarRule("op_halt")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_halt()
        {
            EnterRule_op_halt();
            EnterRule("op_halt", 21);
            TraceIn("op_halt", 21);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_HALT110 = default(IToken);

            CommonTree INST_HALT110_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_halt");
                DebugLocation(142, 22);
                try
                {
                    // GBX.g:142:11: ( INST_HALT ^)
                    DebugEnterAlt(1);
                    // GBX.g:142:13: INST_HALT ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(142, 22);
                        INST_HALT110 = (IToken)Match(input, INST_HALT, Follow._INST_HALT_in_op_halt911);
                        INST_HALT110_tree = (CommonTree)adaptor.Create(INST_HALT110);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_HALT110_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_halt", 21);
                    LeaveRule("op_halt", 21);
                    LeaveRule_op_halt();
                }
                DebugLocation(142, 22);
            }
            finally { DebugExitRule(GrammarFileName, "op_halt"); }
            return retval;

        }
        // $ANTLR end "op_halt"

        partial void EnterRule_op_inc();
        partial void LeaveRule_op_inc();

        // $ANTLR start "op_inc"
        // GBX.g:143:1: op_inc : INST_INC ^ ( RR_BC | RR_DE | RR_HL | RR_SP | r8 | rr_ref_hl ) ;
        [GrammarRule("op_inc")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_inc()
        {
            EnterRule_op_inc();
            EnterRule("op_inc", 22);
            TraceIn("op_inc", 22);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_INC111 = default(IToken);
            IToken RR_BC112 = default(IToken);
            IToken RR_DE113 = default(IToken);
            IToken RR_HL114 = default(IToken);
            IToken RR_SP115 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_INC111_tree = default(CommonTree);
            CommonTree RR_BC112_tree = default(CommonTree);
            CommonTree RR_DE113_tree = default(CommonTree);
            CommonTree RR_HL114_tree = default(CommonTree);
            CommonTree RR_SP115_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_inc");
                DebugLocation(143, 59);
                try
                {
                    // GBX.g:143:10: ( INST_INC ^ ( RR_BC | RR_DE | RR_HL | RR_SP | r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:143:12: INST_INC ^ ( RR_BC | RR_DE | RR_HL | RR_SP | r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(143, 20);
                        INST_INC111 = (IToken)Match(input, INST_INC, Follow._INST_INC_in_op_inc921);
                        INST_INC111_tree = (CommonTree)adaptor.Create(INST_INC111);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_INC111_tree, root_0);
                        DebugLocation(143, 22);
                        // GBX.g:143:22: ( RR_BC | RR_DE | RR_HL | RR_SP | r8 | rr_ref_hl )
                        int alt17 = 6;
                        try
                        {
                            DebugEnterSubRule(17);
                            try
                            {
                                DebugEnterDecision(17, false);
                                switch (input.LA(1))
                                {
                                    case RR_BC:
                                        {
                                            alt17 = 1;
                                        }
                                        break;
                                    case RR_DE:
                                        {
                                            alt17 = 2;
                                        }
                                        break;
                                    case RR_HL:
                                        {
                                            alt17 = 3;
                                        }
                                        break;
                                    case RR_SP:
                                        {
                                            alt17 = 4;
                                        }
                                        break;
                                    case REG_A:
                                    case REG_B:
                                    case REG_C:
                                    case REG_D:
                                    case REG_E:
                                    case REG_H:
                                    case REG_L:
                                        {
                                            alt17 = 5;
                                        }
                                        break;
                                    case LEFT_BRACKET:
                                        {
                                            alt17 = 6;
                                        }
                                        break;
                                    default:
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                }

                            }
                            finally { DebugExitDecision(17); }
                            switch (alt17)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:143:23: RR_BC
                                    {
                                        DebugLocation(143, 23);
                                        RR_BC112 = (IToken)Match(input, RR_BC, Follow._RR_BC_in_op_inc925);
                                        RR_BC112_tree = (CommonTree)adaptor.Create(RR_BC112);
                                        adaptor.AddChild(root_0, RR_BC112_tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:143:29: RR_DE
                                    {
                                        DebugLocation(143, 29);
                                        RR_DE113 = (IToken)Match(input, RR_DE, Follow._RR_DE_in_op_inc927);
                                        RR_DE113_tree = (CommonTree)adaptor.Create(RR_DE113);
                                        adaptor.AddChild(root_0, RR_DE113_tree);

                                    }
                                    break;
                                case 3:
                                    DebugEnterAlt(3);
                                    // GBX.g:143:35: RR_HL
                                    {
                                        DebugLocation(143, 35);
                                        RR_HL114 = (IToken)Match(input, RR_HL, Follow._RR_HL_in_op_inc929);
                                        RR_HL114_tree = (CommonTree)adaptor.Create(RR_HL114);
                                        adaptor.AddChild(root_0, RR_HL114_tree);

                                    }
                                    break;
                                case 4:
                                    DebugEnterAlt(4);
                                    // GBX.g:143:41: RR_SP
                                    {
                                        DebugLocation(143, 41);
                                        RR_SP115 = (IToken)Match(input, RR_SP, Follow._RR_SP_in_op_inc931);
                                        RR_SP115_tree = (CommonTree)adaptor.Create(RR_SP115);
                                        adaptor.AddChild(root_0, RR_SP115_tree);

                                    }
                                    break;
                                case 5:
                                    DebugEnterAlt(5);
                                    // GBX.g:143:47: r8
                                    {
                                        DebugLocation(143, 47);
                                        PushFollow(Follow._r8_in_op_inc933);
                                        r8116 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8116.Tree);

                                    }
                                    break;
                                case 6:
                                    DebugEnterAlt(6);
                                    // GBX.g:143:50: rr_ref_hl
                                    {
                                        DebugLocation(143, 50);
                                        PushFollow(Follow._rr_ref_hl_in_op_inc935);
                                        rr_ref_hl117 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl117.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(17); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_inc", 22);
                    LeaveRule("op_inc", 22);
                    LeaveRule_op_inc();
                }
                DebugLocation(143, 59);
            }
            finally { DebugExitRule(GrammarFileName, "op_inc"); }
            return retval;

        }
        // $ANTLR end "op_inc"

        partial void EnterRule_op_jp();
        partial void LeaveRule_op_jp();

        // $ANTLR start "op_jp"
        // GBX.g:144:1: op_jp : INST_JP ^ ( ( ( cond_opt COMMA !)? ( ID | local_label ) ) | RR_HL ) ;
        [GrammarRule("op_jp")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_jp()
        {
            EnterRule_op_jp();
            EnterRule("op_jp", 23);
            TraceIn("op_jp", 23);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_JP118 = default(IToken);
            IToken COMMA120 = default(IToken);
            IToken ID121 = default(IToken);
            IToken RR_HL123 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> cond_opt119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> local_label122 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_JP118_tree = default(CommonTree);
            CommonTree COMMA120_tree = default(CommonTree);
            CommonTree ID121_tree = default(CommonTree);
            CommonTree RR_HL123_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_jp");
                DebugLocation(144, 64);
                try
                {
                    // GBX.g:144:9: ( INST_JP ^ ( ( ( cond_opt COMMA !)? ( ID | local_label ) ) | RR_HL ) )
                    DebugEnterAlt(1);
                    // GBX.g:144:11: INST_JP ^ ( ( ( cond_opt COMMA !)? ( ID | local_label ) ) | RR_HL )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(144, 18);
                        INST_JP118 = (IToken)Match(input, INST_JP, Follow._INST_JP_in_op_jp945);
                        INST_JP118_tree = (CommonTree)adaptor.Create(INST_JP118);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_JP118_tree, root_0);
                        DebugLocation(144, 20);
                        // GBX.g:144:20: ( ( ( cond_opt COMMA !)? ( ID | local_label ) ) | RR_HL )
                        int alt20 = 2;
                        try
                        {
                            DebugEnterSubRule(20);
                            try
                            {
                                DebugEnterDecision(20, false);
                                int LA20_0 = input.LA(1);

                                if (((LA20_0 >= CC_NC && LA20_0 <= CC_Z) || LA20_0 == ID || LA20_0 == REG_C || LA20_0 == 147))
                                {
                                    alt20 = 1;
                                }
                                else if ((LA20_0 == RR_HL))
                                {
                                    alt20 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(20); }
                            switch (alt20)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:144:21: ( ( cond_opt COMMA !)? ( ID | local_label ) )
                                    {
                                        DebugLocation(144, 21);
                                        // GBX.g:144:21: ( ( cond_opt COMMA !)? ( ID | local_label ) )
                                        DebugEnterAlt(1);
                                        // GBX.g:144:22: ( cond_opt COMMA !)? ( ID | local_label )
                                        {
                                            DebugLocation(144, 22);
                                            // GBX.g:144:22: ( cond_opt COMMA !)?
                                            int alt18 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(18);
                                                try
                                                {
                                                    DebugEnterDecision(18, false);
                                                    int LA18_0 = input.LA(1);

                                                    if (((LA18_0 >= CC_NC && LA18_0 <= CC_Z) || LA18_0 == REG_C))
                                                    {
                                                        alt18 = 1;
                                                    }
                                                }
                                                finally { DebugExitDecision(18); }
                                                switch (alt18)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // GBX.g:144:23: cond_opt COMMA !
                                                        {
                                                            DebugLocation(144, 23);
                                                            PushFollow(Follow._cond_opt_in_op_jp951);
                                                            cond_opt119 = cond_opt();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, cond_opt119.Tree);
                                                            DebugLocation(144, 37);
                                                            COMMA120 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_jp953);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(18); }

                                            DebugLocation(144, 41);
                                            // GBX.g:144:41: ( ID | local_label )
                                            int alt19 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(19);
                                                try
                                                {
                                                    DebugEnterDecision(19, false);
                                                    int LA19_0 = input.LA(1);

                                                    if ((LA19_0 == ID))
                                                    {
                                                        alt19 = 1;
                                                    }
                                                    else if ((LA19_0 == 147))
                                                    {
                                                        alt19 = 2;
                                                    }
                                                    else
                                                    {
                                                        NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
                                                        DebugRecognitionException(nvae);
                                                        throw nvae;
                                                    }
                                                }
                                                finally { DebugExitDecision(19); }
                                                switch (alt19)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // GBX.g:144:42: ID
                                                        {
                                                            DebugLocation(144, 42);
                                                            ID121 = (IToken)Match(input, ID, Follow._ID_in_op_jp959);
                                                            ID121_tree = (CommonTree)adaptor.Create(ID121);
                                                            adaptor.AddChild(root_0, ID121_tree);

                                                        }
                                                        break;
                                                    case 2:
                                                        DebugEnterAlt(2);
                                                        // GBX.g:144:45: local_label
                                                        {
                                                            DebugLocation(144, 45);
                                                            PushFollow(Follow._local_label_in_op_jp961);
                                                            local_label122 = local_label();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, local_label122.Tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(19); }


                                        }


                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:144:59: RR_HL
                                    {
                                        DebugLocation(144, 59);
                                        RR_HL123 = (IToken)Match(input, RR_HL, Follow._RR_HL_in_op_jp965);
                                        RR_HL123_tree = (CommonTree)adaptor.Create(RR_HL123);
                                        adaptor.AddChild(root_0, RR_HL123_tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(20); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_jp", 23);
                    LeaveRule("op_jp", 23);
                    LeaveRule_op_jp();
                }
                DebugLocation(144, 64);
            }
            finally { DebugExitRule(GrammarFileName, "op_jp"); }
            return retval;

        }
        // $ANTLR end "op_jp"

        partial void EnterRule_op_jr();
        partial void LeaveRule_op_jr();

        // $ANTLR start "op_jr"
        // GBX.g:145:1: op_jr : INST_JR ^ ( cond_opt COMMA !)? ( ID | local_label ) ;
        [GrammarRule("op_jr")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_jr()
        {
            EnterRule_op_jr();
            EnterRule("op_jr", 24);
            TraceIn("op_jr", 24);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_JR124 = default(IToken);
            IToken COMMA126 = default(IToken);
            IToken ID127 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> cond_opt125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> local_label128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_JR124_tree = default(CommonTree);
            CommonTree COMMA126_tree = default(CommonTree);
            CommonTree ID127_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_jr");
                DebugLocation(145, 54);
                try
                {
                    // GBX.g:145:9: ( INST_JR ^ ( cond_opt COMMA !)? ( ID | local_label ) )
                    DebugEnterAlt(1);
                    // GBX.g:145:11: INST_JR ^ ( cond_opt COMMA !)? ( ID | local_label )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(145, 18);
                        INST_JR124 = (IToken)Match(input, INST_JR, Follow._INST_JR_in_op_jr975);
                        INST_JR124_tree = (CommonTree)adaptor.Create(INST_JR124);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_JR124_tree, root_0);
                        DebugLocation(145, 20);
                        // GBX.g:145:20: ( cond_opt COMMA !)?
                        int alt21 = 2;
                        try
                        {
                            DebugEnterSubRule(21);
                            try
                            {
                                DebugEnterDecision(21, false);
                                int LA21_0 = input.LA(1);

                                if (((LA21_0 >= CC_NC && LA21_0 <= CC_Z) || LA21_0 == REG_C))
                                {
                                    alt21 = 1;
                                }
                            }
                            finally { DebugExitDecision(21); }
                            switch (alt21)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:145:21: cond_opt COMMA !
                                    {
                                        DebugLocation(145, 21);
                                        PushFollow(Follow._cond_opt_in_op_jr979);
                                        cond_opt125 = cond_opt();
                                        PopFollow();

                                        adaptor.AddChild(root_0, cond_opt125.Tree);
                                        DebugLocation(145, 35);
                                        COMMA126 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_jr981);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(21); }

                        DebugLocation(145, 39);
                        // GBX.g:145:39: ( ID | local_label )
                        int alt22 = 2;
                        try
                        {
                            DebugEnterSubRule(22);
                            try
                            {
                                DebugEnterDecision(22, false);
                                int LA22_0 = input.LA(1);

                                if ((LA22_0 == ID))
                                {
                                    alt22 = 1;
                                }
                                else if ((LA22_0 == 147))
                                {
                                    alt22 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(22); }
                            switch (alt22)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:145:40: ID
                                    {
                                        DebugLocation(145, 40);
                                        ID127 = (IToken)Match(input, ID, Follow._ID_in_op_jr987);
                                        ID127_tree = (CommonTree)adaptor.Create(ID127);
                                        adaptor.AddChild(root_0, ID127_tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:145:43: local_label
                                    {
                                        DebugLocation(145, 43);
                                        PushFollow(Follow._local_label_in_op_jr989);
                                        local_label128 = local_label();
                                        PopFollow();

                                        adaptor.AddChild(root_0, local_label128.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(22); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_jr", 24);
                    LeaveRule("op_jr", 24);
                    LeaveRule_op_jr();
                }
                DebugLocation(145, 54);
            }
            finally { DebugExitRule(GrammarFileName, "op_jr"); }
            return retval;

        }
        // $ANTLR end "op_jr"

        partial void EnterRule_op_ldhl();
        partial void LeaveRule_op_ldhl();

        // $ANTLR start "op_ldhl"
        // GBX.g:146:1: op_ldhl : INST_LDHL ^ RR_SP COMMA ! expression ;
        [GrammarRule("op_ldhl")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_ldhl()
        {
            EnterRule_op_ldhl();
            EnterRule("op_ldhl", 25);
            TraceIn("op_ldhl", 25);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_LDHL129 = default(IToken);
            IToken RR_SP130 = default(IToken);
            IToken COMMA131 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_LDHL129_tree = default(CommonTree);
            CommonTree RR_SP130_tree = default(CommonTree);
            CommonTree COMMA131_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_ldhl");
                DebugLocation(146, 46);
                try
                {
                    // GBX.g:146:11: ( INST_LDHL ^ RR_SP COMMA ! expression )
                    DebugEnterAlt(1);
                    // GBX.g:146:13: INST_LDHL ^ RR_SP COMMA ! expression
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(146, 22);
                        INST_LDHL129 = (IToken)Match(input, INST_LDHL, Follow._INST_LDHL_in_op_ldhl999);
                        INST_LDHL129_tree = (CommonTree)adaptor.Create(INST_LDHL129);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_LDHL129_tree, root_0);
                        DebugLocation(146, 24);
                        RR_SP130 = (IToken)Match(input, RR_SP, Follow._RR_SP_in_op_ldhl1002);
                        RR_SP130_tree = (CommonTree)adaptor.Create(RR_SP130);
                        adaptor.AddChild(root_0, RR_SP130_tree);
                        DebugLocation(146, 35);
                        COMMA131 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ldhl1004);
                        DebugLocation(146, 37);
                        PushFollow(Follow._expression_in_op_ldhl1007);
                        expression132 = expression();
                        PopFollow();

                        adaptor.AddChild(root_0, expression132.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_ldhl", 25);
                    LeaveRule("op_ldhl", 25);
                    LeaveRule_op_ldhl();
                }
                DebugLocation(146, 46);
            }
            finally { DebugExitRule(GrammarFileName, "op_ldhl"); }
            return retval;

        }
        // $ANTLR end "op_ldhl"

        partial void EnterRule_op_ldio();
        partial void LeaveRule_op_ldio();

        // $ANTLR start "op_ldio"
        // GBX.g:147:1: op_ldio : INST_LDIO ^ ( ( mem_ref_xp COMMA ! REG_A ) | ( REG_A COMMA ! mem_ref_xp ) ) ;
        [GrammarRule("op_ldio")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_ldio()
        {
            EnterRule_op_ldio();
            EnterRule("op_ldio", 26);
            TraceIn("op_ldio", 26);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_LDIO133 = default(IToken);
            IToken COMMA135 = default(IToken);
            IToken REG_A136 = default(IToken);
            IToken REG_A137 = default(IToken);
            IToken COMMA138 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> mem_ref_xp134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> mem_ref_xp139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_LDIO133_tree = default(CommonTree);
            CommonTree COMMA135_tree = default(CommonTree);
            CommonTree REG_A136_tree = default(CommonTree);
            CommonTree REG_A137_tree = default(CommonTree);
            CommonTree COMMA138_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_ldio");
                DebugLocation(147, 76);
                try
                {
                    // GBX.g:147:11: ( INST_LDIO ^ ( ( mem_ref_xp COMMA ! REG_A ) | ( REG_A COMMA ! mem_ref_xp ) ) )
                    DebugEnterAlt(1);
                    // GBX.g:147:13: INST_LDIO ^ ( ( mem_ref_xp COMMA ! REG_A ) | ( REG_A COMMA ! mem_ref_xp ) )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(147, 22);
                        INST_LDIO133 = (IToken)Match(input, INST_LDIO, Follow._INST_LDIO_in_op_ldio1016);
                        INST_LDIO133_tree = (CommonTree)adaptor.Create(INST_LDIO133);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_LDIO133_tree, root_0);
                        DebugLocation(147, 24);
                        // GBX.g:147:24: ( ( mem_ref_xp COMMA ! REG_A ) | ( REG_A COMMA ! mem_ref_xp ) )
                        int alt23 = 2;
                        try
                        {
                            DebugEnterSubRule(23);
                            try
                            {
                                DebugEnterDecision(23, false);
                                int LA23_0 = input.LA(1);

                                if ((LA23_0 == LEFT_BRACKET))
                                {
                                    alt23 = 1;
                                }
                                else if ((LA23_0 == REG_A))
                                {
                                    alt23 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(23); }
                            switch (alt23)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:147:25: ( mem_ref_xp COMMA ! REG_A )
                                    {
                                        DebugLocation(147, 25);
                                        // GBX.g:147:25: ( mem_ref_xp COMMA ! REG_A )
                                        DebugEnterAlt(1);
                                        // GBX.g:147:26: mem_ref_xp COMMA ! REG_A
                                        {
                                            DebugLocation(147, 26);
                                            PushFollow(Follow._mem_ref_xp_in_op_ldio1021);
                                            mem_ref_xp134 = mem_ref_xp();
                                            PopFollow();

                                            adaptor.AddChild(root_0, mem_ref_xp134.Tree);
                                            DebugLocation(147, 42);
                                            COMMA135 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ldio1023);
                                            DebugLocation(147, 44);
                                            REG_A136 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_ldio1026);
                                            REG_A136_tree = (CommonTree)adaptor.Create(REG_A136);
                                            adaptor.AddChild(root_0, REG_A136_tree);

                                        }


                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:147:51: ( REG_A COMMA ! mem_ref_xp )
                                    {
                                        DebugLocation(147, 51);
                                        // GBX.g:147:51: ( REG_A COMMA ! mem_ref_xp )
                                        DebugEnterAlt(1);
                                        // GBX.g:147:52: REG_A COMMA ! mem_ref_xp
                                        {
                                            DebugLocation(147, 52);
                                            REG_A137 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_ldio1030);
                                            REG_A137_tree = (CommonTree)adaptor.Create(REG_A137);
                                            adaptor.AddChild(root_0, REG_A137_tree);
                                            DebugLocation(147, 63);
                                            COMMA138 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ldio1032);
                                            DebugLocation(147, 65);
                                            PushFollow(Follow._mem_ref_xp_in_op_ldio1035);
                                            mem_ref_xp139 = mem_ref_xp();
                                            PopFollow();

                                            adaptor.AddChild(root_0, mem_ref_xp139.Tree);

                                        }


                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(23); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_ldio", 26);
                    LeaveRule("op_ldio", 26);
                    LeaveRule_op_ldio();
                }
                DebugLocation(147, 76);
            }
            finally { DebugExitRule(GrammarFileName, "op_ldio"); }
            return retval;

        }
        // $ANTLR end "op_ldio"

        partial void EnterRule_op_ldd();
        partial void LeaveRule_op_ldd();

        // $ANTLR start "op_ldd"
        // GBX.g:148:1: op_ldd : INST_LDD ^ ( ( rr_ref_hl COMMA ! REG_A ) | ( REG_A COMMA ! rr_ref_hl ) ) ;
        [GrammarRule("op_ldd")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_ldd()
        {
            EnterRule_op_ldd();
            EnterRule("op_ldd", 27);
            TraceIn("op_ldd", 27);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_LDD140 = default(IToken);
            IToken COMMA142 = default(IToken);
            IToken REG_A143 = default(IToken);
            IToken REG_A144 = default(IToken);
            IToken COMMA145 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_LDD140_tree = default(CommonTree);
            CommonTree COMMA142_tree = default(CommonTree);
            CommonTree REG_A143_tree = default(CommonTree);
            CommonTree REG_A144_tree = default(CommonTree);
            CommonTree COMMA145_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_ldd");
                DebugLocation(148, 72);
                try
                {
                    // GBX.g:148:10: ( INST_LDD ^ ( ( rr_ref_hl COMMA ! REG_A ) | ( REG_A COMMA ! rr_ref_hl ) ) )
                    DebugEnterAlt(1);
                    // GBX.g:148:12: INST_LDD ^ ( ( rr_ref_hl COMMA ! REG_A ) | ( REG_A COMMA ! rr_ref_hl ) )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(148, 20);
                        INST_LDD140 = (IToken)Match(input, INST_LDD, Follow._INST_LDD_in_op_ldd1046);
                        INST_LDD140_tree = (CommonTree)adaptor.Create(INST_LDD140);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_LDD140_tree, root_0);
                        DebugLocation(148, 22);
                        // GBX.g:148:22: ( ( rr_ref_hl COMMA ! REG_A ) | ( REG_A COMMA ! rr_ref_hl ) )
                        int alt24 = 2;
                        try
                        {
                            DebugEnterSubRule(24);
                            try
                            {
                                DebugEnterDecision(24, false);
                                int LA24_0 = input.LA(1);

                                if ((LA24_0 == LEFT_BRACKET))
                                {
                                    alt24 = 1;
                                }
                                else if ((LA24_0 == REG_A))
                                {
                                    alt24 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(24); }
                            switch (alt24)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:148:23: ( rr_ref_hl COMMA ! REG_A )
                                    {
                                        DebugLocation(148, 23);
                                        // GBX.g:148:23: ( rr_ref_hl COMMA ! REG_A )
                                        DebugEnterAlt(1);
                                        // GBX.g:148:24: rr_ref_hl COMMA ! REG_A
                                        {
                                            DebugLocation(148, 24);
                                            PushFollow(Follow._rr_ref_hl_in_op_ldd1051);
                                            rr_ref_hl141 = rr_ref_hl();
                                            PopFollow();

                                            adaptor.AddChild(root_0, rr_ref_hl141.Tree);
                                            DebugLocation(148, 39);
                                            COMMA142 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ldd1053);
                                            DebugLocation(148, 41);
                                            REG_A143 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_ldd1056);
                                            REG_A143_tree = (CommonTree)adaptor.Create(REG_A143);
                                            adaptor.AddChild(root_0, REG_A143_tree);

                                        }


                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:148:48: ( REG_A COMMA ! rr_ref_hl )
                                    {
                                        DebugLocation(148, 48);
                                        // GBX.g:148:48: ( REG_A COMMA ! rr_ref_hl )
                                        DebugEnterAlt(1);
                                        // GBX.g:148:49: REG_A COMMA ! rr_ref_hl
                                        {
                                            DebugLocation(148, 49);
                                            REG_A144 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_ldd1060);
                                            REG_A144_tree = (CommonTree)adaptor.Create(REG_A144);
                                            adaptor.AddChild(root_0, REG_A144_tree);
                                            DebugLocation(148, 60);
                                            COMMA145 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ldd1062);
                                            DebugLocation(148, 62);
                                            PushFollow(Follow._rr_ref_hl_in_op_ldd1065);
                                            rr_ref_hl146 = rr_ref_hl();
                                            PopFollow();

                                            adaptor.AddChild(root_0, rr_ref_hl146.Tree);

                                        }


                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(24); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_ldd", 27);
                    LeaveRule("op_ldd", 27);
                    LeaveRule_op_ldd();
                }
                DebugLocation(148, 72);
            }
            finally { DebugExitRule(GrammarFileName, "op_ldd"); }
            return retval;

        }
        // $ANTLR end "op_ldd"

        partial void EnterRule_op_ldi();
        partial void LeaveRule_op_ldi();

        // $ANTLR start "op_ldi"
        // GBX.g:149:1: op_ldi : INST_LDI ^ ( ( rr_ref_hl COMMA ! REG_A ) | ( REG_A COMMA ! rr_ref_hl ) ) ;
        [GrammarRule("op_ldi")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_ldi()
        {
            EnterRule_op_ldi();
            EnterRule("op_ldi", 28);
            TraceIn("op_ldi", 28);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_LDI147 = default(IToken);
            IToken COMMA149 = default(IToken);
            IToken REG_A150 = default(IToken);
            IToken REG_A151 = default(IToken);
            IToken COMMA152 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_LDI147_tree = default(CommonTree);
            CommonTree COMMA149_tree = default(CommonTree);
            CommonTree REG_A150_tree = default(CommonTree);
            CommonTree REG_A151_tree = default(CommonTree);
            CommonTree COMMA152_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_ldi");
                DebugLocation(149, 72);
                try
                {
                    // GBX.g:149:10: ( INST_LDI ^ ( ( rr_ref_hl COMMA ! REG_A ) | ( REG_A COMMA ! rr_ref_hl ) ) )
                    DebugEnterAlt(1);
                    // GBX.g:149:12: INST_LDI ^ ( ( rr_ref_hl COMMA ! REG_A ) | ( REG_A COMMA ! rr_ref_hl ) )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(149, 20);
                        INST_LDI147 = (IToken)Match(input, INST_LDI, Follow._INST_LDI_in_op_ldi1076);
                        INST_LDI147_tree = (CommonTree)adaptor.Create(INST_LDI147);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_LDI147_tree, root_0);
                        DebugLocation(149, 22);
                        // GBX.g:149:22: ( ( rr_ref_hl COMMA ! REG_A ) | ( REG_A COMMA ! rr_ref_hl ) )
                        int alt25 = 2;
                        try
                        {
                            DebugEnterSubRule(25);
                            try
                            {
                                DebugEnterDecision(25, false);
                                int LA25_0 = input.LA(1);

                                if ((LA25_0 == LEFT_BRACKET))
                                {
                                    alt25 = 1;
                                }
                                else if ((LA25_0 == REG_A))
                                {
                                    alt25 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(25); }
                            switch (alt25)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:149:23: ( rr_ref_hl COMMA ! REG_A )
                                    {
                                        DebugLocation(149, 23);
                                        // GBX.g:149:23: ( rr_ref_hl COMMA ! REG_A )
                                        DebugEnterAlt(1);
                                        // GBX.g:149:24: rr_ref_hl COMMA ! REG_A
                                        {
                                            DebugLocation(149, 24);
                                            PushFollow(Follow._rr_ref_hl_in_op_ldi1081);
                                            rr_ref_hl148 = rr_ref_hl();
                                            PopFollow();

                                            adaptor.AddChild(root_0, rr_ref_hl148.Tree);
                                            DebugLocation(149, 39);
                                            COMMA149 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ldi1083);
                                            DebugLocation(149, 41);
                                            REG_A150 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_ldi1086);
                                            REG_A150_tree = (CommonTree)adaptor.Create(REG_A150);
                                            adaptor.AddChild(root_0, REG_A150_tree);

                                        }


                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:149:48: ( REG_A COMMA ! rr_ref_hl )
                                    {
                                        DebugLocation(149, 48);
                                        // GBX.g:149:48: ( REG_A COMMA ! rr_ref_hl )
                                        DebugEnterAlt(1);
                                        // GBX.g:149:49: REG_A COMMA ! rr_ref_hl
                                        {
                                            DebugLocation(149, 49);
                                            REG_A151 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_ldi1090);
                                            REG_A151_tree = (CommonTree)adaptor.Create(REG_A151);
                                            adaptor.AddChild(root_0, REG_A151_tree);
                                            DebugLocation(149, 60);
                                            COMMA152 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ldi1092);
                                            DebugLocation(149, 62);
                                            PushFollow(Follow._rr_ref_hl_in_op_ldi1095);
                                            rr_ref_hl153 = rr_ref_hl();
                                            PopFollow();

                                            adaptor.AddChild(root_0, rr_ref_hl153.Tree);

                                        }


                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(25); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_ldi", 28);
                    LeaveRule("op_ldi", 28);
                    LeaveRule_op_ldi();
                }
                DebugLocation(149, 72);
            }
            finally { DebugExitRule(GrammarFileName, "op_ldi"); }
            return retval;

        }
        // $ANTLR end "op_ldi"

        partial void EnterRule_op_ld();
        partial void LeaveRule_op_ld();

        // $ANTLR start "op_ld"
        // GBX.g:150:1: op_ld : INST_LD ^ ( ( REG_A COMMA ! ( r8 | expression | mem_ref ) ) | ( ( REG_B | REG_C | REG_D | REG_E | REG_H | REG_L ) COMMA ! arith_opt ) | ( ( RR_BC | RR_DE | RR_HL ) COMMA ! expression ) | ( RR_SP COMMA ! ( RR_HL | expression ) ) | ( ( rr_ref_c | rr_ref_bc | rr_ref_de ) COMMA ! REG_A ) | ( rr_ref_hl COMMA ! ( r8 | expression ) ) | ( mem_ref_xp COMMA ! ( REG_A | RR_SP ) ) ) ;
        [GrammarRule("op_ld")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_ld()
        {
            EnterRule_op_ld();
            EnterRule("op_ld", 29);
            TraceIn("op_ld", 29);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_LD154 = default(IToken);
            IToken REG_A155 = default(IToken);
            IToken COMMA156 = default(IToken);
            IToken set160 = default(IToken);
            IToken COMMA161 = default(IToken);
            IToken set163 = default(IToken);
            IToken COMMA164 = default(IToken);
            IToken RR_SP166 = default(IToken);
            IToken COMMA167 = default(IToken);
            IToken RR_HL168 = default(IToken);
            IToken COMMA173 = default(IToken);
            IToken REG_A174 = default(IToken);
            IToken COMMA176 = default(IToken);
            IToken COMMA180 = default(IToken);
            IToken set181 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> expression158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> mem_ref159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> expression165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> expression169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_c170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_bc171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_de172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> r8177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> expression178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> mem_ref_xp179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_LD154_tree = default(CommonTree);
            CommonTree REG_A155_tree = default(CommonTree);
            CommonTree COMMA156_tree = default(CommonTree);
            CommonTree set160_tree = default(CommonTree);
            CommonTree COMMA161_tree = default(CommonTree);
            CommonTree set163_tree = default(CommonTree);
            CommonTree COMMA164_tree = default(CommonTree);
            CommonTree RR_SP166_tree = default(CommonTree);
            CommonTree COMMA167_tree = default(CommonTree);
            CommonTree RR_HL168_tree = default(CommonTree);
            CommonTree COMMA173_tree = default(CommonTree);
            CommonTree REG_A174_tree = default(CommonTree);
            CommonTree COMMA176_tree = default(CommonTree);
            CommonTree COMMA180_tree = default(CommonTree);
            CommonTree set181_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_ld");
                DebugLocation(150, 40);
                try
                {
                    // GBX.g:150:9: ( INST_LD ^ ( ( REG_A COMMA ! ( r8 | expression | mem_ref ) ) | ( ( REG_B | REG_C | REG_D | REG_E | REG_H | REG_L ) COMMA ! arith_opt ) | ( ( RR_BC | RR_DE | RR_HL ) COMMA ! expression ) | ( RR_SP COMMA ! ( RR_HL | expression ) ) | ( ( rr_ref_c | rr_ref_bc | rr_ref_de ) COMMA ! REG_A ) | ( rr_ref_hl COMMA ! ( r8 | expression ) ) | ( mem_ref_xp COMMA ! ( REG_A | RR_SP ) ) ) )
                    DebugEnterAlt(1);
                    // GBX.g:150:11: INST_LD ^ ( ( REG_A COMMA ! ( r8 | expression | mem_ref ) ) | ( ( REG_B | REG_C | REG_D | REG_E | REG_H | REG_L ) COMMA ! arith_opt ) | ( ( RR_BC | RR_DE | RR_HL ) COMMA ! expression ) | ( RR_SP COMMA ! ( RR_HL | expression ) ) | ( ( rr_ref_c | rr_ref_bc | rr_ref_de ) COMMA ! REG_A ) | ( rr_ref_hl COMMA ! ( r8 | expression ) ) | ( mem_ref_xp COMMA ! ( REG_A | RR_SP ) ) )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(150, 18);
                        INST_LD154 = (IToken)Match(input, INST_LD, Follow._INST_LD_in_op_ld1106);
                        INST_LD154_tree = (CommonTree)adaptor.Create(INST_LD154);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_LD154_tree, root_0);
                        DebugLocation(150, 20);
                        // GBX.g:150:20: ( ( REG_A COMMA ! ( r8 | expression | mem_ref ) ) | ( ( REG_B | REG_C | REG_D | REG_E | REG_H | REG_L ) COMMA ! arith_opt ) | ( ( RR_BC | RR_DE | RR_HL ) COMMA ! expression ) | ( RR_SP COMMA ! ( RR_HL | expression ) ) | ( ( rr_ref_c | rr_ref_bc | rr_ref_de ) COMMA ! REG_A ) | ( rr_ref_hl COMMA ! ( r8 | expression ) ) | ( mem_ref_xp COMMA ! ( REG_A | RR_SP ) ) )
                        int alt30 = 7;
                        try
                        {
                            DebugEnterSubRule(30);
                            try
                            {
                                DebugEnterDecision(30, false);
                                switch (input.LA(1))
                                {
                                    case REG_A:
                                        {
                                            alt30 = 1;
                                        }
                                        break;
                                    case REG_B:
                                    case REG_C:
                                    case REG_D:
                                    case REG_E:
                                    case REG_H:
                                    case REG_L:
                                        {
                                            alt30 = 2;
                                        }
                                        break;
                                    case RR_BC:
                                    case RR_DE:
                                    case RR_HL:
                                        {
                                            alt30 = 3;
                                        }
                                        break;
                                    case RR_SP:
                                        {
                                            alt30 = 4;
                                        }
                                        break;
                                    case LEFT_BRACKET:
                                        {
                                            switch (input.LA(2))
                                            {
                                                case REG_C:
                                                case RR_BC:
                                                case RR_DE:
                                                    {
                                                        alt30 = 5;
                                                    }
                                                    break;
                                                case RR_HL:
                                                    {
                                                        alt30 = 6;
                                                    }
                                                    break;
                                                case BANG_MARK:
                                                case ID:
                                                case LEFT_PARENS:
                                                case MINUS_MARK:
                                                case NUMBER:
                                                case TILDE_MARK:
                                                    {
                                                        alt30 = 7;
                                                    }
                                                    break;
                                                default:
                                                    {
                                                        NoViableAltException nvae = new NoViableAltException("", 30, 5, input);
                                                        DebugRecognitionException(nvae);
                                                        throw nvae;
                                                    }
                                            }

                                        }
                                        break;
                                    default:
                                        {
                                            NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
                                            DebugRecognitionException(nvae);
                                            throw nvae;
                                        }
                                }

                            }
                            finally { DebugExitDecision(30); }
                            switch (alt30)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:150:21: ( REG_A COMMA ! ( r8 | expression | mem_ref ) )
                                    {
                                        DebugLocation(150, 21);
                                        // GBX.g:150:21: ( REG_A COMMA ! ( r8 | expression | mem_ref ) )
                                        DebugEnterAlt(1);
                                        // GBX.g:150:22: REG_A COMMA ! ( r8 | expression | mem_ref )
                                        {
                                            DebugLocation(150, 22);
                                            REG_A155 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_ld1111);
                                            REG_A155_tree = (CommonTree)adaptor.Create(REG_A155);
                                            adaptor.AddChild(root_0, REG_A155_tree);
                                            DebugLocation(150, 33);
                                            COMMA156 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ld1113);
                                            DebugLocation(150, 35);
                                            // GBX.g:150:35: ( r8 | expression | mem_ref )
                                            int alt26 = 3;
                                            try
                                            {
                                                DebugEnterSubRule(26);
                                                try
                                                {
                                                    DebugEnterDecision(26, false);
                                                    switch (input.LA(1))
                                                    {
                                                        case REG_A:
                                                        case REG_B:
                                                        case REG_C:
                                                        case REG_D:
                                                        case REG_E:
                                                        case REG_H:
                                                        case REG_L:
                                                            {
                                                                alt26 = 1;
                                                            }
                                                            break;
                                                        case BANG_MARK:
                                                        case ID:
                                                        case LEFT_PARENS:
                                                        case MINUS_MARK:
                                                        case NUMBER:
                                                        case TILDE_MARK:
                                                            {
                                                                alt26 = 2;
                                                            }
                                                            break;
                                                        case LEFT_BRACKET:
                                                            {
                                                                alt26 = 3;
                                                            }
                                                            break;
                                                        default:
                                                            {
                                                                NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
                                                                DebugRecognitionException(nvae);
                                                                throw nvae;
                                                            }
                                                    }

                                                }
                                                finally { DebugExitDecision(26); }
                                                switch (alt26)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // GBX.g:150:36: r8
                                                        {
                                                            DebugLocation(150, 36);
                                                            PushFollow(Follow._r8_in_op_ld1117);
                                                            r8157 = r8();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, r8157.Tree);

                                                        }
                                                        break;
                                                    case 2:
                                                        DebugEnterAlt(2);
                                                        // GBX.g:150:39: expression
                                                        {
                                                            DebugLocation(150, 39);
                                                            PushFollow(Follow._expression_in_op_ld1119);
                                                            expression158 = expression();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, expression158.Tree);

                                                        }
                                                        break;
                                                    case 3:
                                                        DebugEnterAlt(3);
                                                        // GBX.g:150:50: mem_ref
                                                        {
                                                            DebugLocation(150, 50);
                                                            PushFollow(Follow._mem_ref_in_op_ld1121);
                                                            mem_ref159 = mem_ref();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, mem_ref159.Tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(26); }


                                        }


                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:151:7: ( ( REG_B | REG_C | REG_D | REG_E | REG_H | REG_L ) COMMA ! arith_opt )
                                    {
                                        DebugLocation(151, 7);
                                        // GBX.g:151:7: ( ( REG_B | REG_C | REG_D | REG_E | REG_H | REG_L ) COMMA ! arith_opt )
                                        DebugEnterAlt(1);
                                        // GBX.g:151:8: ( REG_B | REG_C | REG_D | REG_E | REG_H | REG_L ) COMMA ! arith_opt
                                        {
                                            DebugLocation(151, 8);

                                            set160 = (IToken)input.LT(1);
                                            if ((input.LA(1) >= REG_B && input.LA(1) <= REG_L))
                                            {
                                                input.Consume();
                                                adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set160));
                                                state.errorRecovery = false;
                                            }
                                            else
                                            {
                                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                                DebugRecognitionException(mse);
                                                throw mse;
                                            }

                                            DebugLocation(151, 51);
                                            COMMA161 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ld1146);
                                            DebugLocation(151, 53);
                                            PushFollow(Follow._arith_opt_in_op_ld1149);
                                            arith_opt162 = arith_opt();
                                            PopFollow();

                                            adaptor.AddChild(root_0, arith_opt162.Tree);

                                        }


                                    }
                                    break;
                                case 3:
                                    DebugEnterAlt(3);
                                    // GBX.g:152:7: ( ( RR_BC | RR_DE | RR_HL ) COMMA ! expression )
                                    {
                                        DebugLocation(152, 7);
                                        // GBX.g:152:7: ( ( RR_BC | RR_DE | RR_HL ) COMMA ! expression )
                                        DebugEnterAlt(1);
                                        // GBX.g:152:8: ( RR_BC | RR_DE | RR_HL ) COMMA ! expression
                                        {
                                            DebugLocation(152, 8);

                                            set163 = (IToken)input.LT(1);
                                            if ((input.LA(1) >= RR_BC && input.LA(1) <= RR_HL))
                                            {
                                                input.Consume();
                                                adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set163));
                                                state.errorRecovery = false;
                                            }
                                            else
                                            {
                                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                                DebugRecognitionException(mse);
                                                throw mse;
                                            }

                                            DebugLocation(152, 33);
                                            COMMA164 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ld1167);
                                            DebugLocation(152, 35);
                                            PushFollow(Follow._expression_in_op_ld1170);
                                            expression165 = expression();
                                            PopFollow();

                                            adaptor.AddChild(root_0, expression165.Tree);

                                        }


                                    }
                                    break;
                                case 4:
                                    DebugEnterAlt(4);
                                    // GBX.g:153:7: ( RR_SP COMMA ! ( RR_HL | expression ) )
                                    {
                                        DebugLocation(153, 7);
                                        // GBX.g:153:7: ( RR_SP COMMA ! ( RR_HL | expression ) )
                                        DebugEnterAlt(1);
                                        // GBX.g:153:8: RR_SP COMMA ! ( RR_HL | expression )
                                        {
                                            DebugLocation(153, 8);
                                            RR_SP166 = (IToken)Match(input, RR_SP, Follow._RR_SP_in_op_ld1180);
                                            RR_SP166_tree = (CommonTree)adaptor.Create(RR_SP166);
                                            adaptor.AddChild(root_0, RR_SP166_tree);
                                            DebugLocation(153, 19);
                                            COMMA167 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ld1182);
                                            DebugLocation(153, 21);
                                            // GBX.g:153:21: ( RR_HL | expression )
                                            int alt27 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(27);
                                                try
                                                {
                                                    DebugEnterDecision(27, false);
                                                    int LA27_0 = input.LA(1);

                                                    if ((LA27_0 == RR_HL))
                                                    {
                                                        alt27 = 1;
                                                    }
                                                    else if ((LA27_0 == BANG_MARK || LA27_0 == ID || LA27_0 == LEFT_PARENS || LA27_0 == MINUS_MARK || LA27_0 == NUMBER || LA27_0 == TILDE_MARK))
                                                    {
                                                        alt27 = 2;
                                                    }
                                                    else
                                                    {
                                                        NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
                                                        DebugRecognitionException(nvae);
                                                        throw nvae;
                                                    }
                                                }
                                                finally { DebugExitDecision(27); }
                                                switch (alt27)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // GBX.g:153:22: RR_HL
                                                        {
                                                            DebugLocation(153, 22);
                                                            RR_HL168 = (IToken)Match(input, RR_HL, Follow._RR_HL_in_op_ld1186);
                                                            RR_HL168_tree = (CommonTree)adaptor.Create(RR_HL168);
                                                            adaptor.AddChild(root_0, RR_HL168_tree);

                                                        }
                                                        break;
                                                    case 2:
                                                        DebugEnterAlt(2);
                                                        // GBX.g:153:28: expression
                                                        {
                                                            DebugLocation(153, 28);
                                                            PushFollow(Follow._expression_in_op_ld1188);
                                                            expression169 = expression();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, expression169.Tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(27); }


                                        }


                                    }
                                    break;
                                case 5:
                                    DebugEnterAlt(5);
                                    // GBX.g:154:7: ( ( rr_ref_c | rr_ref_bc | rr_ref_de ) COMMA ! REG_A )
                                    {
                                        DebugLocation(154, 7);
                                        // GBX.g:154:7: ( ( rr_ref_c | rr_ref_bc | rr_ref_de ) COMMA ! REG_A )
                                        DebugEnterAlt(1);
                                        // GBX.g:154:8: ( rr_ref_c | rr_ref_bc | rr_ref_de ) COMMA ! REG_A
                                        {
                                            DebugLocation(154, 8);
                                            // GBX.g:154:8: ( rr_ref_c | rr_ref_bc | rr_ref_de )
                                            int alt28 = 3;
                                            try
                                            {
                                                DebugEnterSubRule(28);
                                                try
                                                {
                                                    DebugEnterDecision(28, false);
                                                    int LA28_0 = input.LA(1);

                                                    if ((LA28_0 == LEFT_BRACKET))
                                                    {
                                                        switch (input.LA(2))
                                                        {
                                                            case REG_C:
                                                                {
                                                                    alt28 = 1;
                                                                }
                                                                break;
                                                            case RR_BC:
                                                                {
                                                                    alt28 = 2;
                                                                }
                                                                break;
                                                            case RR_DE:
                                                                {
                                                                    alt28 = 3;
                                                                }
                                                                break;
                                                            default:
                                                                {
                                                                    NoViableAltException nvae = new NoViableAltException("", 28, 1, input);
                                                                    DebugRecognitionException(nvae);
                                                                    throw nvae;
                                                                }
                                                        }

                                                    }
                                                    else
                                                    {
                                                        NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
                                                        DebugRecognitionException(nvae);
                                                        throw nvae;
                                                    }
                                                }
                                                finally { DebugExitDecision(28); }
                                                switch (alt28)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // GBX.g:154:9: rr_ref_c
                                                        {
                                                            DebugLocation(154, 9);
                                                            PushFollow(Follow._rr_ref_c_in_op_ld1200);
                                                            rr_ref_c170 = rr_ref_c();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, rr_ref_c170.Tree);

                                                        }
                                                        break;
                                                    case 2:
                                                        DebugEnterAlt(2);
                                                        // GBX.g:154:18: rr_ref_bc
                                                        {
                                                            DebugLocation(154, 18);
                                                            PushFollow(Follow._rr_ref_bc_in_op_ld1202);
                                                            rr_ref_bc171 = rr_ref_bc();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, rr_ref_bc171.Tree);

                                                        }
                                                        break;
                                                    case 3:
                                                        DebugEnterAlt(3);
                                                        // GBX.g:154:28: rr_ref_de
                                                        {
                                                            DebugLocation(154, 28);
                                                            PushFollow(Follow._rr_ref_de_in_op_ld1204);
                                                            rr_ref_de172 = rr_ref_de();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, rr_ref_de172.Tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(28); }

                                            DebugLocation(154, 44);
                                            COMMA173 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ld1207);
                                            DebugLocation(154, 46);
                                            REG_A174 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_ld1210);
                                            REG_A174_tree = (CommonTree)adaptor.Create(REG_A174);
                                            adaptor.AddChild(root_0, REG_A174_tree);

                                        }


                                    }
                                    break;
                                case 6:
                                    DebugEnterAlt(6);
                                    // GBX.g:155:7: ( rr_ref_hl COMMA ! ( r8 | expression ) )
                                    {
                                        DebugLocation(155, 7);
                                        // GBX.g:155:7: ( rr_ref_hl COMMA ! ( r8 | expression ) )
                                        DebugEnterAlt(1);
                                        // GBX.g:155:8: rr_ref_hl COMMA ! ( r8 | expression )
                                        {
                                            DebugLocation(155, 8);
                                            PushFollow(Follow._rr_ref_hl_in_op_ld1220);
                                            rr_ref_hl175 = rr_ref_hl();
                                            PopFollow();

                                            adaptor.AddChild(root_0, rr_ref_hl175.Tree);
                                            DebugLocation(155, 23);
                                            COMMA176 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ld1222);
                                            DebugLocation(155, 25);
                                            // GBX.g:155:25: ( r8 | expression )
                                            int alt29 = 2;
                                            try
                                            {
                                                DebugEnterSubRule(29);
                                                try
                                                {
                                                    DebugEnterDecision(29, false);
                                                    int LA29_0 = input.LA(1);

                                                    if (((LA29_0 >= REG_A && LA29_0 <= REG_L)))
                                                    {
                                                        alt29 = 1;
                                                    }
                                                    else if ((LA29_0 == BANG_MARK || LA29_0 == ID || LA29_0 == LEFT_PARENS || LA29_0 == MINUS_MARK || LA29_0 == NUMBER || LA29_0 == TILDE_MARK))
                                                    {
                                                        alt29 = 2;
                                                    }
                                                    else
                                                    {
                                                        NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
                                                        DebugRecognitionException(nvae);
                                                        throw nvae;
                                                    }
                                                }
                                                finally { DebugExitDecision(29); }
                                                switch (alt29)
                                                {
                                                    case 1:
                                                        DebugEnterAlt(1);
                                                        // GBX.g:155:26: r8
                                                        {
                                                            DebugLocation(155, 26);
                                                            PushFollow(Follow._r8_in_op_ld1226);
                                                            r8177 = r8();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, r8177.Tree);

                                                        }
                                                        break;
                                                    case 2:
                                                        DebugEnterAlt(2);
                                                        // GBX.g:155:29: expression
                                                        {
                                                            DebugLocation(155, 29);
                                                            PushFollow(Follow._expression_in_op_ld1228);
                                                            expression178 = expression();
                                                            PopFollow();

                                                            adaptor.AddChild(root_0, expression178.Tree);

                                                        }
                                                        break;

                                                }
                                            }
                                            finally { DebugExitSubRule(29); }


                                        }


                                    }
                                    break;
                                case 7:
                                    DebugEnterAlt(7);
                                    // GBX.g:156:7: ( mem_ref_xp COMMA ! ( REG_A | RR_SP ) )
                                    {
                                        DebugLocation(156, 7);
                                        // GBX.g:156:7: ( mem_ref_xp COMMA ! ( REG_A | RR_SP ) )
                                        DebugEnterAlt(1);
                                        // GBX.g:156:8: mem_ref_xp COMMA ! ( REG_A | RR_SP )
                                        {
                                            DebugLocation(156, 8);
                                            PushFollow(Follow._mem_ref_xp_in_op_ld1239);
                                            mem_ref_xp179 = mem_ref_xp();
                                            PopFollow();

                                            adaptor.AddChild(root_0, mem_ref_xp179.Tree);
                                            DebugLocation(156, 24);
                                            COMMA180 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_ld1241);
                                            DebugLocation(156, 26);

                                            set181 = (IToken)input.LT(1);
                                            if (input.LA(1) == REG_A || input.LA(1) == RR_SP)
                                            {
                                                input.Consume();
                                                adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set181));
                                                state.errorRecovery = false;
                                            }
                                            else
                                            {
                                                MismatchedSetException mse = new MismatchedSetException(null, input);
                                                DebugRecognitionException(mse);
                                                throw mse;
                                            }


                                        }


                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(30); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_ld", 29);
                    LeaveRule("op_ld", 29);
                    LeaveRule_op_ld();
                }
                DebugLocation(156, 40);
            }
            finally { DebugExitRule(GrammarFileName, "op_ld"); }
            return retval;

        }
        // $ANTLR end "op_ld"

        partial void EnterRule_op_nop();
        partial void LeaveRule_op_nop();

        // $ANTLR start "op_nop"
        // GBX.g:157:1: op_nop : INST_NOP ^;
        [GrammarRule("op_nop")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_nop()
        {
            EnterRule_op_nop();
            EnterRule("op_nop", 30);
            TraceIn("op_nop", 30);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_NOP182 = default(IToken);

            CommonTree INST_NOP182_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_nop");
                DebugLocation(157, 20);
                try
                {
                    // GBX.g:157:10: ( INST_NOP ^)
                    DebugEnterAlt(1);
                    // GBX.g:157:12: INST_NOP ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(157, 20);
                        INST_NOP182 = (IToken)Match(input, INST_NOP, Follow._INST_NOP_in_op_nop1259);
                        INST_NOP182_tree = (CommonTree)adaptor.Create(INST_NOP182);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_NOP182_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_nop", 30);
                    LeaveRule("op_nop", 30);
                    LeaveRule_op_nop();
                }
                DebugLocation(157, 20);
            }
            finally { DebugExitRule(GrammarFileName, "op_nop"); }
            return retval;

        }
        // $ANTLR end "op_nop"

        partial void EnterRule_op_or();
        partial void LeaveRule_op_or();

        // $ANTLR start "op_or"
        // GBX.g:158:1: op_or : INST_OR ^ ( REG_A COMMA !)? arith_opt ;
        [GrammarRule("op_or")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_or()
        {
            EnterRule_op_or();
            EnterRule("op_or", 31);
            TraceIn("op_or", 31);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_OR183 = default(IToken);
            IToken REG_A184 = default(IToken);
            IToken COMMA185 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt186 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_OR183_tree = default(CommonTree);
            CommonTree REG_A184_tree = default(CommonTree);
            CommonTree COMMA185_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_or");
                DebugLocation(158, 44);
                try
                {
                    // GBX.g:158:9: ( INST_OR ^ ( REG_A COMMA !)? arith_opt )
                    DebugEnterAlt(1);
                    // GBX.g:158:11: INST_OR ^ ( REG_A COMMA !)? arith_opt
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(158, 18);
                        INST_OR183 = (IToken)Match(input, INST_OR, Follow._INST_OR_in_op_or1269);
                        INST_OR183_tree = (CommonTree)adaptor.Create(INST_OR183);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_OR183_tree, root_0);
                        DebugLocation(158, 20);
                        // GBX.g:158:20: ( REG_A COMMA !)?
                        int alt31 = 2;
                        try
                        {
                            DebugEnterSubRule(31);
                            try
                            {
                                DebugEnterDecision(31, false);
                                int LA31_0 = input.LA(1);

                                if ((LA31_0 == REG_A))
                                {
                                    int LA31_1 = input.LA(2);

                                    if ((LA31_1 == COMMA))
                                    {
                                        alt31 = 1;
                                    }
                                }
                            }
                            finally { DebugExitDecision(31); }
                            switch (alt31)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:158:21: REG_A COMMA !
                                    {
                                        DebugLocation(158, 21);
                                        REG_A184 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_or1273);
                                        REG_A184_tree = (CommonTree)adaptor.Create(REG_A184);
                                        adaptor.AddChild(root_0, REG_A184_tree);
                                        DebugLocation(158, 32);
                                        COMMA185 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_or1275);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(31); }

                        DebugLocation(158, 36);
                        PushFollow(Follow._arith_opt_in_op_or1280);
                        arith_opt186 = arith_opt();
                        PopFollow();

                        adaptor.AddChild(root_0, arith_opt186.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_or", 31);
                    LeaveRule("op_or", 31);
                    LeaveRule_op_or();
                }
                DebugLocation(158, 44);
            }
            finally { DebugExitRule(GrammarFileName, "op_or"); }
            return retval;

        }
        // $ANTLR end "op_or"

        partial void EnterRule_op_pop();
        partial void LeaveRule_op_pop();

        // $ANTLR start "op_pop"
        // GBX.g:159:1: op_pop : INST_POP ^ ( RR_AF | RR_BC | RR_DE | RR_HL ) ;
        [GrammarRule("op_pop")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_pop()
        {
            EnterRule_op_pop();
            EnterRule("op_pop", 32);
            TraceIn("op_pop", 32);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_POP187 = default(IToken);
            IToken set188 = default(IToken);

            CommonTree INST_POP187_tree = default(CommonTree);
            CommonTree set188_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_pop");
                DebugLocation(159, 46);
                try
                {
                    // GBX.g:159:10: ( INST_POP ^ ( RR_AF | RR_BC | RR_DE | RR_HL ) )
                    DebugEnterAlt(1);
                    // GBX.g:159:12: INST_POP ^ ( RR_AF | RR_BC | RR_DE | RR_HL )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(159, 20);
                        INST_POP187 = (IToken)Match(input, INST_POP, Follow._INST_POP_in_op_pop1289);
                        INST_POP187_tree = (CommonTree)adaptor.Create(INST_POP187);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_POP187_tree, root_0);
                        DebugLocation(159, 22);

                        set188 = (IToken)input.LT(1);
                        if ((input.LA(1) >= RR_AF && input.LA(1) <= RR_HL))
                        {
                            input.Consume();
                            adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set188));
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_pop", 32);
                    LeaveRule("op_pop", 32);
                    LeaveRule_op_pop();
                }
                DebugLocation(159, 46);
            }
            finally { DebugExitRule(GrammarFileName, "op_pop"); }
            return retval;

        }
        // $ANTLR end "op_pop"

        partial void EnterRule_op_push();
        partial void LeaveRule_op_push();

        // $ANTLR start "op_push"
        // GBX.g:160:1: op_push : INST_PUSH ^ ( RR_AF | RR_BC | RR_DE | RR_HL ) ;
        [GrammarRule("op_push")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_push()
        {
            EnterRule_op_push();
            EnterRule("op_push", 33);
            TraceIn("op_push", 33);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_PUSH189 = default(IToken);
            IToken set190 = default(IToken);

            CommonTree INST_PUSH189_tree = default(CommonTree);
            CommonTree set190_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_push");
                DebugLocation(160, 48);
                try
                {
                    // GBX.g:160:11: ( INST_PUSH ^ ( RR_AF | RR_BC | RR_DE | RR_HL ) )
                    DebugEnterAlt(1);
                    // GBX.g:160:13: INST_PUSH ^ ( RR_AF | RR_BC | RR_DE | RR_HL )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(160, 22);
                        INST_PUSH189 = (IToken)Match(input, INST_PUSH, Follow._INST_PUSH_in_op_push1309);
                        INST_PUSH189_tree = (CommonTree)adaptor.Create(INST_PUSH189);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_PUSH189_tree, root_0);
                        DebugLocation(160, 24);

                        set190 = (IToken)input.LT(1);
                        if ((input.LA(1) >= RR_AF && input.LA(1) <= RR_HL))
                        {
                            input.Consume();
                            adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set190));
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_push", 33);
                    LeaveRule("op_push", 33);
                    LeaveRule_op_push();
                }
                DebugLocation(160, 48);
            }
            finally { DebugExitRule(GrammarFileName, "op_push"); }
            return retval;

        }
        // $ANTLR end "op_push"

        partial void EnterRule_op_res();
        partial void LeaveRule_op_res();

        // $ANTLR start "op_res"
        // GBX.g:161:1: op_res : INST_RES ^ expression COMMA ! ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_res")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_res()
        {
            EnterRule_op_res();
            EnterRule("op_res", 34);
            TraceIn("op_res", 34);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RES191 = default(IToken);
            IToken COMMA193 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> r8194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl195 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_RES191_tree = default(CommonTree);
            CommonTree COMMA193_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_res");
                DebugLocation(161, 53);
                try
                {
                    // GBX.g:161:10: ( INST_RES ^ expression COMMA ! ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:161:12: INST_RES ^ expression COMMA ! ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(161, 20);
                        INST_RES191 = (IToken)Match(input, INST_RES, Follow._INST_RES_in_op_res1329);
                        INST_RES191_tree = (CommonTree)adaptor.Create(INST_RES191);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RES191_tree, root_0);
                        DebugLocation(161, 22);
                        PushFollow(Follow._expression_in_op_res1332);
                        expression192 = expression();
                        PopFollow();

                        adaptor.AddChild(root_0, expression192.Tree);
                        DebugLocation(161, 38);
                        COMMA193 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_res1334);
                        DebugLocation(161, 40);
                        // GBX.g:161:40: ( r8 | rr_ref_hl )
                        int alt32 = 2;
                        try
                        {
                            DebugEnterSubRule(32);
                            try
                            {
                                DebugEnterDecision(32, false);
                                int LA32_0 = input.LA(1);

                                if (((LA32_0 >= REG_A && LA32_0 <= REG_L)))
                                {
                                    alt32 = 1;
                                }
                                else if ((LA32_0 == LEFT_BRACKET))
                                {
                                    alt32 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(32); }
                            switch (alt32)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:161:41: r8
                                    {
                                        DebugLocation(161, 41);
                                        PushFollow(Follow._r8_in_op_res1338);
                                        r8194 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8194.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:161:44: rr_ref_hl
                                    {
                                        DebugLocation(161, 44);
                                        PushFollow(Follow._rr_ref_hl_in_op_res1340);
                                        rr_ref_hl195 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl195.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(32); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_res", 34);
                    LeaveRule("op_res", 34);
                    LeaveRule_op_res();
                }
                DebugLocation(161, 53);
            }
            finally { DebugExitRule(GrammarFileName, "op_res"); }
            return retval;

        }
        // $ANTLR end "op_res"

        partial void EnterRule_op_ret();
        partial void LeaveRule_op_ret();

        // $ANTLR start "op_ret"
        // GBX.g:162:1: op_ret : INST_RET ^ ( cond_opt )? ;
        [GrammarRule("op_ret")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_ret()
        {
            EnterRule_op_ret();
            EnterRule("op_ret", 35);
            TraceIn("op_ret", 35);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RET196 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> cond_opt197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_RET196_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_ret");
                DebugLocation(162, 30);
                try
                {
                    // GBX.g:162:10: ( INST_RET ^ ( cond_opt )? )
                    DebugEnterAlt(1);
                    // GBX.g:162:12: INST_RET ^ ( cond_opt )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(162, 20);
                        INST_RET196 = (IToken)Match(input, INST_RET, Follow._INST_RET_in_op_ret1350);
                        INST_RET196_tree = (CommonTree)adaptor.Create(INST_RET196);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RET196_tree, root_0);
                        DebugLocation(162, 22);
                        // GBX.g:162:22: ( cond_opt )?
                        int alt33 = 2;
                        try
                        {
                            DebugEnterSubRule(33);
                            try
                            {
                                DebugEnterDecision(33, false);
                                int LA33_0 = input.LA(1);

                                if (((LA33_0 >= CC_NC && LA33_0 <= CC_Z) || LA33_0 == REG_C))
                                {
                                    alt33 = 1;
                                }
                            }
                            finally { DebugExitDecision(33); }
                            switch (alt33)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:162:22: cond_opt
                                    {
                                        DebugLocation(162, 22);
                                        PushFollow(Follow._cond_opt_in_op_ret1353);
                                        cond_opt197 = cond_opt();
                                        PopFollow();

                                        adaptor.AddChild(root_0, cond_opt197.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(33); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_ret", 35);
                    LeaveRule("op_ret", 35);
                    LeaveRule_op_ret();
                }
                DebugLocation(162, 30);
            }
            finally { DebugExitRule(GrammarFileName, "op_ret"); }
            return retval;

        }
        // $ANTLR end "op_ret"

        partial void EnterRule_op_reti();
        partial void LeaveRule_op_reti();

        // $ANTLR start "op_reti"
        // GBX.g:163:1: op_reti : INST_RETI ^;
        [GrammarRule("op_reti")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_reti()
        {
            EnterRule_op_reti();
            EnterRule("op_reti", 36);
            TraceIn("op_reti", 36);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RETI198 = default(IToken);

            CommonTree INST_RETI198_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_reti");
                DebugLocation(163, 22);
                try
                {
                    // GBX.g:163:11: ( INST_RETI ^)
                    DebugEnterAlt(1);
                    // GBX.g:163:13: INST_RETI ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(163, 22);
                        INST_RETI198 = (IToken)Match(input, INST_RETI, Follow._INST_RETI_in_op_reti1363);
                        INST_RETI198_tree = (CommonTree)adaptor.Create(INST_RETI198);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RETI198_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_reti", 36);
                    LeaveRule("op_reti", 36);
                    LeaveRule_op_reti();
                }
                DebugLocation(163, 22);
            }
            finally { DebugExitRule(GrammarFileName, "op_reti"); }
            return retval;

        }
        // $ANTLR end "op_reti"

        partial void EnterRule_op_rl();
        partial void LeaveRule_op_rl();

        // $ANTLR start "op_rl"
        // GBX.g:164:1: op_rl : INST_RL ^ ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_rl")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rl()
        {
            EnterRule_op_rl();
            EnterRule("op_rl", 37);
            TraceIn("op_rl", 37);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RL199 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_RL199_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rl");
                DebugLocation(164, 33);
                try
                {
                    // GBX.g:164:9: ( INST_RL ^ ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:164:11: INST_RL ^ ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(164, 18);
                        INST_RL199 = (IToken)Match(input, INST_RL, Follow._INST_RL_in_op_rl1373);
                        INST_RL199_tree = (CommonTree)adaptor.Create(INST_RL199);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RL199_tree, root_0);
                        DebugLocation(164, 20);
                        // GBX.g:164:20: ( r8 | rr_ref_hl )
                        int alt34 = 2;
                        try
                        {
                            DebugEnterSubRule(34);
                            try
                            {
                                DebugEnterDecision(34, false);
                                int LA34_0 = input.LA(1);

                                if (((LA34_0 >= REG_A && LA34_0 <= REG_L)))
                                {
                                    alt34 = 1;
                                }
                                else if ((LA34_0 == LEFT_BRACKET))
                                {
                                    alt34 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(34); }
                            switch (alt34)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:164:21: r8
                                    {
                                        DebugLocation(164, 21);
                                        PushFollow(Follow._r8_in_op_rl1377);
                                        r8200 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8200.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:164:24: rr_ref_hl
                                    {
                                        DebugLocation(164, 24);
                                        PushFollow(Follow._rr_ref_hl_in_op_rl1379);
                                        rr_ref_hl201 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl201.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(34); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rl", 37);
                    LeaveRule("op_rl", 37);
                    LeaveRule_op_rl();
                }
                DebugLocation(164, 33);
            }
            finally { DebugExitRule(GrammarFileName, "op_rl"); }
            return retval;

        }
        // $ANTLR end "op_rl"

        partial void EnterRule_op_rla();
        partial void LeaveRule_op_rla();

        // $ANTLR start "op_rla"
        // GBX.g:165:1: op_rla : INST_RLA ^;
        [GrammarRule("op_rla")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rla()
        {
            EnterRule_op_rla();
            EnterRule("op_rla", 38);
            TraceIn("op_rla", 38);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RLA202 = default(IToken);

            CommonTree INST_RLA202_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rla");
                DebugLocation(165, 20);
                try
                {
                    // GBX.g:165:10: ( INST_RLA ^)
                    DebugEnterAlt(1);
                    // GBX.g:165:12: INST_RLA ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(165, 20);
                        INST_RLA202 = (IToken)Match(input, INST_RLA, Follow._INST_RLA_in_op_rla1389);
                        INST_RLA202_tree = (CommonTree)adaptor.Create(INST_RLA202);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RLA202_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rla", 38);
                    LeaveRule("op_rla", 38);
                    LeaveRule_op_rla();
                }
                DebugLocation(165, 20);
            }
            finally { DebugExitRule(GrammarFileName, "op_rla"); }
            return retval;

        }
        // $ANTLR end "op_rla"

        partial void EnterRule_op_rlc();
        partial void LeaveRule_op_rlc();

        // $ANTLR start "op_rlc"
        // GBX.g:166:1: op_rlc : INST_RLC ^ ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_rlc")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rlc()
        {
            EnterRule_op_rlc();
            EnterRule("op_rlc", 39);
            TraceIn("op_rlc", 39);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RLC203 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_RLC203_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rlc");
                DebugLocation(166, 35);
                try
                {
                    // GBX.g:166:10: ( INST_RLC ^ ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:166:12: INST_RLC ^ ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(166, 20);
                        INST_RLC203 = (IToken)Match(input, INST_RLC, Follow._INST_RLC_in_op_rlc1399);
                        INST_RLC203_tree = (CommonTree)adaptor.Create(INST_RLC203);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RLC203_tree, root_0);
                        DebugLocation(166, 22);
                        // GBX.g:166:22: ( r8 | rr_ref_hl )
                        int alt35 = 2;
                        try
                        {
                            DebugEnterSubRule(35);
                            try
                            {
                                DebugEnterDecision(35, false);
                                int LA35_0 = input.LA(1);

                                if (((LA35_0 >= REG_A && LA35_0 <= REG_L)))
                                {
                                    alt35 = 1;
                                }
                                else if ((LA35_0 == LEFT_BRACKET))
                                {
                                    alt35 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(35); }
                            switch (alt35)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:166:23: r8
                                    {
                                        DebugLocation(166, 23);
                                        PushFollow(Follow._r8_in_op_rlc1403);
                                        r8204 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8204.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:166:26: rr_ref_hl
                                    {
                                        DebugLocation(166, 26);
                                        PushFollow(Follow._rr_ref_hl_in_op_rlc1405);
                                        rr_ref_hl205 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl205.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(35); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rlc", 39);
                    LeaveRule("op_rlc", 39);
                    LeaveRule_op_rlc();
                }
                DebugLocation(166, 35);
            }
            finally { DebugExitRule(GrammarFileName, "op_rlc"); }
            return retval;

        }
        // $ANTLR end "op_rlc"

        partial void EnterRule_op_rlca();
        partial void LeaveRule_op_rlca();

        // $ANTLR start "op_rlca"
        // GBX.g:167:1: op_rlca : INST_RLCA ^;
        [GrammarRule("op_rlca")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rlca()
        {
            EnterRule_op_rlca();
            EnterRule("op_rlca", 40);
            TraceIn("op_rlca", 40);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RLCA206 = default(IToken);

            CommonTree INST_RLCA206_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rlca");
                DebugLocation(167, 22);
                try
                {
                    // GBX.g:167:11: ( INST_RLCA ^)
                    DebugEnterAlt(1);
                    // GBX.g:167:13: INST_RLCA ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(167, 22);
                        INST_RLCA206 = (IToken)Match(input, INST_RLCA, Follow._INST_RLCA_in_op_rlca1415);
                        INST_RLCA206_tree = (CommonTree)adaptor.Create(INST_RLCA206);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RLCA206_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rlca", 40);
                    LeaveRule("op_rlca", 40);
                    LeaveRule_op_rlca();
                }
                DebugLocation(167, 22);
            }
            finally { DebugExitRule(GrammarFileName, "op_rlca"); }
            return retval;

        }
        // $ANTLR end "op_rlca"

        partial void EnterRule_op_rr();
        partial void LeaveRule_op_rr();

        // $ANTLR start "op_rr"
        // GBX.g:168:1: op_rr : INST_RR ^ ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_rr")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rr()
        {
            EnterRule_op_rr();
            EnterRule("op_rr", 41);
            TraceIn("op_rr", 41);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RR207 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl209 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_RR207_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rr");
                DebugLocation(168, 33);
                try
                {
                    // GBX.g:168:9: ( INST_RR ^ ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:168:11: INST_RR ^ ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(168, 18);
                        INST_RR207 = (IToken)Match(input, INST_RR, Follow._INST_RR_in_op_rr1425);
                        INST_RR207_tree = (CommonTree)adaptor.Create(INST_RR207);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RR207_tree, root_0);
                        DebugLocation(168, 20);
                        // GBX.g:168:20: ( r8 | rr_ref_hl )
                        int alt36 = 2;
                        try
                        {
                            DebugEnterSubRule(36);
                            try
                            {
                                DebugEnterDecision(36, false);
                                int LA36_0 = input.LA(1);

                                if (((LA36_0 >= REG_A && LA36_0 <= REG_L)))
                                {
                                    alt36 = 1;
                                }
                                else if ((LA36_0 == LEFT_BRACKET))
                                {
                                    alt36 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(36); }
                            switch (alt36)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:168:21: r8
                                    {
                                        DebugLocation(168, 21);
                                        PushFollow(Follow._r8_in_op_rr1429);
                                        r8208 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8208.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:168:24: rr_ref_hl
                                    {
                                        DebugLocation(168, 24);
                                        PushFollow(Follow._rr_ref_hl_in_op_rr1431);
                                        rr_ref_hl209 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl209.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(36); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rr", 41);
                    LeaveRule("op_rr", 41);
                    LeaveRule_op_rr();
                }
                DebugLocation(168, 33);
            }
            finally { DebugExitRule(GrammarFileName, "op_rr"); }
            return retval;

        }
        // $ANTLR end "op_rr"

        partial void EnterRule_op_rra();
        partial void LeaveRule_op_rra();

        // $ANTLR start "op_rra"
        // GBX.g:169:1: op_rra : INST_RRA ^;
        [GrammarRule("op_rra")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rra()
        {
            EnterRule_op_rra();
            EnterRule("op_rra", 42);
            TraceIn("op_rra", 42);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RRA210 = default(IToken);

            CommonTree INST_RRA210_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rra");
                DebugLocation(169, 20);
                try
                {
                    // GBX.g:169:10: ( INST_RRA ^)
                    DebugEnterAlt(1);
                    // GBX.g:169:12: INST_RRA ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(169, 20);
                        INST_RRA210 = (IToken)Match(input, INST_RRA, Follow._INST_RRA_in_op_rra1441);
                        INST_RRA210_tree = (CommonTree)adaptor.Create(INST_RRA210);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RRA210_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rra", 42);
                    LeaveRule("op_rra", 42);
                    LeaveRule_op_rra();
                }
                DebugLocation(169, 20);
            }
            finally { DebugExitRule(GrammarFileName, "op_rra"); }
            return retval;

        }
        // $ANTLR end "op_rra"

        partial void EnterRule_op_rrc();
        partial void LeaveRule_op_rrc();

        // $ANTLR start "op_rrc"
        // GBX.g:170:1: op_rrc : INST_RRC ^ ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_rrc")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rrc()
        {
            EnterRule_op_rrc();
            EnterRule("op_rrc", 43);
            TraceIn("op_rrc", 43);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RRC211 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl213 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_RRC211_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rrc");
                DebugLocation(170, 35);
                try
                {
                    // GBX.g:170:10: ( INST_RRC ^ ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:170:12: INST_RRC ^ ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(170, 20);
                        INST_RRC211 = (IToken)Match(input, INST_RRC, Follow._INST_RRC_in_op_rrc1451);
                        INST_RRC211_tree = (CommonTree)adaptor.Create(INST_RRC211);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RRC211_tree, root_0);
                        DebugLocation(170, 22);
                        // GBX.g:170:22: ( r8 | rr_ref_hl )
                        int alt37 = 2;
                        try
                        {
                            DebugEnterSubRule(37);
                            try
                            {
                                DebugEnterDecision(37, false);
                                int LA37_0 = input.LA(1);

                                if (((LA37_0 >= REG_A && LA37_0 <= REG_L)))
                                {
                                    alt37 = 1;
                                }
                                else if ((LA37_0 == LEFT_BRACKET))
                                {
                                    alt37 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(37); }
                            switch (alt37)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:170:23: r8
                                    {
                                        DebugLocation(170, 23);
                                        PushFollow(Follow._r8_in_op_rrc1455);
                                        r8212 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8212.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:170:26: rr_ref_hl
                                    {
                                        DebugLocation(170, 26);
                                        PushFollow(Follow._rr_ref_hl_in_op_rrc1457);
                                        rr_ref_hl213 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl213.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(37); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rrc", 43);
                    LeaveRule("op_rrc", 43);
                    LeaveRule_op_rrc();
                }
                DebugLocation(170, 35);
            }
            finally { DebugExitRule(GrammarFileName, "op_rrc"); }
            return retval;

        }
        // $ANTLR end "op_rrc"

        partial void EnterRule_op_rrca();
        partial void LeaveRule_op_rrca();

        // $ANTLR start "op_rrca"
        // GBX.g:171:1: op_rrca : INST_RRCA ^;
        [GrammarRule("op_rrca")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rrca()
        {
            EnterRule_op_rrca();
            EnterRule("op_rrca", 44);
            TraceIn("op_rrca", 44);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RRCA214 = default(IToken);

            CommonTree INST_RRCA214_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rrca");
                DebugLocation(171, 22);
                try
                {
                    // GBX.g:171:11: ( INST_RRCA ^)
                    DebugEnterAlt(1);
                    // GBX.g:171:13: INST_RRCA ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(171, 22);
                        INST_RRCA214 = (IToken)Match(input, INST_RRCA, Follow._INST_RRCA_in_op_rrca1467);
                        INST_RRCA214_tree = (CommonTree)adaptor.Create(INST_RRCA214);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RRCA214_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rrca", 44);
                    LeaveRule("op_rrca", 44);
                    LeaveRule_op_rrca();
                }
                DebugLocation(171, 22);
            }
            finally { DebugExitRule(GrammarFileName, "op_rrca"); }
            return retval;

        }
        // $ANTLR end "op_rrca"

        partial void EnterRule_op_rst();
        partial void LeaveRule_op_rst();

        // $ANTLR start "op_rst"
        // GBX.g:172:1: op_rst : INST_RST ^ expression ;
        [GrammarRule("op_rst")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_rst()
        {
            EnterRule_op_rst();
            EnterRule("op_rst", 45);
            TraceIn("op_rst", 45);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_RST215 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression216 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_RST215_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_rst");
                DebugLocation(172, 31);
                try
                {
                    // GBX.g:172:10: ( INST_RST ^ expression )
                    DebugEnterAlt(1);
                    // GBX.g:172:12: INST_RST ^ expression
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(172, 20);
                        INST_RST215 = (IToken)Match(input, INST_RST, Follow._INST_RST_in_op_rst1477);
                        INST_RST215_tree = (CommonTree)adaptor.Create(INST_RST215);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_RST215_tree, root_0);
                        DebugLocation(172, 22);
                        PushFollow(Follow._expression_in_op_rst1480);
                        expression216 = expression();
                        PopFollow();

                        adaptor.AddChild(root_0, expression216.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_rst", 45);
                    LeaveRule("op_rst", 45);
                    LeaveRule_op_rst();
                }
                DebugLocation(172, 31);
            }
            finally { DebugExitRule(GrammarFileName, "op_rst"); }
            return retval;

        }
        // $ANTLR end "op_rst"

        partial void EnterRule_op_sbc();
        partial void LeaveRule_op_sbc();

        // $ANTLR start "op_sbc"
        // GBX.g:173:1: op_sbc : INST_SBC ^ ( REG_A COMMA !)? arith_opt ;
        [GrammarRule("op_sbc")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_sbc()
        {
            EnterRule_op_sbc();
            EnterRule("op_sbc", 46);
            TraceIn("op_sbc", 46);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_SBC217 = default(IToken);
            IToken REG_A218 = default(IToken);
            IToken COMMA219 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_SBC217_tree = default(CommonTree);
            CommonTree REG_A218_tree = default(CommonTree);
            CommonTree COMMA219_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_sbc");
                DebugLocation(173, 46);
                try
                {
                    // GBX.g:173:10: ( INST_SBC ^ ( REG_A COMMA !)? arith_opt )
                    DebugEnterAlt(1);
                    // GBX.g:173:12: INST_SBC ^ ( REG_A COMMA !)? arith_opt
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(173, 20);
                        INST_SBC217 = (IToken)Match(input, INST_SBC, Follow._INST_SBC_in_op_sbc1489);
                        INST_SBC217_tree = (CommonTree)adaptor.Create(INST_SBC217);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_SBC217_tree, root_0);
                        DebugLocation(173, 22);
                        // GBX.g:173:22: ( REG_A COMMA !)?
                        int alt38 = 2;
                        try
                        {
                            DebugEnterSubRule(38);
                            try
                            {
                                DebugEnterDecision(38, false);
                                int LA38_0 = input.LA(1);

                                if ((LA38_0 == REG_A))
                                {
                                    int LA38_1 = input.LA(2);

                                    if ((LA38_1 == COMMA))
                                    {
                                        alt38 = 1;
                                    }
                                }
                            }
                            finally { DebugExitDecision(38); }
                            switch (alt38)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:173:23: REG_A COMMA !
                                    {
                                        DebugLocation(173, 23);
                                        REG_A218 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_sbc1493);
                                        REG_A218_tree = (CommonTree)adaptor.Create(REG_A218);
                                        adaptor.AddChild(root_0, REG_A218_tree);
                                        DebugLocation(173, 34);
                                        COMMA219 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_sbc1495);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(38); }

                        DebugLocation(173, 38);
                        PushFollow(Follow._arith_opt_in_op_sbc1500);
                        arith_opt220 = arith_opt();
                        PopFollow();

                        adaptor.AddChild(root_0, arith_opt220.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_sbc", 46);
                    LeaveRule("op_sbc", 46);
                    LeaveRule_op_sbc();
                }
                DebugLocation(173, 46);
            }
            finally { DebugExitRule(GrammarFileName, "op_sbc"); }
            return retval;

        }
        // $ANTLR end "op_sbc"

        partial void EnterRule_op_scf();
        partial void LeaveRule_op_scf();

        // $ANTLR start "op_scf"
        // GBX.g:174:1: op_scf : INST_SCF ^;
        [GrammarRule("op_scf")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_scf()
        {
            EnterRule_op_scf();
            EnterRule("op_scf", 47);
            TraceIn("op_scf", 47);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_SCF221 = default(IToken);

            CommonTree INST_SCF221_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_scf");
                DebugLocation(174, 20);
                try
                {
                    // GBX.g:174:10: ( INST_SCF ^)
                    DebugEnterAlt(1);
                    // GBX.g:174:12: INST_SCF ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(174, 20);
                        INST_SCF221 = (IToken)Match(input, INST_SCF, Follow._INST_SCF_in_op_scf1509);
                        INST_SCF221_tree = (CommonTree)adaptor.Create(INST_SCF221);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_SCF221_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_scf", 47);
                    LeaveRule("op_scf", 47);
                    LeaveRule_op_scf();
                }
                DebugLocation(174, 20);
            }
            finally { DebugExitRule(GrammarFileName, "op_scf"); }
            return retval;

        }
        // $ANTLR end "op_scf"

        partial void EnterRule_op_set();
        partial void LeaveRule_op_set();

        // $ANTLR start "op_set"
        // GBX.g:175:1: op_set : INST_SET ^ expression COMMA ! ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_set")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_set()
        {
            EnterRule_op_set();
            EnterRule("op_set", 48);
            TraceIn("op_set", 48);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_SET222 = default(IToken);
            IToken COMMA224 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> r8225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl226 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_SET222_tree = default(CommonTree);
            CommonTree COMMA224_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_set");
                DebugLocation(175, 53);
                try
                {
                    // GBX.g:175:10: ( INST_SET ^ expression COMMA ! ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:175:12: INST_SET ^ expression COMMA ! ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(175, 20);
                        INST_SET222 = (IToken)Match(input, INST_SET, Follow._INST_SET_in_op_set1519);
                        INST_SET222_tree = (CommonTree)adaptor.Create(INST_SET222);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_SET222_tree, root_0);
                        DebugLocation(175, 22);
                        PushFollow(Follow._expression_in_op_set1522);
                        expression223 = expression();
                        PopFollow();

                        adaptor.AddChild(root_0, expression223.Tree);
                        DebugLocation(175, 38);
                        COMMA224 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_set1524);
                        DebugLocation(175, 40);
                        // GBX.g:175:40: ( r8 | rr_ref_hl )
                        int alt39 = 2;
                        try
                        {
                            DebugEnterSubRule(39);
                            try
                            {
                                DebugEnterDecision(39, false);
                                int LA39_0 = input.LA(1);

                                if (((LA39_0 >= REG_A && LA39_0 <= REG_L)))
                                {
                                    alt39 = 1;
                                }
                                else if ((LA39_0 == LEFT_BRACKET))
                                {
                                    alt39 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(39); }
                            switch (alt39)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:175:41: r8
                                    {
                                        DebugLocation(175, 41);
                                        PushFollow(Follow._r8_in_op_set1528);
                                        r8225 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8225.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:175:44: rr_ref_hl
                                    {
                                        DebugLocation(175, 44);
                                        PushFollow(Follow._rr_ref_hl_in_op_set1530);
                                        rr_ref_hl226 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl226.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(39); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_set", 48);
                    LeaveRule("op_set", 48);
                    LeaveRule_op_set();
                }
                DebugLocation(175, 53);
            }
            finally { DebugExitRule(GrammarFileName, "op_set"); }
            return retval;

        }
        // $ANTLR end "op_set"

        partial void EnterRule_op_sla();
        partial void LeaveRule_op_sla();

        // $ANTLR start "op_sla"
        // GBX.g:176:1: op_sla : INST_SLA ^ ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_sla")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_sla()
        {
            EnterRule_op_sla();
            EnterRule("op_sla", 49);
            TraceIn("op_sla", 49);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_SLA227 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_SLA227_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_sla");
                DebugLocation(176, 35);
                try
                {
                    // GBX.g:176:10: ( INST_SLA ^ ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:176:12: INST_SLA ^ ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(176, 20);
                        INST_SLA227 = (IToken)Match(input, INST_SLA, Follow._INST_SLA_in_op_sla1540);
                        INST_SLA227_tree = (CommonTree)adaptor.Create(INST_SLA227);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_SLA227_tree, root_0);
                        DebugLocation(176, 22);
                        // GBX.g:176:22: ( r8 | rr_ref_hl )
                        int alt40 = 2;
                        try
                        {
                            DebugEnterSubRule(40);
                            try
                            {
                                DebugEnterDecision(40, false);
                                int LA40_0 = input.LA(1);

                                if (((LA40_0 >= REG_A && LA40_0 <= REG_L)))
                                {
                                    alt40 = 1;
                                }
                                else if ((LA40_0 == LEFT_BRACKET))
                                {
                                    alt40 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(40); }
                            switch (alt40)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:176:23: r8
                                    {
                                        DebugLocation(176, 23);
                                        PushFollow(Follow._r8_in_op_sla1544);
                                        r8228 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8228.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:176:26: rr_ref_hl
                                    {
                                        DebugLocation(176, 26);
                                        PushFollow(Follow._rr_ref_hl_in_op_sla1546);
                                        rr_ref_hl229 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl229.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(40); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_sla", 49);
                    LeaveRule("op_sla", 49);
                    LeaveRule_op_sla();
                }
                DebugLocation(176, 35);
            }
            finally { DebugExitRule(GrammarFileName, "op_sla"); }
            return retval;

        }
        // $ANTLR end "op_sla"

        partial void EnterRule_op_sra();
        partial void LeaveRule_op_sra();

        // $ANTLR start "op_sra"
        // GBX.g:177:1: op_sra : INST_SRA ^ ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_sra")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_sra()
        {
            EnterRule_op_sra();
            EnterRule("op_sra", 50);
            TraceIn("op_sra", 50);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_SRA230 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_SRA230_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_sra");
                DebugLocation(177, 35);
                try
                {
                    // GBX.g:177:10: ( INST_SRA ^ ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:177:12: INST_SRA ^ ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(177, 20);
                        INST_SRA230 = (IToken)Match(input, INST_SRA, Follow._INST_SRA_in_op_sra1556);
                        INST_SRA230_tree = (CommonTree)adaptor.Create(INST_SRA230);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_SRA230_tree, root_0);
                        DebugLocation(177, 22);
                        // GBX.g:177:22: ( r8 | rr_ref_hl )
                        int alt41 = 2;
                        try
                        {
                            DebugEnterSubRule(41);
                            try
                            {
                                DebugEnterDecision(41, false);
                                int LA41_0 = input.LA(1);

                                if (((LA41_0 >= REG_A && LA41_0 <= REG_L)))
                                {
                                    alt41 = 1;
                                }
                                else if ((LA41_0 == LEFT_BRACKET))
                                {
                                    alt41 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(41); }
                            switch (alt41)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:177:23: r8
                                    {
                                        DebugLocation(177, 23);
                                        PushFollow(Follow._r8_in_op_sra1560);
                                        r8231 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8231.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:177:26: rr_ref_hl
                                    {
                                        DebugLocation(177, 26);
                                        PushFollow(Follow._rr_ref_hl_in_op_sra1562);
                                        rr_ref_hl232 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl232.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(41); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_sra", 50);
                    LeaveRule("op_sra", 50);
                    LeaveRule_op_sra();
                }
                DebugLocation(177, 35);
            }
            finally { DebugExitRule(GrammarFileName, "op_sra"); }
            return retval;

        }
        // $ANTLR end "op_sra"

        partial void EnterRule_op_srl();
        partial void LeaveRule_op_srl();

        // $ANTLR start "op_srl"
        // GBX.g:178:1: op_srl : INST_SRL ^ ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_srl")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_srl()
        {
            EnterRule_op_srl();
            EnterRule("op_srl", 51);
            TraceIn("op_srl", 51);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_SRL233 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_SRL233_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_srl");
                DebugLocation(178, 35);
                try
                {
                    // GBX.g:178:10: ( INST_SRL ^ ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:178:12: INST_SRL ^ ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(178, 20);
                        INST_SRL233 = (IToken)Match(input, INST_SRL, Follow._INST_SRL_in_op_srl1572);
                        INST_SRL233_tree = (CommonTree)adaptor.Create(INST_SRL233);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_SRL233_tree, root_0);
                        DebugLocation(178, 22);
                        // GBX.g:178:22: ( r8 | rr_ref_hl )
                        int alt42 = 2;
                        try
                        {
                            DebugEnterSubRule(42);
                            try
                            {
                                DebugEnterDecision(42, false);
                                int LA42_0 = input.LA(1);

                                if (((LA42_0 >= REG_A && LA42_0 <= REG_L)))
                                {
                                    alt42 = 1;
                                }
                                else if ((LA42_0 == LEFT_BRACKET))
                                {
                                    alt42 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(42); }
                            switch (alt42)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:178:23: r8
                                    {
                                        DebugLocation(178, 23);
                                        PushFollow(Follow._r8_in_op_srl1576);
                                        r8234 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8234.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:178:26: rr_ref_hl
                                    {
                                        DebugLocation(178, 26);
                                        PushFollow(Follow._rr_ref_hl_in_op_srl1578);
                                        rr_ref_hl235 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl235.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(42); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_srl", 51);
                    LeaveRule("op_srl", 51);
                    LeaveRule_op_srl();
                }
                DebugLocation(178, 35);
            }
            finally { DebugExitRule(GrammarFileName, "op_srl"); }
            return retval;

        }
        // $ANTLR end "op_srl"

        partial void EnterRule_op_stop();
        partial void LeaveRule_op_stop();

        // $ANTLR start "op_stop"
        // GBX.g:179:1: op_stop : INST_STOP ^;
        [GrammarRule("op_stop")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_stop()
        {
            EnterRule_op_stop();
            EnterRule("op_stop", 52);
            TraceIn("op_stop", 52);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_STOP236 = default(IToken);

            CommonTree INST_STOP236_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_stop");
                DebugLocation(179, 22);
                try
                {
                    // GBX.g:179:11: ( INST_STOP ^)
                    DebugEnterAlt(1);
                    // GBX.g:179:13: INST_STOP ^
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(179, 22);
                        INST_STOP236 = (IToken)Match(input, INST_STOP, Follow._INST_STOP_in_op_stop1588);
                        INST_STOP236_tree = (CommonTree)adaptor.Create(INST_STOP236);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_STOP236_tree, root_0);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_stop", 52);
                    LeaveRule("op_stop", 52);
                    LeaveRule_op_stop();
                }
                DebugLocation(179, 22);
            }
            finally { DebugExitRule(GrammarFileName, "op_stop"); }
            return retval;

        }
        // $ANTLR end "op_stop"

        partial void EnterRule_op_sub();
        partial void LeaveRule_op_sub();

        // $ANTLR start "op_sub"
        // GBX.g:180:1: op_sub : INST_SUB ^ ( REG_A COMMA !)? arith_opt ;
        [GrammarRule("op_sub")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_sub()
        {
            EnterRule_op_sub();
            EnterRule("op_sub", 53);
            TraceIn("op_sub", 53);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_SUB237 = default(IToken);
            IToken REG_A238 = default(IToken);
            IToken COMMA239 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_SUB237_tree = default(CommonTree);
            CommonTree REG_A238_tree = default(CommonTree);
            CommonTree COMMA239_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_sub");
                DebugLocation(180, 46);
                try
                {
                    // GBX.g:180:10: ( INST_SUB ^ ( REG_A COMMA !)? arith_opt )
                    DebugEnterAlt(1);
                    // GBX.g:180:12: INST_SUB ^ ( REG_A COMMA !)? arith_opt
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(180, 20);
                        INST_SUB237 = (IToken)Match(input, INST_SUB, Follow._INST_SUB_in_op_sub1598);
                        INST_SUB237_tree = (CommonTree)adaptor.Create(INST_SUB237);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_SUB237_tree, root_0);
                        DebugLocation(180, 22);
                        // GBX.g:180:22: ( REG_A COMMA !)?
                        int alt43 = 2;
                        try
                        {
                            DebugEnterSubRule(43);
                            try
                            {
                                DebugEnterDecision(43, false);
                                int LA43_0 = input.LA(1);

                                if ((LA43_0 == REG_A))
                                {
                                    int LA43_1 = input.LA(2);

                                    if ((LA43_1 == COMMA))
                                    {
                                        alt43 = 1;
                                    }
                                }
                            }
                            finally { DebugExitDecision(43); }
                            switch (alt43)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:180:23: REG_A COMMA !
                                    {
                                        DebugLocation(180, 23);
                                        REG_A238 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_sub1602);
                                        REG_A238_tree = (CommonTree)adaptor.Create(REG_A238);
                                        adaptor.AddChild(root_0, REG_A238_tree);
                                        DebugLocation(180, 34);
                                        COMMA239 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_sub1604);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(43); }

                        DebugLocation(180, 38);
                        PushFollow(Follow._arith_opt_in_op_sub1609);
                        arith_opt240 = arith_opt();
                        PopFollow();

                        adaptor.AddChild(root_0, arith_opt240.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_sub", 53);
                    LeaveRule("op_sub", 53);
                    LeaveRule_op_sub();
                }
                DebugLocation(180, 46);
            }
            finally { DebugExitRule(GrammarFileName, "op_sub"); }
            return retval;

        }
        // $ANTLR end "op_sub"

        partial void EnterRule_op_swap();
        partial void LeaveRule_op_swap();

        // $ANTLR start "op_swap"
        // GBX.g:181:1: op_swap : INST_SWAP ^ ( r8 | rr_ref_hl ) ;
        [GrammarRule("op_swap")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_swap()
        {
            EnterRule_op_swap();
            EnterRule("op_swap", 54);
            TraceIn("op_swap", 54);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_SWAP241 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> r8242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl243 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_SWAP241_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_swap");
                DebugLocation(181, 37);
                try
                {
                    // GBX.g:181:11: ( INST_SWAP ^ ( r8 | rr_ref_hl ) )
                    DebugEnterAlt(1);
                    // GBX.g:181:13: INST_SWAP ^ ( r8 | rr_ref_hl )
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(181, 22);
                        INST_SWAP241 = (IToken)Match(input, INST_SWAP, Follow._INST_SWAP_in_op_swap1618);
                        INST_SWAP241_tree = (CommonTree)adaptor.Create(INST_SWAP241);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_SWAP241_tree, root_0);
                        DebugLocation(181, 24);
                        // GBX.g:181:24: ( r8 | rr_ref_hl )
                        int alt44 = 2;
                        try
                        {
                            DebugEnterSubRule(44);
                            try
                            {
                                DebugEnterDecision(44, false);
                                int LA44_0 = input.LA(1);

                                if (((LA44_0 >= REG_A && LA44_0 <= REG_L)))
                                {
                                    alt44 = 1;
                                }
                                else if ((LA44_0 == LEFT_BRACKET))
                                {
                                    alt44 = 2;
                                }
                                else
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                            }
                            finally { DebugExitDecision(44); }
                            switch (alt44)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:181:25: r8
                                    {
                                        DebugLocation(181, 25);
                                        PushFollow(Follow._r8_in_op_swap1622);
                                        r8242 = r8();
                                        PopFollow();

                                        adaptor.AddChild(root_0, r8242.Tree);

                                    }
                                    break;
                                case 2:
                                    DebugEnterAlt(2);
                                    // GBX.g:181:28: rr_ref_hl
                                    {
                                        DebugLocation(181, 28);
                                        PushFollow(Follow._rr_ref_hl_in_op_swap1624);
                                        rr_ref_hl243 = rr_ref_hl();
                                        PopFollow();

                                        adaptor.AddChild(root_0, rr_ref_hl243.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(44); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_swap", 54);
                    LeaveRule("op_swap", 54);
                    LeaveRule_op_swap();
                }
                DebugLocation(181, 37);
            }
            finally { DebugExitRule(GrammarFileName, "op_swap"); }
            return retval;

        }
        // $ANTLR end "op_swap"

        partial void EnterRule_op_xor();
        partial void LeaveRule_op_xor();

        // $ANTLR start "op_xor"
        // GBX.g:182:1: op_xor : INST_XOR ^ ( REG_A COMMA )? arith_opt ;
        [GrammarRule("op_xor")]
        private AstParserRuleReturnScope<CommonTree, IToken> op_xor()
        {
            EnterRule_op_xor();
            EnterRule("op_xor", 55);
            TraceIn("op_xor", 55);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken INST_XOR244 = default(IToken);
            IToken REG_A245 = default(IToken);
            IToken COMMA246 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> arith_opt247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree INST_XOR244_tree = default(CommonTree);
            CommonTree REG_A245_tree = default(CommonTree);
            CommonTree COMMA246_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "op_xor");
                DebugLocation(182, 45);
                try
                {
                    // GBX.g:182:10: ( INST_XOR ^ ( REG_A COMMA )? arith_opt )
                    DebugEnterAlt(1);
                    // GBX.g:182:12: INST_XOR ^ ( REG_A COMMA )? arith_opt
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(182, 20);
                        INST_XOR244 = (IToken)Match(input, INST_XOR, Follow._INST_XOR_in_op_xor1634);
                        INST_XOR244_tree = (CommonTree)adaptor.Create(INST_XOR244);
                        root_0 = (CommonTree)adaptor.BecomeRoot(INST_XOR244_tree, root_0);
                        DebugLocation(182, 22);
                        // GBX.g:182:22: ( REG_A COMMA )?
                        int alt45 = 2;
                        try
                        {
                            DebugEnterSubRule(45);
                            try
                            {
                                DebugEnterDecision(45, false);
                                int LA45_0 = input.LA(1);

                                if ((LA45_0 == REG_A))
                                {
                                    int LA45_1 = input.LA(2);

                                    if ((LA45_1 == COMMA))
                                    {
                                        alt45 = 1;
                                    }
                                }
                            }
                            finally { DebugExitDecision(45); }
                            switch (alt45)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:182:23: REG_A COMMA
                                    {
                                        DebugLocation(182, 23);
                                        REG_A245 = (IToken)Match(input, REG_A, Follow._REG_A_in_op_xor1638);
                                        REG_A245_tree = (CommonTree)adaptor.Create(REG_A245);
                                        adaptor.AddChild(root_0, REG_A245_tree);
                                        DebugLocation(182, 29);
                                        COMMA246 = (IToken)Match(input, COMMA, Follow._COMMA_in_op_xor1640);
                                        COMMA246_tree = (CommonTree)adaptor.Create(COMMA246);
                                        adaptor.AddChild(root_0, COMMA246_tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(45); }

                        DebugLocation(182, 37);
                        PushFollow(Follow._arith_opt_in_op_xor1644);
                        arith_opt247 = arith_opt();
                        PopFollow();

                        adaptor.AddChild(root_0, arith_opt247.Tree);

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("op_xor", 55);
                    LeaveRule("op_xor", 55);
                    LeaveRule_op_xor();
                }
                DebugLocation(182, 45);
            }
            finally { DebugExitRule(GrammarFileName, "op_xor"); }
            return retval;

        }
        // $ANTLR end "op_xor"

        partial void EnterRule_arith_opt();
        partial void LeaveRule_arith_opt();

        // $ANTLR start "arith_opt"
        // GBX.g:184:1: arith_opt : ( r8 | expression | rr_ref_hl );
        [GrammarRule("arith_opt")]
        private AstParserRuleReturnScope<CommonTree, IToken> arith_opt()
        {
            EnterRule_arith_opt();
            EnterRule("arith_opt", 56);
            TraceIn("arith_opt", 56);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, IToken> r8248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> expression249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl250 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            try
            {
                DebugEnterRule(GrammarFileName, "arith_opt");
                DebugLocation(184, 36);
                try
                {
                    // GBX.g:184:12: ( r8 | expression | rr_ref_hl )
                    int alt46 = 3;
                    try
                    {
                        DebugEnterDecision(46, false);
                        switch (input.LA(1))
                        {
                            case REG_A:
                            case REG_B:
                            case REG_C:
                            case REG_D:
                            case REG_E:
                            case REG_H:
                            case REG_L:
                                {
                                    alt46 = 1;
                                }
                                break;
                            case BANG_MARK:
                            case ID:
                            case LEFT_PARENS:
                            case MINUS_MARK:
                            case NUMBER:
                            case TILDE_MARK:
                                {
                                    alt46 = 2;
                                }
                                break;
                            case LEFT_BRACKET:
                                {
                                    alt46 = 3;
                                }
                                break;
                            default:
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                        }

                    }
                    finally { DebugExitDecision(46); }
                    switch (alt46)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // GBX.g:184:14: r8
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(184, 14);
                                PushFollow(Follow._r8_in_arith_opt1653);
                                r8248 = r8();
                                PopFollow();

                                adaptor.AddChild(root_0, r8248.Tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // GBX.g:184:17: expression
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(184, 17);
                                PushFollow(Follow._expression_in_arith_opt1655);
                                expression249 = expression();
                                PopFollow();

                                adaptor.AddChild(root_0, expression249.Tree);

                            }
                            break;
                        case 3:
                            DebugEnterAlt(3);
                            // GBX.g:184:28: rr_ref_hl
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(184, 28);
                                PushFollow(Follow._rr_ref_hl_in_arith_opt1657);
                                rr_ref_hl250 = rr_ref_hl();
                                PopFollow();

                                adaptor.AddChild(root_0, rr_ref_hl250.Tree);

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("arith_opt", 56);
                    LeaveRule("arith_opt", 56);
                    LeaveRule_arith_opt();
                }
                DebugLocation(184, 36);
            }
            finally { DebugExitRule(GrammarFileName, "arith_opt"); }
            return retval;

        }
        // $ANTLR end "arith_opt"

        partial void EnterRule_cond_opt();
        partial void LeaveRule_cond_opt();

        // $ANTLR start "cond_opt"
        // GBX.g:186:1: cond_opt : ( REG_C | CC_NC | CC_Z | CC_NZ );
        [GrammarRule("cond_opt")]
        private AstParserRuleReturnScope<CommonTree, IToken> cond_opt()
        {
            EnterRule_cond_opt();
            EnterRule("cond_opt", 57);
            TraceIn("cond_opt", 57);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set251 = default(IToken);

            CommonTree set251_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "cond_opt");
                DebugLocation(186, 34);
                try
                {
                    // GBX.g:186:11: ( REG_C | CC_NC | CC_Z | CC_NZ )
                    DebugEnterAlt(1);
                    // GBX.g:
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(186, 11);

                        set251 = (IToken)input.LT(1);
                        if ((input.LA(1) >= CC_NC && input.LA(1) <= CC_Z) || input.LA(1) == REG_C)
                        {
                            input.Consume();
                            adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set251));
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("cond_opt", 57);
                    LeaveRule("cond_opt", 57);
                    LeaveRule_cond_opt();
                }
                DebugLocation(186, 34);
            }
            finally { DebugExitRule(GrammarFileName, "cond_opt"); }
            return retval;

        }
        // $ANTLR end "cond_opt"

        partial void EnterRule_mem_ref();
        partial void LeaveRule_mem_ref();

        // $ANTLR start "mem_ref"
        // GBX.g:188:1: mem_ref : ( rr_ref_c | rr_ref_bc | rr_ref_de | rr_ref_hl | mem_ref_xp );
        [GrammarRule("mem_ref")]
        private AstParserRuleReturnScope<CommonTree, IToken> mem_ref()
        {
            EnterRule_mem_ref();
            EnterRule("mem_ref", 58);
            TraceIn("mem_ref", 58);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_c252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_bc253 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_de254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> mem_ref_xp256 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            try
            {
                DebugEnterRule(GrammarFileName, "mem_ref");
                DebugLocation(188, 16);
                try
                {
                    // GBX.g:188:11: ( rr_ref_c | rr_ref_bc | rr_ref_de | rr_ref_hl | mem_ref_xp )
                    int alt47 = 5;
                    try
                    {
                        DebugEnterDecision(47, false);
                        int LA47_0 = input.LA(1);

                        if ((LA47_0 == LEFT_BRACKET))
                        {
                            switch (input.LA(2))
                            {
                                case REG_C:
                                    {
                                        alt47 = 1;
                                    }
                                    break;
                                case RR_BC:
                                    {
                                        alt47 = 2;
                                    }
                                    break;
                                case RR_DE:
                                    {
                                        alt47 = 3;
                                    }
                                    break;
                                case RR_HL:
                                    {
                                        alt47 = 4;
                                    }
                                    break;
                                case BANG_MARK:
                                case ID:
                                case LEFT_PARENS:
                                case MINUS_MARK:
                                case NUMBER:
                                case TILDE_MARK:
                                    {
                                        alt47 = 5;
                                    }
                                    break;
                                default:
                                    {
                                        NoViableAltException nvae = new NoViableAltException("", 47, 1, input);
                                        DebugRecognitionException(nvae);
                                        throw nvae;
                                    }
                            }

                        }
                        else
                        {
                            NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
                            DebugRecognitionException(nvae);
                            throw nvae;
                        }
                    }
                    finally { DebugExitDecision(47); }
                    switch (alt47)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // GBX.g:188:13: rr_ref_c
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(188, 13);
                                PushFollow(Follow._rr_ref_c_in_mem_ref1682);
                                rr_ref_c252 = rr_ref_c();
                                PopFollow();

                                adaptor.AddChild(root_0, rr_ref_c252.Tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // GBX.g:189:7: rr_ref_bc
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(189, 7);
                                PushFollow(Follow._rr_ref_bc_in_mem_ref1690);
                                rr_ref_bc253 = rr_ref_bc();
                                PopFollow();

                                adaptor.AddChild(root_0, rr_ref_bc253.Tree);

                            }
                            break;
                        case 3:
                            DebugEnterAlt(3);
                            // GBX.g:190:7: rr_ref_de
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(190, 7);
                                PushFollow(Follow._rr_ref_de_in_mem_ref1698);
                                rr_ref_de254 = rr_ref_de();
                                PopFollow();

                                adaptor.AddChild(root_0, rr_ref_de254.Tree);

                            }
                            break;
                        case 4:
                            DebugEnterAlt(4);
                            // GBX.g:191:7: rr_ref_hl
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(191, 7);
                                PushFollow(Follow._rr_ref_hl_in_mem_ref1706);
                                rr_ref_hl255 = rr_ref_hl();
                                PopFollow();

                                adaptor.AddChild(root_0, rr_ref_hl255.Tree);

                            }
                            break;
                        case 5:
                            DebugEnterAlt(5);
                            // GBX.g:192:7: mem_ref_xp
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(192, 7);
                                PushFollow(Follow._mem_ref_xp_in_mem_ref1714);
                                mem_ref_xp256 = mem_ref_xp();
                                PopFollow();

                                adaptor.AddChild(root_0, mem_ref_xp256.Tree);

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("mem_ref", 58);
                    LeaveRule("mem_ref", 58);
                    LeaveRule_mem_ref();
                }
                DebugLocation(192, 16);
            }
            finally { DebugExitRule(GrammarFileName, "mem_ref"); }
            return retval;

        }
        // $ANTLR end "mem_ref"

        partial void EnterRule_mem_ref_xp();
        partial void LeaveRule_mem_ref_xp();

        // $ANTLR start "mem_ref_xp"
        // GBX.g:194:1: mem_ref_xp : LEFT_BRACKET expression RIGHT_BRACKET -> ^( MEM_REF expression ) ;
        [GrammarRule("mem_ref_xp")]
        private AstParserRuleReturnScope<CommonTree, IToken> mem_ref_xp()
        {
            EnterRule_mem_ref_xp();
            EnterRule("mem_ref_xp", 59);
            TraceIn("mem_ref_xp", 59);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken LEFT_BRACKET257 = default(IToken);
            IToken RIGHT_BRACKET259 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression258 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree LEFT_BRACKET257_tree = default(CommonTree);
            CommonTree RIGHT_BRACKET259_tree = default(CommonTree);
            RewriteRuleITokenStream stream_LEFT_BRACKET = new RewriteRuleITokenStream(adaptor, "token LEFT_BRACKET");
            RewriteRuleITokenStream stream_RIGHT_BRACKET = new RewriteRuleITokenStream(adaptor, "token RIGHT_BRACKET");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
            try
            {
                DebugEnterRule(GrammarFileName, "mem_ref_xp");
                DebugLocation(194, 76);
                try
                {
                    // GBX.g:194:13: ( LEFT_BRACKET expression RIGHT_BRACKET -> ^( MEM_REF expression ) )
                    DebugEnterAlt(1);
                    // GBX.g:194:15: LEFT_BRACKET expression RIGHT_BRACKET
                    {
                        DebugLocation(194, 15);
                        LEFT_BRACKET257 = (IToken)Match(input, LEFT_BRACKET, Follow._LEFT_BRACKET_in_mem_ref_xp1723);
                        stream_LEFT_BRACKET.Add(LEFT_BRACKET257);

                        DebugLocation(194, 28);
                        PushFollow(Follow._expression_in_mem_ref_xp1725);
                        expression258 = expression();
                        PopFollow();

                        stream_expression.Add(expression258.Tree);
                        DebugLocation(194, 39);
                        RIGHT_BRACKET259 = (IToken)Match(input, RIGHT_BRACKET, Follow._RIGHT_BRACKET_in_mem_ref_xp1727);
                        stream_RIGHT_BRACKET.Add(RIGHT_BRACKET259);



                        {
                            // AST REWRITE
                            // elements: expression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 194:53: -> ^( MEM_REF expression )
                            {
                                DebugLocation(194, 56);
                                // GBX.g:194:56: ^( MEM_REF expression )
                                {
                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                    DebugLocation(194, 58);
                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MEM_REF, "MEM_REF"), root_1);

                                    DebugLocation(194, 66);
                                    adaptor.AddChild(root_1, stream_expression.NextTree());

                                    adaptor.AddChild(root_0, root_1);
                                }

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("mem_ref_xp", 59);
                    LeaveRule("mem_ref_xp", 59);
                    LeaveRule_mem_ref_xp();
                }
                DebugLocation(194, 76);
            }
            finally { DebugExitRule(GrammarFileName, "mem_ref_xp"); }
            return retval;

        }
        // $ANTLR end "mem_ref_xp"

        partial void EnterRule_r8();
        partial void LeaveRule_r8();

        // $ANTLR start "r8"
        // GBX.g:196:1: r8 : ( REG_A | REG_B | REG_C | REG_D | REG_E | REG_H | REG_L );
        [GrammarRule("r8")]
        private AstParserRuleReturnScope<CommonTree, IToken> r8()
        {
            EnterRule_r8();
            EnterRule("r8", 60);
            TraceIn("r8", 60);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set260 = default(IToken);

            CommonTree set260_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "r8");
                DebugLocation(196, 49);
                try
                {
                    // GBX.g:196:7: ( REG_A | REG_B | REG_C | REG_D | REG_E | REG_H | REG_L )
                    DebugEnterAlt(1);
                    // GBX.g:
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(196, 7);

                        set260 = (IToken)input.LT(1);
                        if ((input.LA(1) >= REG_A && input.LA(1) <= REG_L))
                        {
                            input.Consume();
                            adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set260));
                            state.errorRecovery = false;
                        }
                        else
                        {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            DebugRecognitionException(mse);
                            throw mse;
                        }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("r8", 60);
                    LeaveRule("r8", 60);
                    LeaveRule_r8();
                }
                DebugLocation(196, 49);
            }
            finally { DebugExitRule(GrammarFileName, "r8"); }
            return retval;

        }
        // $ANTLR end "r8"

        partial void EnterRule_expression();
        partial void LeaveRule_expression();

        // $ANTLR start "expression"
        // GBX.g:198:1: expression : cond_exp -> ^( EXPRESSION cond_exp ) ;
        [GrammarRule("expression")]
        private AstParserRuleReturnScope<CommonTree, IToken> expression()
        {
            EnterRule_expression();
            EnterRule("expression", 61);
            TraceIn("expression", 61);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            AstParserRuleReturnScope<CommonTree, IToken> cond_exp261 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            RewriteRuleSubtreeStream stream_cond_exp = new RewriteRuleSubtreeStream(adaptor, "rule cond_exp");
            try
            {
                DebugEnterRule(GrammarFileName, "expression");
                DebugLocation(198, 48);
                try
                {
                    // GBX.g:198:13: ( cond_exp -> ^( EXPRESSION cond_exp ) )
                    DebugEnterAlt(1);
                    // GBX.g:198:15: cond_exp
                    {
                        DebugLocation(198, 15);
                        PushFollow(Follow._cond_exp_in_expression1768);
                        cond_exp261 = cond_exp();
                        PopFollow();

                        stream_cond_exp.Add(cond_exp261.Tree);


                        {
                            // AST REWRITE
                            // elements: cond_exp
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 198:24: -> ^( EXPRESSION cond_exp )
                            {
                                DebugLocation(198, 27);
                                // GBX.g:198:27: ^( EXPRESSION cond_exp )
                                {
                                    CommonTree root_1 = (CommonTree)adaptor.Nil();
                                    DebugLocation(198, 29);
                                    root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPRESSION, "EXPRESSION"), root_1);

                                    DebugLocation(198, 40);
                                    adaptor.AddChild(root_1, stream_cond_exp.NextTree());

                                    adaptor.AddChild(root_0, root_1);
                                }

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("expression", 61);
                    LeaveRule("expression", 61);
                    LeaveRule_expression();
                }
                DebugLocation(198, 48);
            }
            finally { DebugExitRule(GrammarFileName, "expression"); }
            return retval;

        }
        // $ANTLR end "expression"

        partial void EnterRule_cond_exp();
        partial void LeaveRule_cond_exp();

        // $ANTLR start "cond_exp"
        // GBX.g:199:1: cond_exp : bool_or_exp ( '?' ^ bool_or_exp ':' ! bool_or_exp )? ;
        [GrammarRule("cond_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> cond_exp()
        {
            EnterRule_cond_exp();
            EnterRule("cond_exp", 62);
            TraceIn("cond_exp", 62);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken char_literal263 = default(IToken);
            IToken char_literal265 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> bool_or_exp262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> bool_or_exp264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> bool_or_exp266 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree char_literal263_tree = default(CommonTree);
            CommonTree char_literal265_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "cond_exp");
                DebugLocation(199, 64);
                try
                {
                    // GBX.g:199:11: ( bool_or_exp ( '?' ^ bool_or_exp ':' ! bool_or_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:199:13: bool_or_exp ( '?' ^ bool_or_exp ':' ! bool_or_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(199, 13);
                        PushFollow(Follow._bool_or_exp_in_cond_exp1784);
                        bool_or_exp262 = bool_or_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, bool_or_exp262.Tree);
                        DebugLocation(199, 25);
                        // GBX.g:199:25: ( '?' ^ bool_or_exp ':' ! bool_or_exp )?
                        int alt48 = 2;
                        try
                        {
                            DebugEnterSubRule(48);
                            try
                            {
                                DebugEnterDecision(48, false);
                                int LA48_0 = input.LA(1);

                                if ((LA48_0 == QUEST_MARK))
                                {
                                    alt48 = 1;
                                }
                            }
                            finally { DebugExitDecision(48); }
                            switch (alt48)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:199:26: '?' ^ bool_or_exp ':' ! bool_or_exp
                                    {
                                        DebugLocation(199, 29);
                                        char_literal263 = (IToken)Match(input, QUEST_MARK, Follow._QUEST_MARK_in_cond_exp1787);
                                        char_literal263_tree = (CommonTree)adaptor.Create(char_literal263);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(char_literal263_tree, root_0);
                                        DebugLocation(199, 35);
                                        PushFollow(Follow._bool_or_exp_in_cond_exp1794);
                                        bool_or_exp264 = bool_or_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, bool_or_exp264.Tree);
                                        DebugLocation(199, 50);
                                        char_literal265 = (IToken)Match(input, COLON_MARK, Follow._COLON_MARK_in_cond_exp1796);
                                        DebugLocation(199, 52);
                                        PushFollow(Follow._bool_or_exp_in_cond_exp1799);
                                        bool_or_exp266 = bool_or_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, bool_or_exp266.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(48); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("cond_exp", 62);
                    LeaveRule("cond_exp", 62);
                    LeaveRule_cond_exp();
                }
                DebugLocation(199, 64);
            }
            finally { DebugExitRule(GrammarFileName, "cond_exp"); }
            return retval;

        }
        // $ANTLR end "cond_exp"

        partial void EnterRule_bool_or_exp();
        partial void LeaveRule_bool_or_exp();

        // $ANTLR start "bool_or_exp"
        // GBX.g:200:1: bool_or_exp : bool_and_exp ( '||' ^ bool_and_exp )? ;
        [GrammarRule("bool_or_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> bool_or_exp()
        {
            EnterRule_bool_or_exp();
            EnterRule("bool_or_exp", 63);
            TraceIn("bool_or_exp", 63);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken string_literal268 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> bool_and_exp267 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> bool_and_exp269 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree string_literal268_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "bool_or_exp");
                DebugLocation(200, 52);
                try
                {
                    // GBX.g:200:14: ( bool_and_exp ( '||' ^ bool_and_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:200:16: bool_and_exp ( '||' ^ bool_and_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(200, 16);
                        PushFollow(Follow._bool_and_exp_in_bool_or_exp1809);
                        bool_and_exp267 = bool_and_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, bool_and_exp267.Tree);
                        DebugLocation(200, 28);
                        // GBX.g:200:28: ( '||' ^ bool_and_exp )?
                        int alt49 = 2;
                        try
                        {
                            DebugEnterSubRule(49);
                            try
                            {
                                DebugEnterDecision(49, false);
                                int LA49_0 = input.LA(1);

                                if ((LA49_0 == BOOL_OR_MARK))
                                {
                                    alt49 = 1;
                                }
                            }
                            finally { DebugExitDecision(49); }
                            switch (alt49)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:200:29: '||' ^ bool_and_exp
                                    {
                                        DebugLocation(200, 33);
                                        string_literal268 = (IToken)Match(input, BOOL_OR_MARK, Follow._BOOL_OR_MARK_in_bool_or_exp1811);
                                        string_literal268_tree = (CommonTree)adaptor.Create(string_literal268);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(string_literal268_tree, root_0);
                                        DebugLocation(200, 39);
                                        PushFollow(Follow._bool_and_exp_in_bool_or_exp1818);
                                        bool_and_exp269 = bool_and_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, bool_and_exp269.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(49); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("bool_or_exp", 63);
                    LeaveRule("bool_or_exp", 63);
                    LeaveRule_bool_or_exp();
                }
                DebugLocation(200, 52);
            }
            finally { DebugExitRule(GrammarFileName, "bool_or_exp"); }
            return retval;

        }
        // $ANTLR end "bool_or_exp"

        partial void EnterRule_bool_and_exp();
        partial void LeaveRule_bool_and_exp();

        // $ANTLR start "bool_and_exp"
        // GBX.g:201:1: bool_and_exp : or_exp ( '&&' ^ or_exp )? ;
        [GrammarRule("bool_and_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> bool_and_exp()
        {
            EnterRule_bool_and_exp();
            EnterRule("bool_and_exp", 64);
            TraceIn("bool_and_exp", 64);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken string_literal271 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> or_exp270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> or_exp272 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree string_literal271_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "bool_and_exp");
                DebugLocation(201, 42);
                try
                {
                    // GBX.g:201:14: ( or_exp ( '&&' ^ or_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:201:16: or_exp ( '&&' ^ or_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(201, 16);
                        PushFollow(Follow._or_exp_in_bool_and_exp1827);
                        or_exp270 = or_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, or_exp270.Tree);
                        DebugLocation(201, 24);
                        // GBX.g:201:24: ( '&&' ^ or_exp )?
                        int alt50 = 2;
                        try
                        {
                            DebugEnterSubRule(50);
                            try
                            {
                                DebugEnterDecision(50, false);
                                int LA50_0 = input.LA(1);

                                if ((LA50_0 == BOOL_AND_MARK))
                                {
                                    alt50 = 1;
                                }
                            }
                            finally { DebugExitDecision(50); }
                            switch (alt50)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:201:25: '&&' ^ or_exp
                                    {
                                        DebugLocation(201, 29);
                                        string_literal271 = (IToken)Match(input, BOOL_AND_MARK, Follow._BOOL_AND_MARK_in_bool_and_exp1831);
                                        string_literal271_tree = (CommonTree)adaptor.Create(string_literal271);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(string_literal271_tree, root_0);
                                        DebugLocation(201, 35);
                                        PushFollow(Follow._or_exp_in_bool_and_exp1838);
                                        or_exp272 = or_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, or_exp272.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(50); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("bool_and_exp", 64);
                    LeaveRule("bool_and_exp", 64);
                    LeaveRule_bool_and_exp();
                }
                DebugLocation(201, 42);
            }
            finally { DebugExitRule(GrammarFileName, "bool_and_exp"); }
            return retval;

        }
        // $ANTLR end "bool_and_exp"

        partial void EnterRule_or_exp();
        partial void LeaveRule_or_exp();

        // $ANTLR start "or_exp"
        // GBX.g:202:1: or_exp : xor_exp ( '|' ^ xor_exp )? ;
        [GrammarRule("or_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> or_exp()
        {
            EnterRule_or_exp();
            EnterRule("or_exp", 65);
            TraceIn("or_exp", 65);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken char_literal274 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> xor_exp273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> xor_exp275 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree char_literal274_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "or_exp");
                DebugLocation(202, 39);
                try
                {
                    // GBX.g:202:10: ( xor_exp ( '|' ^ xor_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:202:12: xor_exp ( '|' ^ xor_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(202, 12);
                        PushFollow(Follow._xor_exp_in_or_exp1849);
                        xor_exp273 = xor_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, xor_exp273.Tree);
                        DebugLocation(202, 21);
                        // GBX.g:202:21: ( '|' ^ xor_exp )?
                        int alt51 = 2;
                        try
                        {
                            DebugEnterSubRule(51);
                            try
                            {
                                DebugEnterDecision(51, false);
                                int LA51_0 = input.LA(1);

                                if ((LA51_0 == BAR_MARK))
                                {
                                    alt51 = 1;
                                }
                            }
                            finally { DebugExitDecision(51); }
                            switch (alt51)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:202:22: '|' ^ xor_exp
                                    {
                                        DebugLocation(202, 25);
                                        char_literal274 = (IToken)Match(input, BAR_MARK, Follow._BAR_MARK_in_or_exp1853);
                                        char_literal274_tree = (CommonTree)adaptor.Create(char_literal274);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(char_literal274_tree, root_0);
                                        DebugLocation(202, 31);
                                        PushFollow(Follow._xor_exp_in_or_exp1860);
                                        xor_exp275 = xor_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, xor_exp275.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(51); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("or_exp", 65);
                    LeaveRule("or_exp", 65);
                    LeaveRule_or_exp();
                }
                DebugLocation(202, 39);
            }
            finally { DebugExitRule(GrammarFileName, "or_exp"); }
            return retval;

        }
        // $ANTLR end "or_exp"

        partial void EnterRule_xor_exp();
        partial void LeaveRule_xor_exp();

        // $ANTLR start "xor_exp"
        // GBX.g:203:1: xor_exp : and_exp ( '^' ^ and_exp )? ;
        [GrammarRule("xor_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> xor_exp()
        {
            EnterRule_xor_exp();
            EnterRule("xor_exp", 66);
            TraceIn("xor_exp", 66);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken char_literal277 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> and_exp276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> and_exp278 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree char_literal277_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "xor_exp");
                DebugLocation(203, 40);
                try
                {
                    // GBX.g:203:11: ( and_exp ( '^' ^ and_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:203:13: and_exp ( '^' ^ and_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(203, 13);
                        PushFollow(Follow._and_exp_in_xor_exp1871);
                        and_exp276 = and_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, and_exp276.Tree);
                        DebugLocation(203, 22);
                        // GBX.g:203:22: ( '^' ^ and_exp )?
                        int alt52 = 2;
                        try
                        {
                            DebugEnterSubRule(52);
                            try
                            {
                                DebugEnterDecision(52, false);
                                int LA52_0 = input.LA(1);

                                if ((LA52_0 == CARET_MARK))
                                {
                                    alt52 = 1;
                                }
                            }
                            finally { DebugExitDecision(52); }
                            switch (alt52)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:203:23: '^' ^ and_exp
                                    {
                                        DebugLocation(203, 26);
                                        char_literal277 = (IToken)Match(input, CARET_MARK, Follow._CARET_MARK_in_xor_exp1875);
                                        char_literal277_tree = (CommonTree)adaptor.Create(char_literal277);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(char_literal277_tree, root_0);
                                        DebugLocation(203, 32);
                                        PushFollow(Follow._and_exp_in_xor_exp1882);
                                        and_exp278 = and_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, and_exp278.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(52); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("xor_exp", 66);
                    LeaveRule("xor_exp", 66);
                    LeaveRule_xor_exp();
                }
                DebugLocation(203, 40);
            }
            finally { DebugExitRule(GrammarFileName, "xor_exp"); }
            return retval;

        }
        // $ANTLR end "xor_exp"

        partial void EnterRule_and_exp();
        partial void LeaveRule_and_exp();

        // $ANTLR start "and_exp"
        // GBX.g:204:1: and_exp : equals_exp ( '&' ^ equals_exp )? ;
        [GrammarRule("and_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> and_exp()
        {
            EnterRule_and_exp();
            EnterRule("and_exp", 67);
            TraceIn("and_exp", 67);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken char_literal280 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> equals_exp279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> equals_exp281 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree char_literal280_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "and_exp");
                DebugLocation(204, 45);
                try
                {
                    // GBX.g:204:11: ( equals_exp ( '&' ^ equals_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:204:13: equals_exp ( '&' ^ equals_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(204, 13);
                        PushFollow(Follow._equals_exp_in_and_exp1893);
                        equals_exp279 = equals_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, equals_exp279.Tree);
                        DebugLocation(204, 24);
                        // GBX.g:204:24: ( '&' ^ equals_exp )?
                        int alt53 = 2;
                        try
                        {
                            DebugEnterSubRule(53);
                            try
                            {
                                DebugEnterDecision(53, false);
                                int LA53_0 = input.LA(1);

                                if ((LA53_0 == AMP_MARK))
                                {
                                    alt53 = 1;
                                }
                            }
                            finally { DebugExitDecision(53); }
                            switch (alt53)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:204:25: '&' ^ equals_exp
                                    {
                                        DebugLocation(204, 28);
                                        char_literal280 = (IToken)Match(input, AMP_MARK, Follow._AMP_MARK_in_and_exp1896);
                                        char_literal280_tree = (CommonTree)adaptor.Create(char_literal280);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(char_literal280_tree, root_0);
                                        DebugLocation(204, 34);
                                        PushFollow(Follow._equals_exp_in_and_exp1903);
                                        equals_exp281 = equals_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, equals_exp281.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(53); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("and_exp", 67);
                    LeaveRule("and_exp", 67);
                    LeaveRule_and_exp();
                }
                DebugLocation(204, 45);
            }
            finally { DebugExitRule(GrammarFileName, "and_exp"); }
            return retval;

        }
        // $ANTLR end "and_exp"

        partial void EnterRule_equals_exp();
        partial void LeaveRule_equals_exp();

        // $ANTLR start "equals_exp"
        // GBX.g:205:1: equals_exp : compare_exp ( ( '==' | '!=' ) ^ compare_exp )? ;
        [GrammarRule("equals_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> equals_exp()
        {
            EnterRule_equals_exp();
            EnterRule("equals_exp", 68);
            TraceIn("equals_exp", 68);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set283 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> compare_exp282 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> compare_exp284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree set283_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "equals_exp");
                DebugLocation(205, 55);
                try
                {
                    // GBX.g:205:13: ( compare_exp ( ( '==' | '!=' ) ^ compare_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:205:15: compare_exp ( ( '==' | '!=' ) ^ compare_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(205, 15);
                        PushFollow(Follow._compare_exp_in_equals_exp1913);
                        compare_exp282 = compare_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, compare_exp282.Tree);
                        DebugLocation(205, 27);
                        // GBX.g:205:27: ( ( '==' | '!=' ) ^ compare_exp )?
                        int alt54 = 2;
                        try
                        {
                            DebugEnterSubRule(54);
                            try
                            {
                                DebugEnterDecision(54, false);
                                int LA54_0 = input.LA(1);

                                if ((LA54_0 == EQUIV_MARK || LA54_0 == NOT_EQUIV_MARK))
                                {
                                    alt54 = 1;
                                }
                            }
                            finally { DebugExitDecision(54); }
                            switch (alt54)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:205:28: ( '==' | '!=' ) ^ compare_exp
                                    {
                                        DebugLocation(205, 39);

                                        set283 = (IToken)input.LT(1);
                                        set283 = (IToken)input.LT(1);
                                        if (input.LA(1) == EQUIV_MARK || input.LA(1) == NOT_EQUIV_MARK)
                                        {
                                            input.Consume();
                                            root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set283), root_0);
                                            state.errorRecovery = false;
                                        }
                                        else
                                        {
                                            MismatchedSetException mse = new MismatchedSetException(null, input);
                                            DebugRecognitionException(mse);
                                            throw mse;
                                        }

                                        DebugLocation(205, 43);
                                        PushFollow(Follow._compare_exp_in_equals_exp1925);
                                        compare_exp284 = compare_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, compare_exp284.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(54); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("equals_exp", 68);
                    LeaveRule("equals_exp", 68);
                    LeaveRule_equals_exp();
                }
                DebugLocation(205, 55);
            }
            finally { DebugExitRule(GrammarFileName, "equals_exp"); }
            return retval;

        }
        // $ANTLR end "equals_exp"

        partial void EnterRule_compare_exp();
        partial void LeaveRule_compare_exp();

        // $ANTLR start "compare_exp"
        // GBX.g:206:1: compare_exp : shift_exp ( ( '<' | '>' | '<=' | '>=' ) ^ shift_exp )? ;
        [GrammarRule("compare_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> compare_exp()
        {
            EnterRule_compare_exp();
            EnterRule("compare_exp", 69);
            TraceIn("compare_exp", 69);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set286 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> shift_exp285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> shift_exp287 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree set286_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "compare_exp");
                DebugLocation(206, 58);
                try
                {
                    // GBX.g:206:14: ( shift_exp ( ( '<' | '>' | '<=' | '>=' ) ^ shift_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:206:16: shift_exp ( ( '<' | '>' | '<=' | '>=' ) ^ shift_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(206, 16);
                        PushFollow(Follow._shift_exp_in_compare_exp1935);
                        shift_exp285 = shift_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, shift_exp285.Tree);
                        DebugLocation(206, 26);
                        // GBX.g:206:26: ( ( '<' | '>' | '<=' | '>=' ) ^ shift_exp )?
                        int alt55 = 2;
                        try
                        {
                            DebugEnterSubRule(55);
                            try
                            {
                                DebugEnterDecision(55, false);
                                int LA55_0 = input.LA(1);

                                if (((LA55_0 >= GTE_MARK && LA55_0 <= GT_MARK) || (LA55_0 >= LTE_MARK && LA55_0 <= LT_MARK)))
                                {
                                    alt55 = 1;
                                }
                            }
                            finally { DebugExitDecision(55); }
                            switch (alt55)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:206:27: ( '<' | '>' | '<=' | '>=' ) ^ shift_exp
                                    {
                                        DebugLocation(206, 46);

                                        set286 = (IToken)input.LT(1);
                                        set286 = (IToken)input.LT(1);
                                        if ((input.LA(1) >= GTE_MARK && input.LA(1) <= GT_MARK) || (input.LA(1) >= LTE_MARK && input.LA(1) <= LT_MARK))
                                        {
                                            input.Consume();
                                            root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set286), root_0);
                                            state.errorRecovery = false;
                                        }
                                        else
                                        {
                                            MismatchedSetException mse = new MismatchedSetException(null, input);
                                            DebugRecognitionException(mse);
                                            throw mse;
                                        }

                                        DebugLocation(206, 48);
                                        PushFollow(Follow._shift_exp_in_compare_exp1949);
                                        shift_exp287 = shift_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, shift_exp287.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(55); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("compare_exp", 69);
                    LeaveRule("compare_exp", 69);
                    LeaveRule_compare_exp();
                }
                DebugLocation(206, 58);
            }
            finally { DebugExitRule(GrammarFileName, "compare_exp"); }
            return retval;

        }
        // $ANTLR end "compare_exp"

        partial void EnterRule_shift_exp();
        partial void LeaveRule_shift_exp();

        // $ANTLR start "shift_exp"
        // GBX.g:207:1: shift_exp : add_exp ( ( '<<' | '>>' ) ^ shift_exp )? ;
        [GrammarRule("shift_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> shift_exp()
        {
            EnterRule_shift_exp();
            EnterRule("shift_exp", 70);
            TraceIn("shift_exp", 70);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set289 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> add_exp288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> shift_exp290 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree set289_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "shift_exp");
                DebugLocation(207, 49);
                try
                {
                    // GBX.g:207:12: ( add_exp ( ( '<<' | '>>' ) ^ shift_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:207:14: add_exp ( ( '<<' | '>>' ) ^ shift_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(207, 14);
                        PushFollow(Follow._add_exp_in_shift_exp1959);
                        add_exp288 = add_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, add_exp288.Tree);
                        DebugLocation(207, 23);
                        // GBX.g:207:23: ( ( '<<' | '>>' ) ^ shift_exp )?
                        int alt56 = 2;
                        try
                        {
                            DebugEnterSubRule(56);
                            try
                            {
                                DebugEnterDecision(56, false);
                                int LA56_0 = input.LA(1);

                                if ((LA56_0 == LSHIFT_MARK || LA56_0 == RSHIFT_MARK))
                                {
                                    alt56 = 1;
                                }
                            }
                            finally { DebugExitDecision(56); }
                            switch (alt56)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:207:24: ( '<<' | '>>' ) ^ shift_exp
                                    {
                                        DebugLocation(207, 35);

                                        set289 = (IToken)input.LT(1);
                                        set289 = (IToken)input.LT(1);
                                        if (input.LA(1) == LSHIFT_MARK || input.LA(1) == RSHIFT_MARK)
                                        {
                                            input.Consume();
                                            root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set289), root_0);
                                            state.errorRecovery = false;
                                        }
                                        else
                                        {
                                            MismatchedSetException mse = new MismatchedSetException(null, input);
                                            DebugRecognitionException(mse);
                                            throw mse;
                                        }

                                        DebugLocation(207, 39);
                                        PushFollow(Follow._shift_exp_in_shift_exp1972);
                                        shift_exp290 = shift_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, shift_exp290.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(56); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("shift_exp", 70);
                    LeaveRule("shift_exp", 70);
                    LeaveRule_shift_exp();
                }
                DebugLocation(207, 49);
            }
            finally { DebugExitRule(GrammarFileName, "shift_exp"); }
            return retval;

        }
        // $ANTLR end "shift_exp"

        partial void EnterRule_add_exp();
        partial void LeaveRule_add_exp();

        // $ANTLR start "add_exp"
        // GBX.g:208:1: add_exp : multiply_exp ( ( '+' | '-' ) ^ multiply_exp )? ;
        [GrammarRule("add_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> add_exp()
        {
            EnterRule_add_exp();
            EnterRule("add_exp", 71);
            TraceIn("add_exp", 71);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set292 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> multiply_exp291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> multiply_exp293 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree set292_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "add_exp");
                DebugLocation(208, 53);
                try
                {
                    // GBX.g:208:11: ( multiply_exp ( ( '+' | '-' ) ^ multiply_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:208:13: multiply_exp ( ( '+' | '-' ) ^ multiply_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(208, 13);
                        PushFollow(Follow._multiply_exp_in_add_exp1983);
                        multiply_exp291 = multiply_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, multiply_exp291.Tree);
                        DebugLocation(208, 25);
                        // GBX.g:208:25: ( ( '+' | '-' ) ^ multiply_exp )?
                        int alt57 = 2;
                        try
                        {
                            DebugEnterSubRule(57);
                            try
                            {
                                DebugEnterDecision(57, false);
                                int LA57_0 = input.LA(1);

                                if ((LA57_0 == MINUS_MARK || LA57_0 == PLUS_MARK))
                                {
                                    alt57 = 1;
                                }
                            }
                            finally { DebugExitDecision(57); }
                            switch (alt57)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:208:26: ( '+' | '-' ) ^ multiply_exp
                                    {
                                        DebugLocation(208, 35);

                                        set292 = (IToken)input.LT(1);
                                        set292 = (IToken)input.LT(1);
                                        if (input.LA(1) == MINUS_MARK || input.LA(1) == PLUS_MARK)
                                        {
                                            input.Consume();
                                            root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set292), root_0);
                                            state.errorRecovery = false;
                                        }
                                        else
                                        {
                                            MismatchedSetException mse = new MismatchedSetException(null, input);
                                            DebugRecognitionException(mse);
                                            throw mse;
                                        }

                                        DebugLocation(208, 40);
                                        PushFollow(Follow._multiply_exp_in_add_exp1995);
                                        multiply_exp293 = multiply_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, multiply_exp293.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(57); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("add_exp", 71);
                    LeaveRule("add_exp", 71);
                    LeaveRule_add_exp();
                }
                DebugLocation(208, 53);
            }
            finally { DebugExitRule(GrammarFileName, "add_exp"); }
            return retval;

        }
        // $ANTLR end "add_exp"

        partial void EnterRule_multiply_exp();
        partial void LeaveRule_multiply_exp();

        // $ANTLR start "multiply_exp"
        // GBX.g:209:1: multiply_exp : unary_exp ( ( '*' | '/' | '%' ) ^ unary_exp )? ;
        [GrammarRule("multiply_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> multiply_exp()
        {
            EnterRule_multiply_exp();
            EnterRule("multiply_exp", 72);
            TraceIn("multiply_exp", 72);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set295 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> unary_exp294 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> unary_exp296 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree set295_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "multiply_exp");
                DebugLocation(209, 54);
                try
                {
                    // GBX.g:209:14: ( unary_exp ( ( '*' | '/' | '%' ) ^ unary_exp )? )
                    DebugEnterAlt(1);
                    // GBX.g:209:16: unary_exp ( ( '*' | '/' | '%' ) ^ unary_exp )?
                    {
                        root_0 = (CommonTree)adaptor.Nil();

                        DebugLocation(209, 16);
                        PushFollow(Follow._unary_exp_in_multiply_exp2004);
                        unary_exp294 = unary_exp();
                        PopFollow();

                        adaptor.AddChild(root_0, unary_exp294.Tree);
                        DebugLocation(209, 26);
                        // GBX.g:209:26: ( ( '*' | '/' | '%' ) ^ unary_exp )?
                        int alt58 = 2;
                        try
                        {
                            DebugEnterSubRule(58);
                            try
                            {
                                DebugEnterDecision(58, false);
                                int LA58_0 = input.LA(1);

                                if ((LA58_0 == FSLASH_MARK || LA58_0 == PERCENT_MARK || LA58_0 == STAR_MARK))
                                {
                                    alt58 = 1;
                                }
                            }
                            finally { DebugExitDecision(58); }
                            switch (alt58)
                            {
                                case 1:
                                    DebugEnterAlt(1);
                                    // GBX.g:209:27: ( '*' | '/' | '%' ) ^ unary_exp
                                    {
                                        DebugLocation(209, 40);

                                        set295 = (IToken)input.LT(1);
                                        set295 = (IToken)input.LT(1);
                                        if (input.LA(1) == FSLASH_MARK || input.LA(1) == PERCENT_MARK || input.LA(1) == STAR_MARK)
                                        {
                                            input.Consume();
                                            root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set295), root_0);
                                            state.errorRecovery = false;
                                        }
                                        else
                                        {
                                            MismatchedSetException mse = new MismatchedSetException(null, input);
                                            DebugRecognitionException(mse);
                                            throw mse;
                                        }

                                        DebugLocation(209, 44);
                                        PushFollow(Follow._unary_exp_in_multiply_exp2018);
                                        unary_exp296 = unary_exp();
                                        PopFollow();

                                        adaptor.AddChild(root_0, unary_exp296.Tree);

                                    }
                                    break;

                            }
                        }
                        finally { DebugExitSubRule(58); }


                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("multiply_exp", 72);
                    LeaveRule("multiply_exp", 72);
                    LeaveRule_multiply_exp();
                }
                DebugLocation(209, 54);
            }
            finally { DebugExitRule(GrammarFileName, "multiply_exp"); }
            return retval;

        }
        // $ANTLR end "multiply_exp"

        partial void EnterRule_unary_exp();
        partial void LeaveRule_unary_exp();

        // $ANTLR start "unary_exp"
        // GBX.g:210:1: unary_exp : ( literal | ( '~' | '-' | '!' ) ^ unary_exp );
        [GrammarRule("unary_exp")]
        private AstParserRuleReturnScope<CommonTree, IToken> unary_exp()
        {
            EnterRule_unary_exp();
            EnterRule("unary_exp", 73);
            TraceIn("unary_exp", 73);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken set298 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> literal297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
            AstParserRuleReturnScope<CommonTree, IToken> unary_exp299 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree set298_tree = default(CommonTree);
            try
            {
                DebugEnterRule(GrammarFileName, "unary_exp");
                DebugLocation(210, 30);
                try
                {
                    // GBX.g:210:12: ( literal | ( '~' | '-' | '!' ) ^ unary_exp )
                    int alt59 = 2;
                    try
                    {
                        DebugEnterDecision(59, false);
                        int LA59_0 = input.LA(1);

                        if ((LA59_0 == ID || LA59_0 == LEFT_PARENS || LA59_0 == NUMBER))
                        {
                            alt59 = 1;
                        }
                        else if ((LA59_0 == BANG_MARK || LA59_0 == MINUS_MARK || LA59_0 == TILDE_MARK))
                        {
                            alt59 = 2;
                        }
                        else
                        {
                            NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
                            DebugRecognitionException(nvae);
                            throw nvae;
                        }
                    }
                    finally { DebugExitDecision(59); }
                    switch (alt59)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // GBX.g:210:14: literal
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(210, 14);
                                PushFollow(Follow._literal_in_unary_exp2028);
                                literal297 = literal();
                                PopFollow();

                                adaptor.AddChild(root_0, literal297.Tree);

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // GBX.g:211:7: ( '~' | '-' | '!' ) ^ unary_exp
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(211, 20);

                                set298 = (IToken)input.LT(1);
                                set298 = (IToken)input.LT(1);
                                if (input.LA(1) == BANG_MARK || input.LA(1) == MINUS_MARK || input.LA(1) == TILDE_MARK)
                                {
                                    input.Consume();
                                    root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set298), root_0);
                                    state.errorRecovery = false;
                                }
                                else
                                {
                                    MismatchedSetException mse = new MismatchedSetException(null, input);
                                    DebugRecognitionException(mse);
                                    throw mse;
                                }

                                DebugLocation(211, 22);
                                PushFollow(Follow._unary_exp_in_unary_exp2045);
                                unary_exp299 = unary_exp();
                                PopFollow();

                                adaptor.AddChild(root_0, unary_exp299.Tree);

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("unary_exp", 73);
                    LeaveRule("unary_exp", 73);
                    LeaveRule_unary_exp();
                }
                DebugLocation(211, 30);
            }
            finally { DebugExitRule(GrammarFileName, "unary_exp"); }
            return retval;

        }
        // $ANTLR end "unary_exp"

        partial void EnterRule_literal();
        partial void LeaveRule_literal();

        // $ANTLR start "literal"
        // GBX.g:212:1: literal : ( ID -> ^( VAR ID ) | NUMBER | LEFT_PARENS expression RIGHT_PARENS -> expression );
        [GrammarRule("literal")]
        private AstParserRuleReturnScope<CommonTree, IToken> literal()
        {
            EnterRule_literal();
            EnterRule("literal", 74);
            TraceIn("literal", 74);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken ID300 = default(IToken);
            IToken NUMBER301 = default(IToken);
            IToken LEFT_PARENS302 = default(IToken);
            IToken RIGHT_PARENS304 = default(IToken);
            AstParserRuleReturnScope<CommonTree, IToken> expression303 = default(AstParserRuleReturnScope<CommonTree, IToken>);

            CommonTree ID300_tree = default(CommonTree);
            CommonTree NUMBER301_tree = default(CommonTree);
            CommonTree LEFT_PARENS302_tree = default(CommonTree);
            CommonTree RIGHT_PARENS304_tree = default(CommonTree);
            RewriteRuleITokenStream stream_LEFT_PARENS = new RewriteRuleITokenStream(adaptor, "token LEFT_PARENS");
            RewriteRuleITokenStream stream_RIGHT_PARENS = new RewriteRuleITokenStream(adaptor, "token RIGHT_PARENS");
            RewriteRuleITokenStream stream_ID = new RewriteRuleITokenStream(adaptor, "token ID");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
            try
            {
                DebugEnterRule(GrammarFileName, "literal");
                DebugLocation(212, 55);
                try
                {
                    // GBX.g:212:11: ( ID -> ^( VAR ID ) | NUMBER | LEFT_PARENS expression RIGHT_PARENS -> expression )
                    int alt60 = 3;
                    try
                    {
                        DebugEnterDecision(60, false);
                        switch (input.LA(1))
                        {
                            case ID:
                                {
                                    alt60 = 1;
                                }
                                break;
                            case NUMBER:
                                {
                                    alt60 = 2;
                                }
                                break;
                            case LEFT_PARENS:
                                {
                                    alt60 = 3;
                                }
                                break;
                            default:
                                {
                                    NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
                                    DebugRecognitionException(nvae);
                                    throw nvae;
                                }
                        }

                    }
                    finally { DebugExitDecision(60); }
                    switch (alt60)
                    {
                        case 1:
                            DebugEnterAlt(1);
                            // GBX.g:212:13: ID
                            {
                                DebugLocation(212, 13);
                                ID300 = (IToken)Match(input, ID, Follow._ID_in_literal2054);
                                stream_ID.Add(ID300);



                                {
                                    // AST REWRITE
                                    // elements: ID
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    retval.Tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                                    root_0 = (CommonTree)adaptor.Nil();
                                    // 212:16: -> ^( VAR ID )
                                    {
                                        DebugLocation(212, 19);
                                        // GBX.g:212:19: ^( VAR ID )
                                        {
                                            CommonTree root_1 = (CommonTree)adaptor.Nil();
                                            DebugLocation(212, 21);
                                            root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VAR, "VAR"), root_1);

                                            DebugLocation(212, 25);
                                            adaptor.AddChild(root_1, stream_ID.NextNode());

                                            adaptor.AddChild(root_0, root_1);
                                        }

                                    }

                                    retval.Tree = root_0;
                                }

                            }
                            break;
                        case 2:
                            DebugEnterAlt(2);
                            // GBX.g:213:7: NUMBER
                            {
                                root_0 = (CommonTree)adaptor.Nil();

                                DebugLocation(213, 7);
                                NUMBER301 = (IToken)Match(input, NUMBER, Follow._NUMBER_in_literal2070);
                                NUMBER301_tree = (CommonTree)adaptor.Create(NUMBER301);
                                adaptor.AddChild(root_0, NUMBER301_tree);

                            }
                            break;
                        case 3:
                            DebugEnterAlt(3);
                            // GBX.g:214:7: LEFT_PARENS expression RIGHT_PARENS
                            {
                                DebugLocation(214, 7);
                                LEFT_PARENS302 = (IToken)Match(input, LEFT_PARENS, Follow._LEFT_PARENS_in_literal2078);
                                stream_LEFT_PARENS.Add(LEFT_PARENS302);

                                DebugLocation(214, 19);
                                PushFollow(Follow._expression_in_literal2080);
                                expression303 = expression();
                                PopFollow();

                                stream_expression.Add(expression303.Tree);
                                DebugLocation(214, 30);
                                RIGHT_PARENS304 = (IToken)Match(input, RIGHT_PARENS, Follow._RIGHT_PARENS_in_literal2082);
                                stream_RIGHT_PARENS.Add(RIGHT_PARENS304);



                                {
                                    // AST REWRITE
                                    // elements: expression
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    retval.Tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                                    root_0 = (CommonTree)adaptor.Nil();
                                    // 214:43: -> expression
                                    {
                                        DebugLocation(214, 46);
                                        adaptor.AddChild(root_0, stream_expression.NextTree());

                                    }

                                    retval.Tree = root_0;
                                }

                            }
                            break;

                    }
                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("literal", 74);
                    LeaveRule("literal", 74);
                    LeaveRule_literal();
                }
                DebugLocation(214, 55);
            }
            finally { DebugExitRule(GrammarFileName, "literal"); }
            return retval;

        }
        // $ANTLR end "literal"

        partial void EnterRule_rr_ref_hl();
        partial void LeaveRule_rr_ref_hl();

        // $ANTLR start "rr_ref_hl"
        // GBX.g:216:1: rr_ref_hl : LEFT_BRACKET RR_HL RIGHT_BRACKET -> RR_REF_HL ;
        [GrammarRule("rr_ref_hl")]
        private AstParserRuleReturnScope<CommonTree, IToken> rr_ref_hl()
        {
            EnterRule_rr_ref_hl();
            EnterRule("rr_ref_hl", 75);
            TraceIn("rr_ref_hl", 75);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken LEFT_BRACKET305 = default(IToken);
            IToken RR_HL306 = default(IToken);
            IToken RIGHT_BRACKET307 = default(IToken);

            CommonTree LEFT_BRACKET305_tree = default(CommonTree);
            CommonTree RR_HL306_tree = default(CommonTree);
            CommonTree RIGHT_BRACKET307_tree = default(CommonTree);
            RewriteRuleITokenStream stream_RR_HL = new RewriteRuleITokenStream(adaptor, "token RR_HL");
            RewriteRuleITokenStream stream_LEFT_BRACKET = new RewriteRuleITokenStream(adaptor, "token LEFT_BRACKET");
            RewriteRuleITokenStream stream_RIGHT_BRACKET = new RewriteRuleITokenStream(adaptor, "token RIGHT_BRACKET");
            try
            {
                DebugEnterRule(GrammarFileName, "rr_ref_hl");
                DebugLocation(216, 58);
                try
                {
                    // GBX.g:216:12: ( LEFT_BRACKET RR_HL RIGHT_BRACKET -> RR_REF_HL )
                    DebugEnterAlt(1);
                    // GBX.g:216:14: LEFT_BRACKET RR_HL RIGHT_BRACKET
                    {
                        DebugLocation(216, 14);
                        LEFT_BRACKET305 = (IToken)Match(input, LEFT_BRACKET, Follow._LEFT_BRACKET_in_rr_ref_hl2095);
                        stream_LEFT_BRACKET.Add(LEFT_BRACKET305);

                        DebugLocation(216, 27);
                        RR_HL306 = (IToken)Match(input, RR_HL, Follow._RR_HL_in_rr_ref_hl2097);
                        stream_RR_HL.Add(RR_HL306);

                        DebugLocation(216, 33);
                        RIGHT_BRACKET307 = (IToken)Match(input, RIGHT_BRACKET, Follow._RIGHT_BRACKET_in_rr_ref_hl2099);
                        stream_RIGHT_BRACKET.Add(RIGHT_BRACKET307);



                        {
                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 216:47: -> RR_REF_HL
                            {
                                DebugLocation(216, 50);
                                adaptor.AddChild(root_0, (CommonTree)adaptor.Create(RR_REF_HL, "RR_REF_HL"));

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("rr_ref_hl", 75);
                    LeaveRule("rr_ref_hl", 75);
                    LeaveRule_rr_ref_hl();
                }
                DebugLocation(216, 58);
            }
            finally { DebugExitRule(GrammarFileName, "rr_ref_hl"); }
            return retval;

        }
        // $ANTLR end "rr_ref_hl"

        partial void EnterRule_rr_ref_bc();
        partial void LeaveRule_rr_ref_bc();

        // $ANTLR start "rr_ref_bc"
        // GBX.g:217:1: rr_ref_bc : LEFT_BRACKET RR_BC RIGHT_BRACKET -> RR_REF_BC ;
        [GrammarRule("rr_ref_bc")]
        private AstParserRuleReturnScope<CommonTree, IToken> rr_ref_bc()
        {
            EnterRule_rr_ref_bc();
            EnterRule("rr_ref_bc", 76);
            TraceIn("rr_ref_bc", 76);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken LEFT_BRACKET308 = default(IToken);
            IToken RR_BC309 = default(IToken);
            IToken RIGHT_BRACKET310 = default(IToken);

            CommonTree LEFT_BRACKET308_tree = default(CommonTree);
            CommonTree RR_BC309_tree = default(CommonTree);
            CommonTree RIGHT_BRACKET310_tree = default(CommonTree);
            RewriteRuleITokenStream stream_LEFT_BRACKET = new RewriteRuleITokenStream(adaptor, "token LEFT_BRACKET");
            RewriteRuleITokenStream stream_RR_BC = new RewriteRuleITokenStream(adaptor, "token RR_BC");
            RewriteRuleITokenStream stream_RIGHT_BRACKET = new RewriteRuleITokenStream(adaptor, "token RIGHT_BRACKET");
            try
            {
                DebugEnterRule(GrammarFileName, "rr_ref_bc");
                DebugLocation(217, 58);
                try
                {
                    // GBX.g:217:12: ( LEFT_BRACKET RR_BC RIGHT_BRACKET -> RR_REF_BC )
                    DebugEnterAlt(1);
                    // GBX.g:217:14: LEFT_BRACKET RR_BC RIGHT_BRACKET
                    {
                        DebugLocation(217, 14);
                        LEFT_BRACKET308 = (IToken)Match(input, LEFT_BRACKET, Follow._LEFT_BRACKET_in_rr_ref_bc2111);
                        stream_LEFT_BRACKET.Add(LEFT_BRACKET308);

                        DebugLocation(217, 27);
                        RR_BC309 = (IToken)Match(input, RR_BC, Follow._RR_BC_in_rr_ref_bc2113);
                        stream_RR_BC.Add(RR_BC309);

                        DebugLocation(217, 33);
                        RIGHT_BRACKET310 = (IToken)Match(input, RIGHT_BRACKET, Follow._RIGHT_BRACKET_in_rr_ref_bc2115);
                        stream_RIGHT_BRACKET.Add(RIGHT_BRACKET310);



                        {
                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 217:47: -> RR_REF_BC
                            {
                                DebugLocation(217, 50);
                                adaptor.AddChild(root_0, (CommonTree)adaptor.Create(RR_REF_BC, "RR_REF_BC"));

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("rr_ref_bc", 76);
                    LeaveRule("rr_ref_bc", 76);
                    LeaveRule_rr_ref_bc();
                }
                DebugLocation(217, 58);
            }
            finally { DebugExitRule(GrammarFileName, "rr_ref_bc"); }
            return retval;

        }
        // $ANTLR end "rr_ref_bc"

        partial void EnterRule_rr_ref_de();
        partial void LeaveRule_rr_ref_de();

        // $ANTLR start "rr_ref_de"
        // GBX.g:218:1: rr_ref_de : LEFT_BRACKET RR_DE RIGHT_BRACKET -> RR_REF_DE ;
        [GrammarRule("rr_ref_de")]
        private AstParserRuleReturnScope<CommonTree, IToken> rr_ref_de()
        {
            EnterRule_rr_ref_de();
            EnterRule("rr_ref_de", 77);
            TraceIn("rr_ref_de", 77);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken LEFT_BRACKET311 = default(IToken);
            IToken RR_DE312 = default(IToken);
            IToken RIGHT_BRACKET313 = default(IToken);

            CommonTree LEFT_BRACKET311_tree = default(CommonTree);
            CommonTree RR_DE312_tree = default(CommonTree);
            CommonTree RIGHT_BRACKET313_tree = default(CommonTree);
            RewriteRuleITokenStream stream_RR_DE = new RewriteRuleITokenStream(adaptor, "token RR_DE");
            RewriteRuleITokenStream stream_LEFT_BRACKET = new RewriteRuleITokenStream(adaptor, "token LEFT_BRACKET");
            RewriteRuleITokenStream stream_RIGHT_BRACKET = new RewriteRuleITokenStream(adaptor, "token RIGHT_BRACKET");
            try
            {
                DebugEnterRule(GrammarFileName, "rr_ref_de");
                DebugLocation(218, 58);
                try
                {
                    // GBX.g:218:12: ( LEFT_BRACKET RR_DE RIGHT_BRACKET -> RR_REF_DE )
                    DebugEnterAlt(1);
                    // GBX.g:218:14: LEFT_BRACKET RR_DE RIGHT_BRACKET
                    {
                        DebugLocation(218, 14);
                        LEFT_BRACKET311 = (IToken)Match(input, LEFT_BRACKET, Follow._LEFT_BRACKET_in_rr_ref_de2127);
                        stream_LEFT_BRACKET.Add(LEFT_BRACKET311);

                        DebugLocation(218, 27);
                        RR_DE312 = (IToken)Match(input, RR_DE, Follow._RR_DE_in_rr_ref_de2129);
                        stream_RR_DE.Add(RR_DE312);

                        DebugLocation(218, 33);
                        RIGHT_BRACKET313 = (IToken)Match(input, RIGHT_BRACKET, Follow._RIGHT_BRACKET_in_rr_ref_de2131);
                        stream_RIGHT_BRACKET.Add(RIGHT_BRACKET313);



                        {
                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 218:47: -> RR_REF_DE
                            {
                                DebugLocation(218, 50);
                                adaptor.AddChild(root_0, (CommonTree)adaptor.Create(RR_REF_DE, "RR_REF_DE"));

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("rr_ref_de", 77);
                    LeaveRule("rr_ref_de", 77);
                    LeaveRule_rr_ref_de();
                }
                DebugLocation(218, 58);
            }
            finally { DebugExitRule(GrammarFileName, "rr_ref_de"); }
            return retval;

        }
        // $ANTLR end "rr_ref_de"

        partial void EnterRule_rr_ref_c();
        partial void LeaveRule_rr_ref_c();

        // $ANTLR start "rr_ref_c"
        // GBX.g:219:1: rr_ref_c : LEFT_BRACKET REG_C RIGHT_BRACKET -> RR_REF_C ;
        [GrammarRule("rr_ref_c")]
        private AstParserRuleReturnScope<CommonTree, IToken> rr_ref_c()
        {
            EnterRule_rr_ref_c();
            EnterRule("rr_ref_c", 78);
            TraceIn("rr_ref_c", 78);
            AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
            retval.Start = (IToken)input.LT(1);

            CommonTree root_0 = default(CommonTree);

            IToken LEFT_BRACKET314 = default(IToken);
            IToken REG_C315 = default(IToken);
            IToken RIGHT_BRACKET316 = default(IToken);

            CommonTree LEFT_BRACKET314_tree = default(CommonTree);
            CommonTree REG_C315_tree = default(CommonTree);
            CommonTree RIGHT_BRACKET316_tree = default(CommonTree);
            RewriteRuleITokenStream stream_REG_C = new RewriteRuleITokenStream(adaptor, "token REG_C");
            RewriteRuleITokenStream stream_LEFT_BRACKET = new RewriteRuleITokenStream(adaptor, "token LEFT_BRACKET");
            RewriteRuleITokenStream stream_RIGHT_BRACKET = new RewriteRuleITokenStream(adaptor, "token RIGHT_BRACKET");
            try
            {
                DebugEnterRule(GrammarFileName, "rr_ref_c");
                DebugLocation(219, 56);
                try
                {
                    // GBX.g:219:11: ( LEFT_BRACKET REG_C RIGHT_BRACKET -> RR_REF_C )
                    DebugEnterAlt(1);
                    // GBX.g:219:13: LEFT_BRACKET REG_C RIGHT_BRACKET
                    {
                        DebugLocation(219, 13);
                        LEFT_BRACKET314 = (IToken)Match(input, LEFT_BRACKET, Follow._LEFT_BRACKET_in_rr_ref_c2143);
                        stream_LEFT_BRACKET.Add(LEFT_BRACKET314);

                        DebugLocation(219, 26);
                        REG_C315 = (IToken)Match(input, REG_C, Follow._REG_C_in_rr_ref_c2145);
                        stream_REG_C.Add(REG_C315);

                        DebugLocation(219, 32);
                        RIGHT_BRACKET316 = (IToken)Match(input, RIGHT_BRACKET, Follow._RIGHT_BRACKET_in_rr_ref_c2147);
                        stream_RIGHT_BRACKET.Add(RIGHT_BRACKET316);



                        {
                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            retval.Tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.Tree : null);

                            root_0 = (CommonTree)adaptor.Nil();
                            // 219:46: -> RR_REF_C
                            {
                                DebugLocation(219, 49);
                                adaptor.AddChild(root_0, (CommonTree)adaptor.Create(RR_REF_C, "RR_REF_C"));

                            }

                            retval.Tree = root_0;
                        }

                    }

                    retval.Stop = (IToken)input.LT(-1);

                    retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

                }
                catch (RecognitionException re)
                {
                    ReportError(re);
                    Recover(input, re);
                    retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

                }
                finally
                {
                    TraceOut("rr_ref_c", 78);
                    LeaveRule("rr_ref_c", 78);
                    LeaveRule_rr_ref_c();
                }
                DebugLocation(219, 56);
            }
            finally { DebugExitRule(GrammarFileName, "rr_ref_c"); }
            return retval;

        }
        // $ANTLR end "rr_ref_c"
        #endregion Rules

        #region Follow sets

        private static class Follow
        {
            public static readonly BitSet _assignment_in_program143 = new BitSet(new ulong[] { 0xFFFFC4000F000002UL, 0x1FFFFFFFUL, 0x80000UL });
            public static readonly BitSet _statement_in_program146 = new BitSet(new ulong[] { 0xFFFFC4000F000002UL, 0x1FFFFFFFUL, 0x80000UL });
            public static readonly BitSet _ID_in_assignment168 = new BitSet(new ulong[] { 0x30000000UL });
            public static readonly BitSet _EQUAL_MARK_in_assignment171 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _EQU_in_assignment173 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_assignment176 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _label_in_statement195 = new BitSet(new ulong[] { 0xFFFFC4000F000000UL, 0x1FFFFFFFUL, 0x80000UL });
            public static readonly BitSet _instruction_in_statement199 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _data_def_in_statement201 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _global_label_in_label227 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _local_label_in_label235 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _ID_in_global_label243 = new BitSet(new ulong[] { 0x100000UL });
            public static readonly BitSet _COLON_MARK_in_global_label245 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _147_in_local_label261 = new BitSet(new ulong[] { 0x40000000000UL });
            public static readonly BitSet _ID_in_local_label263 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _set_in_data_def280 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_data_def291 = new BitSet(new ulong[] { 0x200002UL });
            public static readonly BitSet _COMMA_in_data_def293 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_data_def296 = new BitSet(new ulong[] { 0x200002UL });
            public static readonly BitSet _op_adc_in_instruction307 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_add_in_instruction315 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_and_in_instruction323 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_bit_in_instruction331 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_call_in_instruction339 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_ccf_in_instruction347 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_cp_in_instruction355 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_cpl_in_instruction363 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_daa_in_instruction371 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_dec_in_instruction379 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_di_in_instruction387 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_ei_in_instruction395 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_halt_in_instruction403 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_inc_in_instruction411 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_jp_in_instruction419 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_jr_in_instruction427 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_ldhl_in_instruction435 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_ldio_in_instruction443 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_ldd_in_instruction451 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_ldi_in_instruction459 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_ld_in_instruction467 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_nop_in_instruction475 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_or_in_instruction483 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_pop_in_instruction491 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_push_in_instruction499 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_res_in_instruction507 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_ret_in_instruction515 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_reti_in_instruction523 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rl_in_instruction531 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rla_in_instruction539 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rlc_in_instruction547 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rlca_in_instruction555 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rr_in_instruction563 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rra_in_instruction571 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rrc_in_instruction579 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rrca_in_instruction587 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_rst_in_instruction595 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_sbc_in_instruction603 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_scf_in_instruction611 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_set_in_instruction619 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_sla_in_instruction627 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_sra_in_instruction635 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_srl_in_instruction643 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_stop_in_instruction651 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_sub_in_instruction659 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_swap_in_instruction667 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _op_xor_in_instruction675 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_ADC_in_op_adc686 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _REG_A_in_op_adc690 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_adc692 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_adc697 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_ADD_in_op_add706 = new BitSet(new ulong[] { 0x40000000040UL, 0x40FE014180000000UL, 0x408UL });
            public static readonly BitSet _REG_A_in_op_add712 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_add714 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_add719 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_HL_in_op_add723 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_add725 = new BitSet(new ulong[] { 0x0UL, 0x7000000000000000UL, 0x8UL });
            public static readonly BitSet _set_in_op_add728 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_SP_in_op_add740 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_add742 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_op_add745 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_AND_in_op_and756 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _REG_A_in_op_and760 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_and762 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_and767 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_BIT_in_op_bit776 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_op_bit779 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_bit781 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_bit785 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_bit787 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_CALL_in_op_call797 = new BitSet(new ulong[] { 0x40000038000UL, 0x8000000000000UL });
            public static readonly BitSet _cond_opt_in_op_call801 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_call803 = new BitSet(new ulong[] { 0x40000000000UL });
            public static readonly BitSet _ID_in_op_call808 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_CCF_in_op_ccf817 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_CP_in_op_cp827 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _REG_A_in_op_cp831 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_cp833 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_cp838 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_CPL_in_op_cpl847 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_DAA_in_op_daa857 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_DEC_in_op_dec867 = new BitSet(new ulong[] { 0x0UL, 0x70FE000080000000UL, 0x8UL });
            public static readonly BitSet _RR_BC_in_op_dec871 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_DE_in_op_dec873 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_HL_in_op_dec875 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_SP_in_op_dec877 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _r8_in_op_dec879 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_dec881 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_DI_in_op_di891 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_EI_in_op_ei901 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_HALT_in_op_halt911 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_INC_in_op_inc921 = new BitSet(new ulong[] { 0x0UL, 0x70FE000080000000UL, 0x8UL });
            public static readonly BitSet _RR_BC_in_op_inc925 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_DE_in_op_inc927 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_HL_in_op_inc929 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_SP_in_op_inc931 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _r8_in_op_inc933 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_inc935 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_JP_in_op_jp945 = new BitSet(new ulong[] { 0x40000038000UL, 0x4008000000000000UL, 0x80000UL });
            public static readonly BitSet _cond_opt_in_op_jp951 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_jp953 = new BitSet(new ulong[] { 0x40000000000UL, 0x0UL, 0x80000UL });
            public static readonly BitSet _ID_in_op_jp959 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _local_label_in_op_jp961 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_HL_in_op_jp965 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_JR_in_op_jr975 = new BitSet(new ulong[] { 0x40000038000UL, 0x8000000000000UL, 0x80000UL });
            public static readonly BitSet _cond_opt_in_op_jr979 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_jr981 = new BitSet(new ulong[] { 0x40000000000UL, 0x0UL, 0x80000UL });
            public static readonly BitSet _ID_in_op_jr987 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _local_label_in_op_jr989 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_LDHL_in_op_ldhl999 = new BitSet(new ulong[] { 0x0UL, 0x0UL, 0x8UL });
            public static readonly BitSet _RR_SP_in_op_ldhl1002 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ldhl1004 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_op_ldhl1007 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_LDIO_in_op_ldio1016 = new BitSet(new ulong[] { 0x0UL, 0x2000080000000UL });
            public static readonly BitSet _mem_ref_xp_in_op_ldio1021 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ldio1023 = new BitSet(new ulong[] { 0x0UL, 0x2000000000000UL });
            public static readonly BitSet _REG_A_in_op_ldio1026 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _REG_A_in_op_ldio1030 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ldio1032 = new BitSet(new ulong[] { 0x0UL, 0x80000000UL });
            public static readonly BitSet _mem_ref_xp_in_op_ldio1035 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_LDD_in_op_ldd1046 = new BitSet(new ulong[] { 0x0UL, 0x2000080000000UL });
            public static readonly BitSet _rr_ref_hl_in_op_ldd1051 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ldd1053 = new BitSet(new ulong[] { 0x0UL, 0x2000000000000UL });
            public static readonly BitSet _REG_A_in_op_ldd1056 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _REG_A_in_op_ldd1060 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ldd1062 = new BitSet(new ulong[] { 0x0UL, 0x80000000UL });
            public static readonly BitSet _rr_ref_hl_in_op_ldd1065 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_LDI_in_op_ldi1076 = new BitSet(new ulong[] { 0x0UL, 0x2000080000000UL });
            public static readonly BitSet _rr_ref_hl_in_op_ldi1081 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ldi1083 = new BitSet(new ulong[] { 0x0UL, 0x2000000000000UL });
            public static readonly BitSet _REG_A_in_op_ldi1086 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _REG_A_in_op_ldi1090 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ldi1092 = new BitSet(new ulong[] { 0x0UL, 0x80000000UL });
            public static readonly BitSet _rr_ref_hl_in_op_ldi1095 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_LD_in_op_ld1106 = new BitSet(new ulong[] { 0x0UL, 0x70FE000080000000UL, 0x8UL });
            public static readonly BitSet _REG_A_in_op_ld1111 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ld1113 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _r8_in_op_ld1117 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _expression_in_op_ld1119 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _mem_ref_in_op_ld1121 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _set_in_op_ld1132 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ld1146 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_ld1149 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _set_in_op_ld1159 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ld1167 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_op_ld1170 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _RR_SP_in_op_ld1180 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ld1182 = new BitSet(new ulong[] { 0x40000000040UL, 0x4000014100000000UL, 0x400UL });
            public static readonly BitSet _RR_HL_in_op_ld1186 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _expression_in_op_ld1188 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_c_in_op_ld1200 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _rr_ref_bc_in_op_ld1202 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _rr_ref_de_in_op_ld1204 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ld1207 = new BitSet(new ulong[] { 0x0UL, 0x2000000000000UL });
            public static readonly BitSet _REG_A_in_op_ld1210 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_ld1220 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ld1222 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014100000000UL, 0x400UL });
            public static readonly BitSet _r8_in_op_ld1226 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _expression_in_op_ld1228 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _mem_ref_xp_in_op_ld1239 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_ld1241 = new BitSet(new ulong[] { 0x0UL, 0x2000000000000UL, 0x8UL });
            public static readonly BitSet _set_in_op_ld1244 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_NOP_in_op_nop1259 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_OR_in_op_or1269 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _REG_A_in_op_or1273 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_or1275 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_or1280 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_POP_in_op_pop1289 = new BitSet(new ulong[] { 0x0UL, 0x7800000000000000UL });
            public static readonly BitSet _set_in_op_pop1292 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_PUSH_in_op_push1309 = new BitSet(new ulong[] { 0x0UL, 0x7800000000000000UL });
            public static readonly BitSet _set_in_op_push1312 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RES_in_op_res1329 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_op_res1332 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_res1334 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_res1338 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_res1340 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RET_in_op_ret1350 = new BitSet(new ulong[] { 0x38002UL, 0x8000000000000UL });
            public static readonly BitSet _cond_opt_in_op_ret1353 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RETI_in_op_reti1363 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RL_in_op_rl1373 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_rl1377 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_rl1379 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RLA_in_op_rla1389 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RLC_in_op_rlc1399 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_rlc1403 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_rlc1405 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RLCA_in_op_rlca1415 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RR_in_op_rr1425 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_rr1429 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_rr1431 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RRA_in_op_rra1441 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RRC_in_op_rrc1451 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_rrc1455 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_rrc1457 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RRCA_in_op_rrca1467 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_RST_in_op_rst1477 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_op_rst1480 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_SBC_in_op_sbc1489 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _REG_A_in_op_sbc1493 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_sbc1495 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_sbc1500 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_SCF_in_op_scf1509 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_SET_in_op_set1519 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_op_set1522 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_set1524 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_set1528 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_set1530 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_SLA_in_op_sla1540 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_sla1544 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_sla1546 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_SRA_in_op_sra1556 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_sra1560 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_sra1562 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_SRL_in_op_srl1572 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_srl1576 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_srl1578 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_STOP_in_op_stop1588 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_SUB_in_op_sub1598 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _REG_A_in_op_sub1602 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_sub1604 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_sub1609 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_SWAP_in_op_swap1618 = new BitSet(new ulong[] { 0x0UL, 0xFE000080000000UL });
            public static readonly BitSet _r8_in_op_swap1622 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_op_swap1624 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _INST_XOR_in_op_xor1634 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _REG_A_in_op_xor1638 = new BitSet(new ulong[] { 0x200000UL });
            public static readonly BitSet _COMMA_in_op_xor1640 = new BitSet(new ulong[] { 0x40000000040UL, 0xFE014180000000UL, 0x400UL });
            public static readonly BitSet _arith_opt_in_op_xor1644 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _r8_in_arith_opt1653 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _expression_in_arith_opt1655 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_arith_opt1657 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_c_in_mem_ref1682 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_bc_in_mem_ref1690 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_de_in_mem_ref1698 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _rr_ref_hl_in_mem_ref1706 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _mem_ref_xp_in_mem_ref1714 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _LEFT_BRACKET_in_mem_ref_xp1723 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_mem_ref_xp1725 = new BitSet(new ulong[] { 0x0UL, 0x100000000000000UL });
            public static readonly BitSet _RIGHT_BRACKET_in_mem_ref_xp1727 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _cond_exp_in_expression1768 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _bool_or_exp_in_cond_exp1784 = new BitSet(new ulong[] { 0x2UL, 0x1000000000000UL });
            public static readonly BitSet _QUEST_MARK_in_cond_exp1787 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _bool_or_exp_in_cond_exp1794 = new BitSet(new ulong[] { 0x100000UL });
            public static readonly BitSet _COLON_MARK_in_cond_exp1796 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _bool_or_exp_in_cond_exp1799 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _bool_and_exp_in_bool_or_exp1809 = new BitSet(new ulong[] { 0x1002UL });
            public static readonly BitSet _BOOL_OR_MARK_in_bool_or_exp1811 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _bool_and_exp_in_bool_or_exp1818 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _or_exp_in_bool_and_exp1827 = new BitSet(new ulong[] { 0x802UL });
            public static readonly BitSet _BOOL_AND_MARK_in_bool_and_exp1831 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _or_exp_in_bool_and_exp1838 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _xor_exp_in_or_exp1849 = new BitSet(new ulong[] { 0x102UL });
            public static readonly BitSet _BAR_MARK_in_or_exp1853 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _xor_exp_in_or_exp1860 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _and_exp_in_xor_exp1871 = new BitSet(new ulong[] { 0x4002UL });
            public static readonly BitSet _CARET_MARK_in_xor_exp1875 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _and_exp_in_xor_exp1882 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _equals_exp_in_and_exp1893 = new BitSet(new ulong[] { 0x12UL });
            public static readonly BitSet _AMP_MARK_in_and_exp1896 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _equals_exp_in_and_exp1903 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _compare_exp_in_equals_exp1913 = new BitSet(new ulong[] { 0x40000002UL, 0x8000000000UL });
            public static readonly BitSet _set_in_equals_exp1916 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _compare_exp_in_equals_exp1925 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _shift_exp_in_compare_exp1935 = new BitSet(new ulong[] { 0x6000000002UL, 0x1800000000UL });
            public static readonly BitSet _set_in_compare_exp1938 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _shift_exp_in_compare_exp1949 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _add_exp_in_shift_exp1959 = new BitSet(new ulong[] { 0x2UL, 0x400000000UL, 0x10UL });
            public static readonly BitSet _set_in_shift_exp1963 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _shift_exp_in_shift_exp1972 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _multiply_exp_in_add_exp1983 = new BitSet(new ulong[] { 0x2UL, 0x404000000000UL });
            public static readonly BitSet _set_in_add_exp1985 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _multiply_exp_in_add_exp1995 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _unary_exp_in_multiply_exp2004 = new BitSet(new ulong[] { 0x400000002UL, 0x200000000000UL, 0x80UL });
            public static readonly BitSet _set_in_multiply_exp2007 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _unary_exp_in_multiply_exp2018 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _literal_in_unary_exp2028 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _set_in_unary_exp2036 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _unary_exp_in_unary_exp2045 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _ID_in_literal2054 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _NUMBER_in_literal2070 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _LEFT_PARENS_in_literal2078 = new BitSet(new ulong[] { 0x40000000040UL, 0x14100000000UL, 0x400UL });
            public static readonly BitSet _expression_in_literal2080 = new BitSet(new ulong[] { 0x0UL, 0x200000000000000UL });
            public static readonly BitSet _RIGHT_PARENS_in_literal2082 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _LEFT_BRACKET_in_rr_ref_hl2095 = new BitSet(new ulong[] { 0x0UL, 0x4000000000000000UL });
            public static readonly BitSet _RR_HL_in_rr_ref_hl2097 = new BitSet(new ulong[] { 0x0UL, 0x100000000000000UL });
            public static readonly BitSet _RIGHT_BRACKET_in_rr_ref_hl2099 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _LEFT_BRACKET_in_rr_ref_bc2111 = new BitSet(new ulong[] { 0x0UL, 0x1000000000000000UL });
            public static readonly BitSet _RR_BC_in_rr_ref_bc2113 = new BitSet(new ulong[] { 0x0UL, 0x100000000000000UL });
            public static readonly BitSet _RIGHT_BRACKET_in_rr_ref_bc2115 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _LEFT_BRACKET_in_rr_ref_de2127 = new BitSet(new ulong[] { 0x0UL, 0x2000000000000000UL });
            public static readonly BitSet _RR_DE_in_rr_ref_de2129 = new BitSet(new ulong[] { 0x0UL, 0x100000000000000UL });
            public static readonly BitSet _RIGHT_BRACKET_in_rr_ref_de2131 = new BitSet(new ulong[] { 0x2UL });
            public static readonly BitSet _LEFT_BRACKET_in_rr_ref_c2143 = new BitSet(new ulong[] { 0x0UL, 0x8000000000000UL });
            public static readonly BitSet _REG_C_in_rr_ref_c2145 = new BitSet(new ulong[] { 0x0UL, 0x100000000000000UL });
            public static readonly BitSet _RIGHT_BRACKET_in_rr_ref_c2147 = new BitSet(new ulong[] { 0x2UL });
        }

        #endregion Follow sets
    }
} // namespace GBRead.Base